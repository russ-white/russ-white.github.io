import { Texture, Group, Object3D, LoadingManager, ImageLoader, Shape, BufferGeometry } from "three";
import { BatchedParticleRenderer } from "./BatchedParticleRenderer";
import { Behavior } from "./behaviors";
import { ParticleEmitter } from "./ParticleEmitter";
export declare class QuarksLoader {
    manager: LoadingManager;
    crossOrigin: string;
    path?: string;
    resourcePath: string;
    constructor(manager?: LoadingManager);
    setPath(value: string): this;
    setResourcePath(value: string): this;
    setCrossOrigin(value: string): this;
    load(url: string, renderer: BatchedParticleRenderer, onLoad: (object3d: Object3D) => void, onProgress: () => void, onError: (error: any) => void): void;
    loadImage(loader: ImageLoader, url: string): HTMLImageElement;
    deserializeImage(loader: ImageLoader, image: any): HTMLImageElement | {
        data: any;
        width: any;
        height: any;
    } | null;
    parseImages(json: any, onLoad: () => void): any;
    parseShapes(json: any): {
        [a: string]: Shape;
    };
    parseGeometries(json: any, shapes: {
        [a: string]: Shape;
    }): {
        [a: string]: BufferGeometry;
    };
    parseTextures(json: any, images: any): any;
    parseObject(data: any, meta: {
        textures: {
            [uuid: string]: Texture;
        };
        geometries: {
            [uuid: string]: BufferGeometry;
        };
    }, dependencies: {
        [uuid: string]: Behavior;
    }, renderer: BatchedParticleRenderer): Object3D<import("three").Event> | Group | ParticleEmitter;
    parse(json: any, onLoad: (object: any) => void, renderer: BatchedParticleRenderer): Object3D<import("three").Event> | Group | ParticleEmitter;
}
