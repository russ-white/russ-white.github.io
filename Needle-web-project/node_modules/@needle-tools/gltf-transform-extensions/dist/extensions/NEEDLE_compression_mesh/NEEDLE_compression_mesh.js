"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NEEDLE_mesh_compression_property = exports.NEEDLE_compression_mesh = void 0;
const core_1 = require("@gltf-transform/core");
const EXTENSION_NAME = "NEEDLE_compression_mesh";
class NEEDLE_compression_mesh extends core_1.Extension {
    static EXTENSION_NAME = EXTENSION_NAME;
    extensionName = EXTENSION_NAME;
    create(model) {
        const ext = new NEEDLE_mesh_compression_property(this.document.getGraph(), "");
        ext.model = model;
        return ext;
    }
    read(context) {
        if (!context.jsonDoc.json.meshes)
            return;
        console.log("READ " + EXTENSION_NAME);
        context.meshes?.forEach((mesh, index) => {
            const meshDefinition = context.jsonDoc.json.meshes[index];
            if (!meshDefinition)
                return;
            const primitives = mesh.listPrimitives();
            for (let i = 0; i < primitives.length; i++) {
                const primitive = meshDefinition.primitives[i];
                if (primitive.extensions && primitive.extensions[EXTENSION_NAME]) {
                    const model = primitive.extensions[EXTENSION_NAME];
                    primitives[i].setExtension(EXTENSION_NAME, this.create(model));
                }
            }
        });
        return this;
    }
    write(ctx) {
        return this;
    }
}
exports.NEEDLE_compression_mesh = NEEDLE_compression_mesh;
class NEEDLE_mesh_compression_property extends core_1.ExtensionProperty {
    static EXTENSION_NAME = EXTENSION_NAME;
    extensionName = EXTENSION_NAME;
    parentTypes = [core_1.PropertyType.PRIMITIVE];
    propertyType = EXTENSION_NAME;
    init() { }
    model;
}
exports.NEEDLE_mesh_compression_property = NEEDLE_mesh_compression_property;
