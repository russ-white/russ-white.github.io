"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NEEDLE_compression_texture_property = exports.NEEDLE_compression_texture = exports.EXTENSION_NAME = void 0;
const core_1 = require("@gltf-transform/core");
const utils_1 = require("../utils");
exports.EXTENSION_NAME = "NEEDLE_compression_texture";
const debugLog = false;
class NEEDLE_compression_texture extends core_1.Extension {
    static EXTENSION_NAME = exports.EXTENSION_NAME;
    extensionName = exports.EXTENSION_NAME;
    create(toktxInfo) {
        const ext = new NEEDLE_compression_texture_property(this.document.getGraph(), "");
        ext.model = toktxInfo;
        return ext;
    }
    read(context) {
        if (!context.jsonDoc.json.textures)
            return;
        if (debugLog)
            console.log("READ " + exports.EXTENSION_NAME);
        context.textures?.forEach((tex, index) => {
            const textureDefinition = context.jsonDoc.json.textures[index];
            if (textureDefinition?.extensions && textureDefinition.extensions[exports.EXTENSION_NAME]) {
                const prop = new NEEDLE_compression_texture_property(this.document.getGraph(), exports.EXTENSION_NAME);
                prop.model = textureDefinition.extensions[exports.EXTENSION_NAME];
                tex.setExtension(exports.EXTENSION_NAME, prop);
            }
        });
        return this;
    }
    write(context) {
        if (debugLog)
            console.log("WRITE " + exports.EXTENSION_NAME);
        const root = this.document.getRoot();
        const textures = root.listTextures();
        for (const tex of textures) {
            const ext = tex.getExtension(exports.EXTENSION_NAME);
            if (ext) {
                // console.log("Found extension", ext.toktxSettings);
                const def = (0, utils_1.getTextureDefinition)(context, tex);
                // console.log(def);
                if (def) {
                    def.extensions = def.extensions || {};
                    def.extensions[exports.EXTENSION_NAME] = ext.model;
                }
            }
        }
        return this;
    }
}
exports.NEEDLE_compression_texture = NEEDLE_compression_texture;
class NEEDLE_compression_texture_property extends core_1.ExtensionProperty {
    static EXTENSION_NAME = exports.EXTENSION_NAME;
    extensionName = exports.EXTENSION_NAME;
    parentTypes = [core_1.PropertyType.TEXTURE];
    propertyType = exports.EXTENSION_NAME;
    init() { }
    model;
}
exports.NEEDLE_compression_texture_property = NEEDLE_compression_texture_property;
