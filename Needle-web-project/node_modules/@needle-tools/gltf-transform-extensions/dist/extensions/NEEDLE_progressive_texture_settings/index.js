"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NEEDLE_progressive_texture_settings_property = exports.NEEDLE_progressive_texture_settings = void 0;
const core_1 = require("@gltf-transform/core");
// TODO: rename to NEEDLE_progressive_texture
const EXTENSION_NAME = "NEEDLE_progressive_texture_settings";
class NEEDLE_progressive_texture_settings extends core_1.Extension {
    static EXTENSION_NAME = EXTENSION_NAME;
    extensionName = EXTENSION_NAME;
    read(context) {
        const textureDefinitions = context.jsonDoc.json.textures;
        if (!textureDefinitions)
            return this;
        const root = this.document.getRoot();
        const textures = root.listTextures();
        for (let i = 0; i < textureDefinitions.length; i++) {
            const texDef = textureDefinitions[i];
            if (texDef.extensions && texDef.extensions[EXTENSION_NAME]) {
                const ext = texDef.extensions[EXTENSION_NAME];
                const prop = new NEEDLE_progressive_texture_settings_property(this.document.getGraph(), "");
                Object.assign(prop, ext);
                textures[i].setExtension(EXTENSION_NAME, prop);
            }
        }
        return this;
    }
    write(context) {
        return this;
    }
}
exports.NEEDLE_progressive_texture_settings = NEEDLE_progressive_texture_settings;
class NEEDLE_progressive_texture_settings_property extends core_1.ExtensionProperty {
    static EXTENSION_NAME = EXTENSION_NAME;
    extensionName = EXTENSION_NAME;
    parentTypes = [core_1.PropertyType.TEXTURE];
    propertyType = EXTENSION_NAME;
    init() { }
    get isValid() {
        return this.maxSize !== undefined && this.maxSize > 0;
    }
    maxSize;
    guid;
}
exports.NEEDLE_progressive_texture_settings_property = NEEDLE_progressive_texture_settings_property;
