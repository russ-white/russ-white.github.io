"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.needle_simplify = void 0;
const core_1 = require("@gltf-transform/core");
const functions_1 = require("@gltf-transform/functions");
const meshoptimizer_1 = require("meshoptimizer");
const extensions_1 = require("../extensions");
const NAME = 'needle_simplify';
const needle_simplify = function (options) {
    const simplifier = meshoptimizer_1.MeshoptSimplifier;
    if (!simplifier) {
        throw new Error(`${NAME}: simplifier dependency required — install "meshoptimizer".`);
    }
    return (document, _context) => {
        const logger = document.getLogger();
        options = { ...options, simplifier: simplifier };
        const weldOptions = {
            tolerance: 0.00000000001,
            overwrite: true
        };
        for (const mesh of document.getRoot().listMeshes()) {
            for (const prim of mesh.listPrimitives()) {
                const ext = prim.getExtension(extensions_1.NEEDLE_mesh_compression.EXTENSION_NAME);
                if (!ext) {
                    // logger.warn("Skipping primitive of mesh " + mesh.getName() + ": No NEEDLE_compression_mesh extension.");
                    continue;
                }
                let meshOptions = { ...options };
                if (ext.model) {
                    const model = ext.model;
                    if (!model.useSimplifier) {
                        logger.debug(`${NAME}: Skipping primitive of mesh "${mesh.getName()}": useSimplifier is false.`);
                        continue;
                    }
                    if (model.error >= 0)
                        meshOptions.error = model.error;
                    if (model.ratio >= 0)
                        meshOptions.ratio = model.ratio;
                    meshOptions.lockBorder = model.lockBorder;
                }
                if (prim.getMode() !== core_1.Primitive.Mode.TRIANGLES) {
                    logger.warn(`${NAME}: Skipping primitive of mesh "${mesh.getName()}": Requires TRIANGLES draw mode.`);
                    continue;
                }
                logger.debug(`${NAME}: Welding primitive of mesh "${mesh.getName()}" → tolerance: ${weldOptions.tolerance}`);
                (0, functions_1.weldPrimitive)(document, prim, weldOptions);
                logger.debug(`${NAME}: Simplifying primitive of mesh "${mesh.getName()}" → ratio: ${meshOptions.ratio}, error: ${meshOptions.error}`);
                (0, functions_1.simplifyPrimitive)(document, prim, meshOptions);
            }
        }
    };
};
exports.needle_simplify = needle_simplify;
