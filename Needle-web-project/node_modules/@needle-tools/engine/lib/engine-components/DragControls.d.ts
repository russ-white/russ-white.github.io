import { GameObject } from "./Component";
import * as THREE from "three";
import { IPointerDownHandler, IPointerEnterHandler, IPointerExitHandler, IPointerUpHandler, PointerEventData } from "./ui/PointerEvents";
import { Interactable } from "./Interactable";
export declare enum DragEvents {
    SelectStart = "selectstart",
    SelectEnd = "selectend"
}
interface SelectArgs {
    selected: THREE.Object3D;
    attached: THREE.Object3D | GameObject | null;
}
export interface IDragEventListener {
    onDragStart?(): any;
    onDragEnd?(): any;
}
export declare class DragControls extends Interactable implements IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler {
    private static _active;
    static get HasAnySelected(): boolean;
    transformSelf: boolean;
    private orbit;
    private selectStartEventListener;
    private selectEndEventListener;
    constructor();
    addDragEventListener(type: DragEvents, cb: (ctrls: DragControls, args: SelectArgs) => void | Function): void;
    private _dragHelper;
    start(): void;
    private static lastHovered;
    private _draggingRigidbodies;
    private allowEdit;
    onPointerEnter(evt: PointerEventData): void;
    onPointerExit(evt: PointerEventData): void;
    private _waitingForDragStart;
    onPointerDown(args: PointerEventData): void;
    onPointerUp(args: PointerEventData): void;
    update(): void;
    private _isDragging;
    private _marker;
    private _dragDelta;
    private _didDrag;
    private onDragStart;
    private onUpdateDrag;
    private onDragEnd;
}
export {};
