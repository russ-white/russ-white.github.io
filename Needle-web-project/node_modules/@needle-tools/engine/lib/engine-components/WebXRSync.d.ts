import { Behaviour } from "./Component";
import { NetworkConnection } from "../engine/engine_networking";
import { WebXR } from "./WebXR";
import { Group, Quaternion, Vector3, Vector4 } from "three";
import { Builder } from "flatbuffers";
import { VrUserStateBuffer } from "../engine-schemes/vr-user-state-buffer";
export declare class VRUserState {
    guid: string;
    time: number;
    avatarId: string;
    position: Vector3;
    rotation: Vector4;
    scale: number;
    posLeftHand: Vector3;
    posRightHand: Vector3;
    rotLeftHand: Quaternion;
    rotRightHand: Quaternion;
    constructor(guid: string);
    private static invertRotation;
    update(rig: Group, pos: DOMPointReadOnly, rot: DOMPointReadOnly, webXR: WebXR, avatarId: string): void;
    private static quat0;
    private static quat1;
    sendAsBuffer(builder: Builder, net: NetworkConnection): void;
    setFromBuffer(guid: string, state: VrUserStateBuffer): void;
}
export declare class WebXRSync extends Behaviour {
    webXR: WebXR | null;
    private debugAvatarUser;
    private voip;
    awake(): Promise<void>;
    onEnable(): void;
    private tempState;
    private onTryGetAvatar;
    onDisable(): void;
    update(): void;
    private _removeAvatarsList;
    private detectPotentiallyDisconnectedAvatarsAndRemove;
    private buildLocalAvatar;
    private eventSub_ConnectionEvent;
    private eventSub_WebXRStartEvent;
    private eventSub_WebXREndEvent;
    private eventSub_WebXRUpdateEvent;
    private avatars;
    private localAvatar;
    private k_LocalAvatarNoNetworkingGuid;
    private onConnected;
    private onXRSessionStart;
    private onXRSessionEnded;
    private ownership;
    private xrState;
    private builder;
    private onXRSessionUpdate;
    private getAvatarId;
}
