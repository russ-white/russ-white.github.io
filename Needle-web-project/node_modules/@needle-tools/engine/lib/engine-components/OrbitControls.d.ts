import { Behaviour } from "./Component";
import { OrbitControls as ThreeOrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { LookAtConstraint } from "./LookAtConstraint";
import * as THREE from "three";
export declare class OrbitControls extends Behaviour {
    get controls(): ThreeOrbitControls | null;
    get controllerObject(): THREE.Object3D | null;
    onStartInteraction(func: Function): void;
    autoRotate: boolean;
    autoRotateSpeed: number;
    enableKeys: boolean;
    enableDamping: boolean;
    dampingFactor: number;
    enableZoom: boolean;
    minZoom: number;
    maxZoom: number;
    enablePan: boolean;
    lookAtConstraint: LookAtConstraint | null;
    lookAtConstraint01: number;
    middleClickToFocus: boolean;
    doubleClickToFocus: boolean;
    useSlerp: boolean;
    debugLog: boolean;
    targetLerpSpeed: number;
    private _lookTargetPosition;
    private _controls;
    private _cameraObject;
    private _lerpToTargetPosition;
    private _lerpCameraToTarget;
    private _cameraTargetPosition;
    private _inputs;
    private _enableTime;
    private _startedListeningToKeyEvents;
    awake(): void;
    onEnable(): void;
    onDisable(): void;
    onDestroy(): void;
    start(): void;
    private startRaycastDelayed;
    onBeforeRender(): void;
    setCameraTarget(position?: THREE.Vector3 | null, immediate?: boolean): void;
    setFromTargetPosition(index?: number, t?: number): boolean;
    setTarget(position?: THREE.Vector3 | null, immediate?: boolean): void;
    lerpTarget(position: THREE.Vector3, delta: number): void;
    distanceToTarget(position: THREE.Vector3): number;
    private setTargetFromRaycast;
}
