import { IGraphic } from './Interfaces';
import * as ThreeMeshUI from 'three-mesh-ui';
import { RGBAColor } from "../js-extensions/RGBAColor";
import { BaseUIComponent } from "./BaseUIComponent";
import { Texture } from 'three';
import { RectTransform } from './RectTransform';
export declare class Graphic extends BaseUIComponent implements IGraphic {
    get isGraphic(): boolean;
    get color(): RGBAColor;
    set color(col: RGBAColor);
    protected onColorChanged(): void;
    private get m_Color();
    raycastTarget: boolean;
    protected uiObject: ThreeMeshUI.Block | null;
    private _color;
    private _rect;
    protected get rectTransform(): RectTransform;
    setState(state: string): void;
    setupState(state: object): void;
    setOptions(opts: object): void;
    awake(): void;
    onEnable(): void;
    onDisable(): void;
    private _currentlyCreatingPanel;
    protected makePanel(): void;
    protected onBeforeCreate(_opts: any): void;
    protected onCreate(opts: any): void;
    protected onAfterCreated(): void;
    /** used internally to ensure textures assigned to UI use linear encoding */
    static textureCache: Map<Texture, Texture>;
    protected setTexture(tex: Texture | null | undefined): Promise<void>;
    protected onAfterAddedToScene(): void;
}
export declare class MaskableGraphic extends Graphic {
    protected onAfterCreated(): void;
}
