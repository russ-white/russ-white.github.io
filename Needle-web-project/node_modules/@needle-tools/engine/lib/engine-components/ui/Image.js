var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { serializable } from '../../engine/engine_serialization_decorator';
import { Color, Texture } from 'three';
import { MaskableGraphic } from './Graphic';
class Sprite {
    texture;
    rect;
}
__decorate([
    serializable(Texture)
], Sprite.prototype, "texture", void 0);
export class Image extends MaskableGraphic {
    sprite;
    isBuiltinSprite() {
        switch (this.sprite?.texture?.name) {
            case "InputFieldBackground":
            case "UISprite":
            case "Background":
                return true;
        }
        // this is a hack/workaround for production builds where the name of the sprite is missing
        // need to remove this!!!!
        if (this.sprite?.texture?.image?.width === 32 && this.sprite?.texture?.image?.height === 32)
            return true;
        return false;
    }
    onBeforeCreate(opts) {
        if (this.isBuiltinSprite()) {
            opts.borderRadius = 5;
            opts.borderColor = new Color(.4, .4, .4);
            opts.borderOpacity = this.color.alpha;
            opts.borderWidth = .3;
        }
    }
    onAfterCreated() {
        super.onAfterCreated();
        if (this.isBuiltinSprite())
            return;
        this.setTexture(this.sprite?.texture);
    }
}
__decorate([
    serializable(Sprite)
], Image.prototype, "sprite", void 0);
export class RawImage extends MaskableGraphic {
    mainTexture;
    onAfterCreated() {
        super.onAfterCreated();
        // console.log(this);
        // if (this.mainTexture) {
        //     this.mainTexture.flipY = true;
        //     this.mainTexture.needsUpdate = true;
        // }
        this.setTexture(this.mainTexture);
    }
}
__decorate([
    serializable(Texture)
], RawImage.prototype, "mainTexture", void 0);
//# sourceMappingURL=Image.js.map