import { Behaviour } from "./Component";
import * as THREE from 'three';
import { Vector3 } from "three";
import { IRigidbody } from "../engine/engine_types";
import { CollisionDetectionMode, RigidbodyConstraints } from "../engine/engine_physics.types";
export declare class Rigidbody extends Behaviour implements IRigidbody {
    mass: number;
    useGravity: boolean;
    constraints: RigidbodyConstraints;
    isKinematic: boolean;
    drag: number;
    angularDrag: number;
    detectCollisions: boolean;
    sleepThreshold: number;
    collisionDetectionMode: CollisionDetectionMode;
    get lockPositionX(): boolean;
    get lockPositionY(): boolean;
    get lockPositionZ(): boolean;
    get lockRotationX(): boolean;
    get lockRotationY(): boolean;
    get lockRotationZ(): boolean;
    set lockPositionX(v: boolean);
    set lockPositionY(v: boolean);
    set lockPositionZ(v: boolean);
    set lockRotationX(v: boolean);
    set lockRotationY(v: boolean);
    set lockRotationZ(v: boolean);
    private static tempPosition;
    private _propertiesChanged;
    private _currentVelocity;
    private _smoothedVelocity;
    private _smoothedVelocityGetter;
    private _lastPosition;
    private _watch?;
    awake(): void;
    onEnable(): void;
    onDisable(): void;
    onDestroy(): void;
    onValidate(): void;
    beforePhysics(): Generator<undefined, void, unknown>;
    private get body();
    teleport(pt: {
        x: number;
        y: number;
        z: number;
    }, localspace?: boolean): void;
    resetForces(): void;
    resetTorques(): void;
    resetVelocities(): void;
    resetForcesAndTorques(): void;
    wakeUp(): void;
    applyForce(vec: Vector3, _rel?: THREE.Vector3): void;
    applyImpulse(vec: Vector3): void;
    setForce(x: number, y: number, z: number): void;
    getVelocity(): Vector3;
    setVelocity(x: number | Vector3, y?: number, z?: number): void;
    setAngularVelocity(x: number | Vector3, y?: number, z?: number): void;
    setTorque(x: number | Vector3, y: number, z: number): void;
    get smoothedVelocity(): Vector3;
    /**d
     * @deprecated not used anymore
     */
    setBodyFromGameObject(_velocity?: THREE.Vector3 | null | {
        x: number;
        y: number;
        z: number;
    }): void;
    private captureVelocity;
}
