import { Behaviour } from "./Component";
import * as THREE from "three";
export declare enum AudioRolloffMode {
    Logarithmic = 0,
    Linear = 1,
    Custom = 2
}
export declare class AudioSource extends Behaviour {
    private static _didCallBeginWaitForUserInteraction;
    static get userInteractionRegistered(): boolean;
    private static callbacks;
    static registerWaitForAllowAudio(cb: Function): void;
    private static _userInteractionRegistered;
    private static _beginWaitForUserInteraction;
    clip: string;
    playOnAwake: boolean;
    get loop(): boolean;
    set loop(val: boolean);
    get spatialBlend(): number;
    set spatialBlend(val: number);
    get minDistance(): number;
    set minDistance(val: number);
    get maxDistance(): number;
    set maxDistance(val: number);
    private _spatialBlend;
    private _minDistance;
    private _maxDistance;
    get volume(): number;
    set volume(val: number);
    private _volume;
    rollOffMode: AudioRolloffMode;
    private _loop;
    private sound;
    private helper;
    private wasPlaying;
    private audioLoader;
    private shouldPlay;
    private _lastClipStartedLoading;
    get Sound(): THREE.PositionalAudio | null;
    get ShouldPlay(): boolean;
    private _focusCallback?;
    awake(): void;
    onDestroy(): void;
    onEnable(): void;
    onDisable(): void;
    private lerp;
    private onLoaded;
    private applySpatialDistanceSettings;
    private loadAndPlay;
    play(clip?: string | undefined): void;
    pause(): void;
    stop(): void;
    private _lastContextTime;
    get isPlaying(): boolean;
    set isPlaying(_: boolean);
    get time(): number;
    set time(val: number);
    private _hasEnded;
    private _needUpdateSpatialDistanceSettings;
    update(): void;
}
