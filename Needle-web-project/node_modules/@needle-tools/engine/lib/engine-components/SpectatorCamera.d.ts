import { Behaviour } from "./Component";
import { Camera } from "./Camera";
import { PlayerView } from "../engine/engine_playerview";
export declare enum SpectatorMode {
    FirstPerson = 0,
    ThirdPerson = 1
}
export declare class SpectatorCamera extends Behaviour {
    cam: Camera | null;
    private _mode;
    get mode(): SpectatorMode;
    set mode(val: SpectatorMode);
    /** if this user is currently spectating someone else */
    get isSpectating(): boolean;
    isSpectatingUser(userId: string): boolean;
    isFollowedBy(userId: string): boolean;
    /** list of other users that are following me */
    get followers(): string[];
    stopSpectating(): void;
    private get localId();
    /** player view to follow */
    set target(target: PlayerView | undefined);
    get target(): PlayerView | undefined;
    requestAllFollowMe(): void;
    private get isSpectatingSelf();
    private orbit;
    private _handler?;
    private eventSub_WebXRRequestStartEvent;
    private eventSub_WebXRStartEvent;
    private eventSub_WebXREndEvent;
    private _debug?;
    private _networking;
    awake(): void;
    onDestroy(): void;
    private isSupportedPlatform;
    private onXRSessionRequestStart;
    private onXRSessionStart;
    private onXRSessionEnded;
    private followSelf;
    onAfterRender(): void;
    private setAvatarFlagsBeforeRender;
    private resetAvatarFlags;
}
