import { Behaviour } from "./Component";
import * as THREE from "three";
import { RGBAColor } from "./js-extensions/RGBAColor";
import { Ray } from "three";
import { ICamera } from "../engine/engine_types";
export declare enum ClearFlags {
    Skybox = 1,
    SolidColor = 2,
    Uninitialized = 4
}
export declare class Camera extends Behaviour implements ICamera {
    get isCamera(): boolean;
    get aspect(): number;
    get fieldOfView(): number;
    set fieldOfView(val: number);
    get nearClipPlane(): number;
    set nearClipPlane(val: number);
    private _nearClipPlane;
    get farClipPlane(): number;
    set farClipPlane(val: number);
    private _farClipPlane;
    get clearFlags(): ClearFlags;
    set clearFlags(val: ClearFlags);
    orthographic: boolean;
    orthographicSize: number;
    ARBackgroundAlpha: number;
    set cullingMask(val: number);
    get cullingMask(): number;
    private _cullingMask;
    set backgroundBlurriness(val: number | undefined);
    get backgroundBlurriness(): number | undefined;
    private _backgroundBlurriness?;
    set backgroundIntensity(val: number | undefined);
    get backgroundIntensity(): number | undefined;
    private _backgroundIntensity?;
    get backgroundColor(): RGBAColor | null;
    set backgroundColor(val: RGBAColor | null);
    private _backgroundColor?;
    private _fov;
    private _cam;
    private _clearFlags;
    private _skybox?;
    get cam(): THREE.PerspectiveCamera | THREE.OrthographicCamera;
    private static _origin;
    private static _direction;
    screenPointToRay(x: number, y: number, ray?: Ray): Ray;
    awake(): void;
    onEnable(): void;
    onDisable(): void;
    buildCamera(): void;
    applyClearFlagsIfIsActiveCamera(): void;
    private environmentIsTransparent;
    private enableSkybox;
}
