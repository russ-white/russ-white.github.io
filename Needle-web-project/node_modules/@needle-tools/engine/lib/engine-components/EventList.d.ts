export declare class CallInfo {
    method?: Function;
    enabled: boolean;
    constructor(method?: Function, enabled?: boolean);
    invoke(...args: any): void;
}
export declare class EventListEvent extends Event {
    args?: [];
}
export declare class EventList {
    private target?;
    private key?;
    /** set an event target to try invoke the EventTarget dispatchEvent when this EventList is invoked */
    setEventTarget(key: string, target: object): void;
    private _isInvoking;
    private methods;
    constructor(evts?: CallInfo[]);
    invoke(...args: any): void;
    addEventListener(cb: Function): Function;
    removeEventListener(cb: Function | null | undefined): void;
    removeAllEventListeners(): void;
}
