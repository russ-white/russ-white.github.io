/// <reference types="webxr" />
import { Group, Intersection, Mesh, Object3D, Quaternion, Ray, Vector3 } from "three";
import { OculusHandPointerModel } from 'three/examples/jsm/webxr/OculusHandPointerModel.js';
import { XRControllerModel, XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory.js';
import { Behaviour, GameObject } from "./Component";
import { SyncedTransform } from "./SyncedTransform";
import { WebXR } from "./WebXR";
export declare enum ControllerType {
    PhysicalDevice = 0,
    Touch = 1
}
export declare enum ControllerEvents {
    SelectStart = "select-start",
    SelectEnd = "select-end",
    Update = "update"
}
export declare class TeleportTarget extends Behaviour {
}
export declare class WebXRController extends Behaviour {
    static Factory: XRControllerModelFactory;
    private static raycastColor;
    private static raycastNoHitColor;
    private static geometry;
    private static handModels;
    private static CreateRaycastLine;
    private static CreateRaycastHitPoint;
    static Create(owner: WebXR, index: number, addTo: GameObject, type: ControllerType): WebXRController;
    static addEventListener(evt: ControllerEvents, callback: (controller: WebXRController, args: any) => void): void;
    static removeEventListener(evt: ControllerEvents, callback: (controller: WebXRController, args: any) => void): void;
    private static eventSubs;
    webXR: WebXR;
    index: number;
    controllerModel: XRControllerModel;
    controller: Group;
    controllerGrip: Group;
    hand: Group;
    handPointerModel: OculusHandPointerModel;
    grabbed: AttachedObject | null;
    input: XRInputSource | null;
    type: ControllerType;
    showRaycastLine: boolean;
    get isUsingHands(): boolean;
    get wrist(): Object3D | null;
    private _wristQuaternion;
    getWristQuaternion(): Quaternion | null;
    private movementVector;
    private worldRot;
    private joystick;
    private didRotate;
    private didTeleport;
    private didChangeScale;
    private static PreviousCameraFarDistance;
    private static MovementSpeedFactor;
    private lastHit;
    private raycastLine;
    private _raycastHitPoint;
    private _connnectedCallback;
    private _disconnectedCallback;
    private _selectStartEvt;
    private _selectEndEvt;
    get selectionDown(): boolean;
    get selectionUp(): boolean;
    get selectionPressed(): boolean;
    get selectionClick(): boolean;
    get raycastHitPoint(): Object3D | null;
    private _selectionPressed;
    private _selectionPressedLastFrame;
    private _selectionStartTime;
    private _selectionEndTime;
    get useSmoothing(): boolean;
    private _useSmoothing;
    awake(): void;
    onDestroy(): void;
    onEnable(): void;
    onDisable(): void;
    private _isConnected;
    private onSourceConnected;
    private onSourceDisconnected;
    private createPointerEvent;
    rayRotation: Quaternion;
    update(): void;
    private _pinchStartTime;
    onUpdate(session: XRSession): void;
    private runTeleport;
    private isValidTeleportTarget;
    private updateStick;
    private updateLastHit;
    private onSelectStart;
    private selectStartCallback;
    private lastSelectStartObject;
    private onHandleSelectStart;
    private _didNotEndSelection;
    private onSelectEnd;
    private testIsVisible;
    private setControllerLayers;
    getRay(): Ray;
    private closeGrabBoundingBoxHelper?;
    overlap(): Intersection[];
    raycast(): Intersection[];
}
export declare enum AttachedObjectEvents {
    WillTake = "WillTake",
    DidTake = "DidTake",
    WillFree = "WillFree",
    DidFree = "DidFree"
}
export declare class AttachedObject {
    static Events: {
        [key: string]: Function[];
    };
    static AddEventListener(event: AttachedObjectEvents, callback: Function): Function;
    static RemoveEventListener(event: AttachedObjectEvents, callback: Function | null): void;
    static Current: AttachedObject[];
    private static Register;
    private static Remove;
    static TryTake(controller: WebXRController, candidate: Object3D, intersection: Intersection, closeGrab: boolean): AttachedObject | null;
    sync: SyncedTransform | null;
    selected: Object3D | null;
    selectedParent: Object3D | null;
    selectedMesh: Mesh | null;
    controller: WebXRController | null;
    grabTime: number;
    grabUUID: string;
    isCloseGrab: boolean;
    private originalMaterial;
    private usageMarker;
    private rigidbodies;
    private didReparent;
    private grabDistance;
    private interactable;
    private positionSource;
    private Take;
    free(): void;
    grabPoint: Vector3;
    private localPositionOffsetToGrab;
    private localPositionOffsetToGrab_worldSpace;
    private localQuaternionToGrab;
    private targetDir;
    private quaternionLerp;
    private controllerDir;
    private controllerWorldPos;
    private lastControllerWorldPos;
    private controllerPosDelta;
    private totalChangeAlongDirection;
    private rigPositionLastFrame;
    private controllerMovementSinceLastFrame;
    update(): void;
}
