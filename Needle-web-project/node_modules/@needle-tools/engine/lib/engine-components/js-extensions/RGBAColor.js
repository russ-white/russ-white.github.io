import { Mathf } from "../../engine/engine_math";
import { Color } from "three";
export class RGBAColor extends Color {
    alpha = 1;
    get isRGBAColor() { return true; }
    constructor(r, g, b, a) {
        super(r, g, b);
        this.alpha = a;
    }
    clone() {
        const cloned = super.clone();
        cloned.alpha = this.alpha;
        return cloned;
    }
    copy(col) {
        super.copy(col);
        if ("alpha" in col && typeof col.alpha === "number") {
            this.alpha = col.alpha;
        }
        else if (typeof col["a"] === "number")
            this.alpha = col["a"];
        return this;
    }
    lerp(color, alpha) {
        const rgba = color;
        if (rgba.alpha)
            this.alpha = Mathf.lerp(this.alpha, rgba.alpha, alpha);
        return super.lerp(color, alpha);
    }
    lerpColors(color1, color2, alpha) {
        const rgba1 = color1;
        const rgba2 = color2;
        if (rgba1.alpha && rgba2.alpha)
            this.alpha = Mathf.lerp(rgba1.alpha, rgba2.alpha, alpha);
        return super.lerpColors(color1, color2, alpha);
    }
    multiply(color) {
        const rgba = color;
        if (rgba.alpha)
            this.alpha = this.alpha * rgba.alpha;
        return super.multiply(color);
    }
}
//# sourceMappingURL=RGBAColor.js.map