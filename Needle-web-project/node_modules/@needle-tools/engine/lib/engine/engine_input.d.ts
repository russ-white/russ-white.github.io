import * as THREE from 'three';
import { Context } from './engine_setup';
import { Vec2 } from './engine_types';
export declare type PointerEventArgs = {
    pointerType: string;
    button: number;
    clientX: number;
    clientY: number;
    movementX?: number;
    movementY?: number;
    source?: Event;
};
export declare class KeyEventArgs {
    key: string;
    keyType: string;
    source?: Event;
    constructor(evt: KeyboardEvent);
}
export declare enum InputEvents {
    PointerDown = "pointerdown",
    PointerUp = "pointerup",
    PointerMove = "pointermove",
    KeyDown = "keydown",
    KeyUp = "keyup",
    KeyPressed = "keypress"
}
export declare enum PointerType {
    Mouse = "mouse",
    Touch = "touch"
}
export declare class Input extends EventTarget {
    _doubleClickTimeThreshold: number;
    _longPressTimeThreshold: number;
    get mousePosition(): THREE.Vector2;
    get mousePositionRC(): THREE.Vector2;
    get mouseDown(): boolean;
    get mouseUp(): boolean;
    get mouseClick(): boolean;
    get mouseDoubleClick(): boolean;
    get mousePressed(): boolean;
    get mouseWheelChanged(): boolean;
    private _specialCursorTrigger;
    setCursorPointer(): void;
    setCursorNormal(): void;
    getPointerPressedCount(): number;
    getPointerPosition(i: number): THREE.Vector2 | null;
    getPointerPositionLastFrame(i: number): THREE.Vector2 | null;
    getPointerPositionDelta(i: number): THREE.Vector2 | null;
    getPointerPositionRC(i: number): THREE.Vector2 | null;
    getPointerDown(i: number): boolean;
    getPointerUp(i: number): boolean;
    getPointerPressed(i: number): boolean;
    getPointerClicked(i: number): boolean;
    getPointerDoubleClicked(i: number): boolean;
    getPointerDownTime(i: number): number;
    getPointerUpTime(i: number): number;
    getPointerLongPress(i: number): boolean;
    getIsMouse(i: number): boolean;
    getIsTouch(i: number): boolean;
    getTouchesPressedCount(): number;
    getMouseWheelChanged(i?: number): boolean;
    getMouseWheelDeltaY(i?: number): number;
    getPointerEvent(i: number): Event | undefined;
    foreachPointerId(pointerType?: string | PointerType | string[] | PointerType[]): Generator<number>;
    foreachTouchId(): Generator<number>;
    private _pointerIsActive;
    private context;
    private _pointerDown;
    private _pointerUp;
    private _pointerClick;
    private _pointerDoubleClick;
    private _pointerPressed;
    private _pointerPositions;
    private _pointerPositionsLastFrame;
    private _pointerPositionsDelta;
    private _pointerPositionsRC;
    private _pointerPositionDown;
    private _pointerDownTime;
    private _pointerUpTime;
    private _pointerIds;
    private _pointerTypes;
    private _mouseWheelChanged;
    private _mouseWheelDeltaY;
    private _pointerEvent;
    getKeyDown(): string | null;
    getKeyPressed(): string | null;
    isKeyDown(keyCode: KeyCode | string | number): any;
    isKeyUp(keyCode: KeyCode | string | number): boolean;
    isKeyPressed(keyCode: KeyCode | string | number): any;
    createPointerDown(args: PointerEventArgs): void;
    createPointerMove(args: PointerEventArgs): void;
    createPointerUp(args: PointerEventArgs): void;
    convertScreenspaceToRaycastSpace(vec2: Vec2): void;
    constructor(context: Context);
    private onLostFocus;
    private onEndOfFrame;
    private keysPressed;
    private onKeyDown;
    private onKeyPressed;
    private onKeyUp;
    private onMouseWheel;
    private onTouchStart;
    private onTouchMove;
    private onTouchUp;
    private onMouseDown;
    private onMouseMove;
    private onMouseUp;
    private isInRect;
    private onDown;
    private onMove;
    private onUp;
    private updatePointerPosition;
    /** get the next free id */
    private getPointerIndex;
    private setPointerState;
    private setPointerStateT;
    private onDispatchEvent;
}
export declare enum KeyCode {
    BACKSPACE = "Backspace",
    TAB = "Tab",
    ENTER = "Enter",
    SHIFT = "Shift",
    CTRL = "Control",
    ALT = "Alt",
    PAUSE = "Pause",
    CAPS_LOCK = "CapsLock",
    ESCAPE = "Escape",
    SPACE = " ",
    PAGE_UP = "PageUp",
    PAGE_DOWN = "PageDown",
    END = "End",
    HOME = "Home",
    LEFT_ARROW = "ArrowLeft",
    UP_ARROW = "ArrowUp",
    RIGHT_ARROW = "ArrowRight",
    DOWN_ARROW = "ArrowDown",
    INSERT = "Insert",
    DELETE = "Delete",
    KEY_0 = "0",
    KEY_1 = "1",
    KEY_2 = "2",
    KEY_3 = "3",
    KEY_4 = "4",
    KEY_5 = "5",
    KEY_6 = "6",
    KEY_7 = "7",
    KEY_8 = "8",
    KEY_9 = "9",
    KEY_A = "a",
    KEY_B = "b",
    KEY_C = "c",
    KEY_D = "d",
    KEY_E = "e",
    KEY_F = "f",
    KEY_G = "g",
    KEY_H = "h",
    KEY_I = "i",
    KEY_K = "k",
    KEY_J = "j",
    KEY_L = "l",
    KEY_M = "m",
    KEY_N = "n",
    KEY_O = "o",
    KEY_P = "p",
    KEY_Q = "q",
    KEY_R = "r",
    KEY_S = "s",
    KEY_T = "t",
    KEY_U = "u",
    KEY_V = "v",
    KEY_W = "w",
    KEY_X = "x",
    KEY_Z = "z",
    KEY_Y = "y",
    SELECT = "Select",
    NUMPAD_0 = "Numpad0",
    NUMPAD_1 = "Numpad1",
    NUMPAD_2 = "Numpad2",
    NUMPAD_3 = "Numpad3",
    NUMPAD_4 = "Numpad4",
    NUMPAD_5 = "Numpad5",
    NUMPAD_6 = "Numpad6",
    NUMPAD_7 = "Numpad7",
    NUMPAD_8 = "Numpad8",
    NUMPAD_9 = "Numpad9",
    MULTIPLY = "Multiply",
    ADD = "Add",
    SUBTRACT = "Subtract",
    DECIMAL = "Decimal",
    DIVIDE = "Divide",
    F1 = "F1",
    F2 = "F2",
    F3 = "F3",
    F4 = "F4",
    F5 = "F5",
    F6 = "F6",
    F7 = "F7",
    F8 = "F8",
    F9 = "F9",
    F10 = "F10",
    F11 = "F11",
    F12 = "F12"
}
