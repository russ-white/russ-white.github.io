export var ApplicationEvents;
(function (ApplicationEvents) {
    ApplicationEvents["Visible"] = "application-visible";
    ApplicationEvents["Hidden"] = "application-hidden";
})(ApplicationEvents || (ApplicationEvents = {}));
export class Application extends EventTarget {
    context;
    get hasFocus() {
        return document.hasFocus();
    }
    get isVisible() {
        return this._isVisible;
    }
    _isVisible = true;
    constructor(context) {
        super();
        this.context = context;
        // console.log("APP");
        window.addEventListener("visibilitychange", this.onVisiblityChanged.bind(this), false);
    }
    onVisiblityChanged(evt) {
        // console.log(evt.target.visibilityState)
        switch (evt.target.visibilityState) {
            case "hidden":
                this._isVisible = false;
                this.dispatchEvent(new Event(ApplicationEvents.Hidden));
                break;
            case "visible":
                this._isVisible = true;
                this.dispatchEvent(new Event(ApplicationEvents.Visible));
                break;
        }
    }
}
//# sourceMappingURL=engine_application.js.map