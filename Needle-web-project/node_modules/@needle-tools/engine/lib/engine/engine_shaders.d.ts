import * as SHADERDATA from "./shaders/shaderData";
import { DataTexture, Color } from "three";
import { RGBAColor } from "../engine-components/js-extensions/RGBAColor";
export declare const whiteDefaultTexture: DataTexture;
export declare function createFlatTexture(col: RGBAColor | Color, size?: number): DataTexture;
export declare function createTrilightTexture<T extends Color>(col0: T, col1: T, col2: T, width?: number, height?: number): DataTexture;
export declare enum Stage {
    Vertex = 0,
    Fragment = 1
}
export declare class UnityShaderStage {
    stage: Stage;
    code: string;
    constructor(stage: Stage, code: string);
}
declare class ShaderLib {
    loaded: Map<string, UnityShaderStage>;
    loadShader(url: string): Promise<SHADERDATA.ShaderData>;
    load(stage: Stage, url: string): Promise<UnityShaderStage>;
}
export declare const lib: ShaderLib;
export declare function ToUnityMatrixArray(mat: THREE.Matrix4, buffer?: Array<THREE.Vector4>): Array<THREE.Vector4>;
export declare function SetUnitySphericalHarmonics(obj: object, array?: number[]): void;
export declare class ShaderBundle {
    readonly vertexShader: string;
    readonly fragmentShader: string;
    readonly technique: SHADERDATA.Technique;
    constructor(vertexShader: string, fragmentShader: string, technique: SHADERDATA.Technique);
}
export declare function FindShaderTechniques(shaderData: SHADERDATA.ShaderData, id: number): Promise<ShaderBundle | null>;
export {};
