import * as THREE from 'three';
import { Scene } from 'three';
declare class TextureInfo {
    name: string;
    sampler: number;
    source: number;
    extras: {
        guid: string;
    } | undefined;
}
declare class GltfJson {
    textures: TextureInfo[];
    bufferViews: Array<{
        buffer: number;
        byteOffset: number;
        byteLength: number;
    }>;
}
declare class GltfParser {
    cache: any;
    json: GltfJson;
    associations: Map<any, any>;
    textureLoader: THREE.TextureLoader;
    loadTexture: Function;
}
declare class Gltf {
    parser: GltfParser;
    scene: Scene;
}
/** @deprecated */
export declare class AssetDatabase {
    constructor();
    private texturesLoader;
    private textures;
    private texturesLoading;
    /** @deprecated */
    loadTexture(url: string): Promise<THREE.Texture | null>;
    /** @deprecated */
    getTexture(guid: string): THREE.Texture | null;
    /** @deprecated */
    findTexture(name: string): THREE.Texture | null;
    /** @deprecated */
    findMesh(name: string): THREE.Mesh | null;
    /** @deprecated */
    findMaterial(name: string): THREE.Material | null;
    /** @deprecated */
    registerGltf(_gltf: Gltf): Promise<void>;
    /** @deprecated */
    registerAsset(_asset: any): void;
    private _materials;
    private _meshes;
    private _textures;
}
export {};
