import { Vector4, Texture, LightProbe } from "three";
import { Context } from "./engine_setup";
import { SceneLightSettings } from "./extensions/NEEDLE_lighting_settings";
import { SourceIdentifier } from "./engine_types";
export declare type SphericalHarmonicsData = {
    array: number[];
    texture: THREE.WebGLCubeRenderTarget | THREE.Texture;
    lightProbe?: LightProbe;
};
export declare enum AmbientMode {
    Skybox = 0,
    Trilight = 1,
    Flat = 3,
    Custom = 4
}
export declare enum DefaultReflectionMode {
    Skybox = 0,
    Custom = 1
}
export declare class RendererData {
    private context;
    constructor(context: Context);
    private sceneLightSettings?;
    private preUpdate;
    private _timevec4;
    get timeVec4(): Vector4;
    get environmentIntensity(): number;
    registerSceneLightSettings(sceneLightSettings: SceneLightSettings): void;
    registerReflection(sourceId: SourceIdentifier, reflectionTexture: Texture): void;
    getReflection(sourceId: SourceIdentifier): LightData | null | undefined;
    enableReflection(sourceId: SourceIdentifier): void;
    disableReflection(): void;
    getSceneLightingData(sourceId: SourceIdentifier): Promise<SphericalHarmonicsData>;
    private _waitPromise?;
    private _lighting;
}
export declare class LightData {
    get Source(): Texture;
    get Array(): number[] | undefined;
    private _context;
    private _source;
    private _sphericalHarmonics;
    private _sphericalHarmonicsArray?;
    private _ambientScale;
    private _lightProbe?;
    constructor(context: Context, tex: THREE.Texture, ambientScale?: number);
    getSphericalHarmonicsArray(intensityFactor?: number): SphericalHarmonicsData | null;
}
