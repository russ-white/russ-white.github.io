import * as engine_setup from "./engine_setup";
import * as engine_scenetools from "./engine_scenetools";
import "./tests/test_utils";
import { RGBAColor } from "../engine-components/js-extensions/RGBAColor";
declare const engine: {
    RGBAColor: typeof RGBAColor;
    addGltfLoadEventListener(type: engine_scenetools.GltfLoadEventType, listener: engine_scenetools.GltfLoadEventCallback): void;
    removeGltfLoadEventListener(type: engine_scenetools.GltfLoadEventType, listener: engine_scenetools.GltfLoadEventCallback): void;
    parseSync(context: engine_setup.Context, data: any, path: string, seed: number | import("./engine_types").UIDProvider | null): Promise<import("three/examples/jsm/loaders/GLTFLoader").GLTF | undefined>;
    loadSync(context: engine_setup.Context, url: string, seed: number | import("./engine_types").UIDProvider | null, _allowAddingAnimator?: boolean, prog?: ((ProgressEvent: any) => void) | undefined): Promise<import("three/examples/jsm/loaders/GLTFLoader").GLTF | undefined>;
    findAnimationsLate(_context: engine_setup.Context, gltf: any, callbackarray: any, allowAddingAnimator?: boolean): void;
    findAnimations(gltf: import("three/examples/jsm/loaders/GLTFLoader").GLTF, allowAddingAnimator?: boolean): void;
    tryFindObjectByName(name: any, obj: any, recursive?: boolean): any;
    tryFindObject(globalObjectIdentifier: any, obj: any, recursive?: boolean): any;
    tryFindScript(globalObjectIdentifier: any, list?: null): import("./engine_types").IComponent | null;
    NeedleGltfLoader: typeof engine_scenetools.NeedleGltfLoader;
    GltfLoadEventType: typeof engine_scenetools.GltfLoadEventType;
    GltfLoadEvent: typeof engine_scenetools.GltfLoadEvent;
    registerComponent(script: import("./engine_types").IComponent, context?: engine_setup.Context | undefined): void;
    build_scene_functions: {
        [name: string]: (context: engine_setup.Context) => Promise<void>;
    };
    LoadingProgressArgs: typeof engine_setup.LoadingProgressArgs;
    LoadingOptions: typeof engine_setup.LoadingOptions;
    ContextArgs: typeof engine_setup.ContextArgs;
    FrameEvent: typeof engine_setup.FrameEvent;
    XRSessionMode: typeof engine_setup.XRSessionMode;
    Context: typeof engine_setup.Context;
};
export { engine as engine };
