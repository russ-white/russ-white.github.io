import { showBalloonWarning } from "./api";
import { Mathf } from "./engine_math";
import { getParam } from "./engine_utils";
const debug = getParam("debugloadingbar");
export class LoadingElementOptions {
    className;
    additionalClasses;
}
let currentFileProgress = 0;
let currentFileName;
export function calculateProgress01(progress) {
    if (debug)
        console.log(progress.progress.loaded.toFixed(0) + "/" + progress.progress.total.toFixed(0), progress);
    const count = progress.count;
    const total = progress.progress.total;
    // if the progress event total amount is unknown / not reported
    // we slowly move the progress bar forward
    if (total === 0 || total === undefined) {
        // reset the temp progress when the file has changed
        if (currentFileName !== progress.name)
            currentFileProgress = 0;
        currentFileName = progress.name;
        // slowly move the progress bar forward
        currentFileProgress += (1 - currentFileProgress) * .001;
        if (debug)
            showBalloonWarning("Loading " + progress.name + " did not report total size");
    }
    else {
        currentFileProgress = progress.progress.loaded / total;
    }
    const prog = progress.index / count + currentFileProgress / count;
    return Mathf.clamp01(prog);
}
export class EngineLoadingView {
    // the raw progress
    loadingProgress = 0;
    container;
    _progress = 0;
    _allowCustomLoadingElement = false;
    _loadingElement;
    _loadingTextContainer = null;
    _loadingBar = null;
    _messageContainer = null;
    _loadingElementOptions;
    constructor(container, opts) {
        this.container = container;
        this._loadingElementOptions = opts;
    }
    onLoadingBegin(message) {
        if (!this._loadingElement) {
            for (let i = 0; i < this.container.children.length; i++) {
                const el = this.container.children[i];
                if (el.classList.contains("loading")) {
                    if (!this._allowCustomLoadingElement) {
                        console.warn("Custom loading container is not allowed");
                        this.container.removeChild(el);
                        continue;
                    }
                    this._loadingElement = this.createLoadingElement(el);
                    return;
                }
            }
            this._loadingElement = this.createLoadingElement();
        }
        this._progress = 0;
        this.loadingProgress = 0;
        this._loadingElement.style.display = "flex";
        this.container.appendChild(this._loadingElement);
        this.smoothProgressLoop();
        this.setMessage(message ?? "");
    }
    onLoadingUpdate(progress, message) {
        // if the element has no parent we want to add it
        if (!this._loadingElement?.parentElement) {
            this.onLoadingBegin(message);
        }
        // console.log(callback.name, callback.progress.loaded / callback.progress.total, callback.index + "/" + callback.count);
        let total01 = 0;
        if (typeof progress === "number") {
            total01 = progress;
        }
        else {
            if ("index" in progress)
                total01 = calculateProgress01(progress);
            if (!message && "name" in progress)
                this.setMessage(progress.name);
        }
        this.loadingProgress = total01;
        if (message)
            this.setMessage(message);
        this.updateDisplay();
    }
    onLoadingFinished(message) {
        this.loadingProgress = 1;
        this.setMessage(message ?? "");
    }
    setMessage(message) {
        if (this._messageContainer) {
            this._messageContainer.innerText = message;
        }
    }
    _progressLoop;
    smoothProgressLoop() {
        if (this._progressLoop)
            return;
        let dt = 1 / 12;
        const max = 1 - .05;
        this._progressLoop = setInterval(() => {
            if (this.loadingProgress >= 1 && this._progress >= max) {
                if (this._loadingElement) {
                    this._loadingElement.style.display = "none";
                    this._loadingElement.remove();
                }
                clearInterval(this._progressLoop);
                this._progressLoop = null;
                return;
            }
            this._progress = Mathf.lerp(this._progress, this.loadingProgress, dt * this.loadingProgress);
            this.updateDisplay();
        }, dt);
    }
    updateDisplay() {
        const t = this._progress;
        const percent = (t * 100).toFixed(0) + "%";
        if (this._loadingBar) {
            this._loadingBar.style.width = t * 100 + "%";
        }
        if (this._loadingTextContainer)
            this._loadingTextContainer.textContent = percent;
    }
    createLoadingElement(existing) {
        this._loadingElement = existing || document.createElement("div");
        if (!existing) {
            this._loadingElement.style.position = "fixed";
            this._loadingElement.style.width = "100%";
            this._loadingElement.style.height = "100%";
            this._loadingElement.style.left = "0";
            this._loadingElement.style.top = "0";
            this._loadingElement.style.backgroundColor = "#000000";
            this._loadingElement.style.display = "flex";
            this._loadingElement.style.alignItems = "center";
            this._loadingElement.style.justifyContent = "center";
            this._loadingElement.style.zIndex = "1000";
            this._loadingElement.style.flexDirection = "column";
            this._loadingElement.style.pointerEvents = "none";
            this._loadingElement.style.color = "white";
        }
        const className = this._loadingElementOptions?.className ?? "loading";
        this._loadingElement.classList.add(className);
        if (this._loadingElementOptions?.additionalClasses) {
            for (const c of this._loadingElementOptions.additionalClasses) {
                this._loadingElement.classList.add(c);
            }
        }
        const loadingBarContainer = document.createElement("div");
        const maxWidth = 30;
        loadingBarContainer.style.display = "flex";
        loadingBarContainer.style.width = maxWidth + "%";
        loadingBarContainer.style.height = "2px";
        loadingBarContainer.style.background = "rgba(255,255,255,.1)";
        this._loadingElement.appendChild(loadingBarContainer);
        this._loadingBar = document.createElement("div");
        loadingBarContainer.appendChild(this._loadingBar);
        const getGradientPos = function (t) {
            return Mathf.lerp(maxWidth * .5, 100 - maxWidth * .5, t) + "%";
        };
        this._loadingBar.style.background =
            `linear-gradient(90deg, #02022B ${getGradientPos(0)}, #0BA398 ${getGradientPos(.4)}, #99CC33 ${getGradientPos(.5)}, #D7DB0A ${getGradientPos(1)})`;
        this._loadingBar.style.backgroundAttachment = "fixed";
        this._loadingBar.style.width = "0%";
        this._loadingBar.style.height = "100%";
        this._loadingTextContainer = document.createElement("div");
        this._loadingTextContainer.style.display = "flex";
        this._loadingTextContainer.style.justifyContent = "center";
        this._loadingTextContainer.style.marginTop = ".9em";
        this._loadingElement.appendChild(this._loadingTextContainer);
        const messageContainer = document.createElement("div");
        this._messageContainer = messageContainer;
        messageContainer.style.display = "flex";
        messageContainer.style.fontSize = ".8em";
        messageContainer.style.paddingTop = ".5em";
        messageContainer.style.color = "rgba(255,255,255,.5)";
        // messageContainer.style.border = "1px solid rgba(255,255,255,.1)";
        messageContainer.style.justifyContent = "center";
        this._loadingElement.appendChild(messageContainer);
        return this._loadingElement;
    }
}
//# sourceMappingURL=engine_element_loading.js.map