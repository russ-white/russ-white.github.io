import { Object3D, Scene } from "three";
import { Constructor, ConstructorConcrete, IComponent } from "./engine_types";
export declare function removeComponent(go: Object3D, componentInstance: IComponent): void;
export declare function getOrAddComponent<T extends IComponent>(go: Object3D, typeName: ConstructorConcrete<T>): T;
export declare function addNewComponent<T extends IComponent>(obj: Object3D, componentInstance: T, callAwake?: boolean): IComponent;
export declare function moveComponentInstance(obj: Object3D, componentInstance: IComponent): void;
export declare function destroyComponentInstance(componentInstance: IComponent): void;
export declare function getComponent<T>(obj: Object3D, componentType: Constructor<T>): any;
export declare function getComponents<T>(obj: Object3D, componentType: Constructor<T>, arr?: T[] | null): T[];
export declare function getComponentInChildren<T>(obj: Object3D, componentType: Constructor<T>, includeInactive?: boolean): any;
export declare function getComponentsInChildren<T>(obj: Object3D, componentType: Constructor<T>, arr?: T[]): T[];
export declare function getComponentInParent<T>(obj: Object3D, componentType: Constructor<T>): any;
export declare function getComponentsInParent<T>(obj: Object3D, componentType: Constructor<T>, arr?: T[] | null): T[];
export declare function findObjectOfType<T>(type: Constructor<T>, contextOrScene: Object3D | {
    scene: Scene;
}, includeInactive: any): any;
export declare function findObjectsOfType<T>(type: Constructor<T>, array: T[], contextOrScene: any): T[];
