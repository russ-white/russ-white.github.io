"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addPackages = void 0;
const package_utils_1 = require("../utils/package-utils");
const path_utils_1 = require("../utils/path-utils");
const version_utils_1 = require("../utils/version-utils");
function addPackages(packageJsonPath, dependencies, devDependencies, peerDependencies) {
    const packageJson = (0, package_utils_1.getPackageJson)(packageJsonPath);
    if (!packageJson) {
        console.error(`Could not find package.json at ${packageJsonPath}`);
        return false;
    }
    if (dependencies) {
        dependencies.forEach(dependency => {
            if (!dependency.includes(":")) {
                console.error(`Dependencies must be in the format "name:version"`);
                return;
            }
            if (!packageJson.dependencies) {
                packageJson.dependencies = {};
            }
            const [name, version] = getNameAndVersion(dependency);
            if (name && version)
                addPackage(packageJsonPath, packageJson.dependencies, name, version);
        });
    }
    if (devDependencies) {
        devDependencies.forEach(dependency => {
            if (!dependency.includes(":")) {
                console.error(`Dev dependencies must be in the format "name:version"`);
                return;
            }
            if (!packageJson.devDependencies) {
                packageJson.devDependencies = {};
            }
            const [name, version] = getNameAndVersion(dependency);
            if (name && version)
                addPackage(packageJsonPath, packageJson.devDependencies, name, version);
        });
    }
    if (peerDependencies) {
        peerDependencies.forEach(dependency => {
            if (!dependency.includes(":")) {
                console.error(`Peer dependencies must be in the format "name:version"`);
                return;
            }
            if (!packageJson.peerDependencies) {
                packageJson.peerDependencies = {};
            }
            const [name, version] = getNameAndVersion(dependency);
            if (name && version)
                addPackage(packageJsonPath, packageJson.peerDependencies, name, version);
        });
    }
    // write package json  
    (0, package_utils_1.savePackageJson)(packageJsonPath, packageJson);
    return true;
}
exports.addPackages = addPackages;
function getNameAndVersion(nameAndVersion) {
    const index = nameAndVersion.indexOf(":");
    if (index === -1) {
        return [nameAndVersion, undefined];
    }
    return [nameAndVersion.substring(0, index), nameAndVersion.substring(index + 1)];
}
function addPackage(dirOrFilePath, dict, packageName, packageVersionOrPath) {
    if ((0, version_utils_1.isVersion)(packageVersionOrPath)) {
        dict[packageName] = packageVersionOrPath;
    }
    else {
        packageVersionOrPath = (0, path_utils_1.getRelative)(dirOrFilePath, packageVersionOrPath);
        if (!(0, path_utils_1.exists)(packageVersionOrPath)) {
            console.warn(`WARN: Could not find package at ${packageVersionOrPath}`);
        }
        dict[packageName] = `file:${packageVersionOrPath}`;
    }
    console.log("Added \"" + packageName + "\" as \"" + dict[packageName] + "\"");
}
