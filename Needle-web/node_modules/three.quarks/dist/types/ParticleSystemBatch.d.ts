import { ParticleSystem } from './ParticleSystem';
import { Blending, Mesh, ShaderMaterial, Texture, BufferGeometry } from 'three';
export interface ParticleSystemBatchSettings {
    instancingGeometry: BufferGeometry;
    texture: Texture;
    uTileCount: number;
    vTileCount: number;
    blending: Blending;
    renderMode: RenderMode;
    renderOrder: number;
    transparent: boolean;
}
export declare enum RenderMode {
    BillBoard = 0,
    StretchedBillBoard = 1,
    LocalSpace = 2,
    Trail = 3
}
export declare abstract class ParticleSystemBatch extends Mesh {
    type: string;
    systems: Set<ParticleSystem>;
    material: ShaderMaterial;
    settings: ParticleSystemBatchSettings;
    protected maxParticles: number;
    protected constructor(settings: ParticleSystemBatchSettings);
    addSystem(system: ParticleSystem): void;
    removeSystem(system: ParticleSystem): void;
    abstract setupBuffers(): void;
    abstract expandBuffers(target: number): void;
    abstract rebuildMaterial(): void;
    abstract update(): void;
    abstract dispose(): void;
}
