"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.needle_texture_transform = exports.resizeTextureIfNecessary = void 0;
const needle_progressive_1 = require("./needle_progressive");
const extensions_1 = require("../extensions");
const cache_1 = require("../cache");
const needle_webp_1 = require("./needle_webp");
const squoosh = __importStar(require("@squoosh/lib"));
const needle_toktx_1 = require("./needle_toktx");
async function resizeTextureIfNecessary(texture) {
    const ext = texture.getExtension(extensions_1.NEEDLE_compression_texture.EXTENSION_NAME);
    if (ext?.model) {
        const mimeType = texture.getMimeType();
        const isSupported = mimeType === "image/jpeg" || mimeType === "image/png";
        if (isSupported) {
            const settings = ext.model;
            const size = texture.getSize();
            if (size) {
                if (settings.maxSize > 4 && (size[0] > settings.maxSize || size[1] > settings.maxSize)) {
                    console.log(`> Will resize texture ${texture.getName()} from ${size[0]}x${size[1]} to ${settings.maxSize}x${settings.maxSize}`);
                    await (0, needle_progressive_1.resizeTextureToMax)(texture, settings.maxSize, console);
                }
            }
        }
    }
    return undefined;
}
exports.resizeTextureIfNecessary = resizeTextureIfNecessary;
const needle_texture_transform = function (options) {
    const webPContext = new needle_webp_1.NeedleWebPContext({
        squoosh: squoosh,
        jobs: 4,
        auto: false
    });
    const toktxContext = new needle_toktx_1.NeedleToktxContext({
        jobs: undefined, // default to number of cores
    });
    const context = {
        ...options,
        webPContext,
        toktxContext
    };
    return async (document) => {
        await webPContext.prepare(document);
        await toktxContext.prepare(document);
        const logger = document.getLogger();
        const textures = document.getRoot().listTextures();
        await Promise.all(textures.map((texture, textureIndex) => {
            return processTexture(texture, textureIndex, document, logger, context);
        }));
        await webPContext.finalize(document);
        await toktxContext.finalize(document);
    };
};
exports.needle_texture_transform = needle_texture_transform;
async function processTexture(texture, index, document, logger, context) {
    const mimeType = texture.getMimeType();
    const isSupported = mimeType === "image/jpeg" || mimeType === "image/png";
    // dont try to transform EXR or already processed textures
    if (!isSupported)
        return;
    const ext = texture.getExtension(extensions_1.NEEDLE_compression_texture.EXTENSION_NAME);
    const compressionSettings = ext?.model;
    const key = context.useCache ? (0, cache_1.getKey)(texture) : undefined;
    const cached = context.useCache && key ? (0, cache_1.tryGetFromCache)(key) : undefined;
    if (cached) {
        logger.debug(`> Using cached texture ${texture.getName()} (${index})`);
    }
    let successFullyProcessed = false;
    if (compressionSettings) {
        switch (compressionSettings.mode) {
            case "webp":
                if (cached) {
                    texture.setImage(cached).setMimeType("image/webp");
                    return;
                }
                await resizeTextureIfNecessary(texture);
                successFullyProcessed = await context.webPContext.process(index, texture, compressionSettings);
                break;
            case "ETC1S":
                if (cached) {
                    texture.setImage(cached).setMimeType("image/ktx2");
                    return;
                }
                await resizeTextureIfNecessary(texture);
                successFullyProcessed = await context.toktxContext.process(index, texture, compressionSettings);
                break;
            case "UASTC":
                if (cached) {
                    texture.setImage(cached).setMimeType("image/ktx2");
                    return;
                }
                await resizeTextureIfNecessary(texture);
                successFullyProcessed = await context.toktxContext.process(index, texture, compressionSettings);
                break;
        }
    }
    else {
        if (cached) {
            texture.setImage(cached);
            return;
        }
        resizeTextureIfNecessary(texture);
        successFullyProcessed = true;
    }
    if (context.useCache && successFullyProcessed && key) {
        const data = texture.getImage();
        if (data)
            (0, cache_1.addToCache)(key, data);
    }
}
