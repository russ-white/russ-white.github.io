// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Transform } from './transform';


export class SyncedTransformModel {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SyncedTransformModel {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSyncedTransformModel(bb:flatbuffers.ByteBuffer, obj?:SyncedTransformModel):SyncedTransformModel {
  return (obj || new SyncedTransformModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSyncedTransformModel(bb:flatbuffers.ByteBuffer, obj?:SyncedTransformModel):SyncedTransformModel {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SyncedTransformModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * the guid of the object that this transform info belongs to
 */
guid():string|null
guid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
guid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * if the transform interpolation should be fast, this is true when the send interval is low and we want to have snappy transforms
 */
fast():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

transform(obj?:Transform):Transform|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Transform()).__init(this.bb_pos + offset, this.bb!) : null;
}

/**
 * if the server should not save this info
 */
dontSave():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSyncedTransformModel(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addGuid(builder:flatbuffers.Builder, guidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, guidOffset, 0);
}

static addFast(builder:flatbuffers.Builder, fast:boolean) {
  builder.addFieldInt8(1, +fast, +false);
}

static addTransform(builder:flatbuffers.Builder, transformOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, transformOffset, 0);
}

static addDontSave(builder:flatbuffers.Builder, dontSave:boolean) {
  builder.addFieldInt8(3, +dontSave, +false);
}

static endSyncedTransformModel(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSyncedTransformModelBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSyncedTransformModelBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
