import { Behaviour } from "./Component";
import { WebXR } from "./WebXR";
import { XRFlag } from "./XRFlag";
import { Context } from "../engine/engine_setup";
import { Object3D } from "three";
import { VRUserState } from "./WebXRSync";
export declare const debug: string | boolean;
export type AvatarMarkerEventArgs = {
    avatarMarker: AvatarMarker;
    gameObject: Object3D;
};
export declare class AvatarMarker extends Behaviour {
    static getAvatar(index: number): AvatarMarker | null;
    static instances: AvatarMarker[];
    static onAvatarMarkerCreated(cb: (args: AvatarMarkerEventArgs) => void): Function;
    static onAvatarMarkerDestroyed(cb: (args: AvatarMarkerEventArgs) => void): Function;
    private static _onNewAvatarMarkerAdded;
    private static _onAvatarMarkerDestroyed;
    connectionId: string;
    avatar?: WebXRAvatar | Object3D;
    awake(): void;
    onDestroy(): void;
    isLocalAvatar(): boolean;
    setVisible(visible: boolean): void;
}
export declare class WebXRAvatar {
    private static loader;
    private _isVisible;
    setVisible(visible: boolean): void;
    get isWebXRAvatar(): boolean;
    /** the user id */
    guid: string;
    private root;
    head: Object3D | null;
    handLeft: Object3D | null;
    handRight: Object3D | null;
    lastUpdate: number;
    isLocalAvatar: boolean;
    flags: XRFlag[] | null;
    private headScale;
    private handLeftScale;
    private handRightScale;
    private readonly webxr;
    private lastAvatarId;
    private hasAvatarOverride;
    private context;
    private avatarMarker;
    constructor(context: Context, guid: string, webXR: WebXR);
    updateFlags(): void;
    setAvatarOverride(avatarId: string | null): Promise<boolean | null>;
    private _headTarget;
    private _handLeftTarget;
    private _handRightTarget;
    private _canInterpolate;
    private static invertRotation;
    tryUpdate(state: VRUserState, _timeDiff: number): void;
    update(): void;
    destroy(): void;
    private updateVisibility;
    private setupCustomAvatar;
}
