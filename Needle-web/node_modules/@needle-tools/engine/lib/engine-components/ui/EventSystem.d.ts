import { Behaviour } from "../Component";
import { Context } from "../../engine/engine_setup";
import { Raycaster } from "./Raycaster";
export declare class EventSystem extends Behaviour {
    private static _eventSystemMap;
    static didSearchEventSystem: boolean;
    static createIfNoneExists(context: Context): void;
    static get systems(): EventSystem[];
    static ensureUpdateMeshUI(instance: any, context: Context): void;
    static markUIDirty(_context: Context): void;
    static get instance(): EventSystem | null;
    private orbitControl;
    private orbitControlWasEnabled;
    private raycaster;
    constructor();
    onDestroy(): void;
    start(): void;
    register(rc: Raycaster): void;
    unregister(rc: Raycaster): void;
    private _selectStartFn?;
    private _selectEndFn?;
    private _selectUpdateFn?;
    onEnable(): void;
    onDisable(): void;
    onPointerDown(): void;
    private lastPointerEvent;
    private objectsHoveredThisFrame;
    private objectsHoveredLastFrame;
    private raisedPointerDownEvents;
    private raisedPointerDownObjects;
    private _didMove;
    onBeforeUpdate(): void;
    private _tempComponentsArray;
    onBeforeRender(): void;
    private _sortedHits;
    private performRaycast;
    private handleIntersections;
    private _sortingBuffer;
    private _noDepthTestingResults;
    private sortCandidates;
    private handleEventsArray;
    private out;
    private handleEvents;
    private handleMeshUiObjectWithoutShadowDom;
    private currentActiveMeshUIComponents;
    private handleMeshUIIntersection;
    private resetMeshUIStates;
    private testIsVisible;
}
