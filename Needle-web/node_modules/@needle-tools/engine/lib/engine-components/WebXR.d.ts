/// <reference types="webxr" />
import { Object3D, Quaternion } from 'three';
import { AssetReference } from "../engine/engine_addressables";
import { Behaviour } from "./Component";
import { WebXRController } from "./WebXRController";
export declare function detectARSupport(): Promise<boolean>;
export declare function detectVRSupport(): Promise<boolean>;
export declare enum WebXREvent {
    XRStarted = "xrStarted",
    XRStopped = "xrStopped",
    XRUpdate = "xrUpdate",
    RequestVRSession = "requestVRSession"
}
export declare type CreateButtonOptions = {
    registerClick: boolean;
};
export declare class WebXR extends Behaviour {
    enableVR: boolean;
    enableAR: boolean;
    defaultAvatar?: AssetReference;
    handModelPath: string;
    createVRButton: boolean;
    createARButton: boolean;
    private static _isInXr;
    private static events;
    static get IsInWebXR(): boolean;
    static get XRSupported(): boolean;
    static get IsARSupported(): boolean;
    static get IsVRSupported(): boolean;
    static addEventListener(type: string, listener: any): any;
    static removeEventListener(type: string, listener: any): any;
    static createVRButton(webXR: WebXR, opts?: CreateButtonOptions): HTMLButtonElement;
    static createARButton(webXR: WebXR, opts?: CreateButtonOptions): HTMLButtonElement;
    static resetButtonStyles(button: any): void;
    endSession(): void;
    get Rig(): Object3D;
    private controllers;
    get Controllers(): WebXRController[];
    get LeftController(): WebXRController | null;
    get RightController(): WebXRController | null;
    get ARButton(): HTMLButtonElement | undefined;
    get VRButton(): HTMLButtonElement | undefined;
    get IsInVR(): boolean;
    get IsInAR(): boolean;
    private rig;
    private isInit;
    private _requestedAR;
    private _requestedVR;
    private _isInAR;
    private _isInVR;
    private _arButton?;
    private _vrButton?;
    private webAR;
    awake(): void;
    onEnable(): void;
    private _transformOrientation;
    get TransformOrientation(): Quaternion;
    private _currentHeadPose;
    get HeadPose(): XRViewerPose | null;
    onBeforeRender(frame: any): void;
    private onClickedARButton;
    private onClickedVRButton;
    private captureStateBeforeXR;
    private ensureRig;
    private _originalCameraParent;
    private _originalCameraPosition;
    private _originalCameraRotation;
    private _originalXRRigParent;
    private _originalXRRigPosition;
    private _originalXRRigRotation;
    private onEnterXR;
    private onExitXR;
    private onEnterVR;
    private destroyControllers;
    private xrMirrorWindow;
    private onEnterXR_HandleMirrorWindow;
}
export declare class WebAR {
    get webxr(): WebXR;
    private _webxr;
    private reticle;
    private reticleParent;
    private hitTestSource;
    private reticleActive;
    private previousBackground;
    private previousEnvironment;
    private sessionRoot;
    private _previousParent;
    private static tempWebXRObject;
    private get context();
    constructor(webxr: WebXR);
    private arDomOverlay;
    private arOverlayElement;
    private noHitTestAvailable;
    private didPlaceARSessionRoot;
    getAROverlayContainer(): HTMLElement | null;
    setReticleActive(active: boolean): void;
    onBegin(session: XRSession): Promise<void>;
    onEnd(session: XRSession): void;
    onUpdate(session: XRSession, frame: XRFrame): void;
}
