import { Behaviour } from "./Component";
import * as THREE from 'three';
import { AnimationActionLoopStyles } from "three";
import { AnimatorControllerModel } from "../engine/extensions/NEEDLE_animator_controller_model";
import { AnimatorController } from "./AnimatorController";
export declare class MixerEvent {
    type: string;
    action: THREE.AnimationAction;
    loopDelta: number;
    target: THREE.AnimationMixer;
}
export declare class PlayOptions {
    loop?: boolean | AnimationActionLoopStyles;
    clampWhenFinished?: boolean;
}
export declare class Animator extends Behaviour {
    applyRootMotion: boolean;
    hasRootMotion: boolean;
    keepAnimatorControllerStateOnDisable: boolean;
    set runtimeAnimatorController(val: AnimatorControllerModel | AnimatorController | undefined | null);
    get runtimeAnimatorController(): AnimatorController | undefined | null;
    Play(name: string | number, layer?: number, normalizedTime?: number, transitionDurationInSec?: number): void;
    Reset(): void;
    SetBool(name: string | number, value: boolean): void;
    GetBool(name: string | number): boolean;
    SetFloat(name: string | number, val: number): void;
    GetFloat(name: string | number): number;
    SetInteger(name: string | number, val: number): void;
    GetInteger(name: string | number): number;
    SetTrigger(name: string | number): void;
    ResetTrigger(name: string | number): void;
    IsInTransition(): boolean;
    SetSpeed(speed: number): void;
    set minMaxSpeed(minMax: {
        x: number;
        y: number;
    });
    set minMaxOffsetNormalized(minMax: {
        x: number;
        y: number;
    });
    private speed;
    private normalizedStartOffset;
    private _animatorController?;
    awake(): void;
    onDisable(): void;
    onBeforeRender(): void;
}
