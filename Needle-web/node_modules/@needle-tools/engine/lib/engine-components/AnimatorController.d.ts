import { Animator } from "./Animator";
import { AnimatorControllerModel, State } from "../engine/extensions/NEEDLE_animator_controller_model";
import { AnimationAction } from "three";
import { Context } from "../engine/engine_setup";
export declare class AnimatorController {
    Play(name: string | number, layerIndex?: number, normalizedTime?: number, durationInSec?: number): void;
    Reset(): void;
    SetBool(name: string | number, value: boolean): void;
    GetBool(name: string | number): boolean;
    SetFloat(name: string | number, val: number): void;
    GetFloat(name: string | number): number;
    SetInteger(name: string | number, val: number): void;
    GetInteger(name: string | number): number;
    SetTrigger(name: string | number): void;
    ResetTrigger(name: string | number): void;
    IsInTransition(): boolean;
    SetSpeed(speed: number): void;
    FindState(name: string | undefined | null): State | null;
    normalizedStartOffset: number;
    private _speed;
    animator?: Animator;
    model: AnimatorControllerModel;
    get context(): Context | undefined | null;
    bind(animator: Animator): void;
    clone(): AnimatorController;
    update(): void;
    private _mixer;
    private _activeState?;
    constructor(model: AnimatorControllerModel);
    private _activeStates;
    private updateActiveStates;
    private setStartTransition;
    private evaluateTransitions;
    private getState;
    private transitionTo;
    private createAction;
    private evaluateCondition;
    private createActions;
    enumerateActions(): Generator<AnimationAction, void, unknown>;
    private rootMotionHandler?;
}
