import * as THREE from "three";
import { Mathf } from "../engine/engine_math";
import * as threeutils from "../engine/engine_three_utils";
import { activeInHierarchyFieldName } from "../engine/engine_constants";
import { Context, FrameEvent } from "../engine/engine_setup";
import * as main from "../engine/engine_mainloop_utils";
import { syncDestroy, syncInstantiate } from "../engine/engine_networking_instantiate";
import { addNewComponent, destroyComponentInstance, findObjectOfType, findObjectsOfType, getComponent, getComponentInChildren, getComponentInParent, getComponents, getComponentsInChildren, getComponentsInParent, getOrAddComponent, moveComponentInstance, removeComponent } from "../engine/engine_components";
import { findByGuid, destroy, instantiate, foreachComponent, markAsInstancedRendered, isActiveInHierarchy, isActiveSelf, isUsingInstancing, setActive } from "../engine/engine_gameobject";
// export interface ISerializationCallbackReceiver {
//     onBeforeSerialize?(): object | void;
//     onAfterSerialize?();
//     onBeforeDeserialize?(data?: any);
//     onAfterDeserialize?();
//     onDeserialize?(key: string, value: any): any | void;
// }
class GameObject extends THREE.Object3D {
    guid;
    static setActive(go, active, processStart = true, setVisible = true) {
        if (!go)
            return;
        setActive(go, active, setVisible);
        main.updateIsActive(go);
        if (active && processStart)
            main.processStart(Context.Current, go);
    }
    static isActiveSelf(go) {
        return isActiveSelf(go);
    }
    static isActiveInHierarchy(go) {
        return isActiveInHierarchy(go);
    }
    static markAsInstancedRendered(go, instanced) {
        markAsInstancedRendered(go, instanced);
    }
    static isUsingInstancing(instance) { return isUsingInstancing(instance); }
    static foreachComponent(instance, cb, recursive = true) {
        return foreachComponent(instance, cb, recursive);
    }
    static instantiateSynced(instance, opts) {
        if (!instance)
            return null;
        return syncInstantiate(instance, opts);
    }
    static instantiate(instance, opts = null) {
        return instantiate(instance, opts);
    }
    static destroySynced(instance, context, recursive = true) {
        if (!instance)
            return;
        const go = instance;
        context = context ?? Context.Current;
        syncDestroy(go, context.connection, recursive);
    }
    static destroy(instance, recursive = true, isRoot = true) {
        return destroy(instance, recursive, isRoot);
    }
    /**
     * Add an object to parent and also ensure all components are being registered
     */
    static add(instance, parent, context) {
        if (!instance || !parent)
            return;
        if (instance === parent) {
            console.warn("Can not add object to self", instance);
            return;
        }
        if (!context) {
            context = Context.Current;
        }
        parent.add(instance);
        setActive(instance, true);
        main.updateIsActive(instance);
        if (context) {
            GameObject.foreachComponent(instance, (comp) => {
                main.addScriptToArrays(comp, context);
                if (comp.__internalDidAwakeAndStart)
                    return;
                if (context.new_script_start.includes(comp) === false) {
                    context.new_script_start.push(comp);
                }
            }, true);
        }
        else {
            console.warn("Missing context");
        }
    }
    /**
     * Removes the object from its parent and deactivates all of its components
     */
    static remove(instance) {
        if (!instance)
            return;
        instance.parent?.remove(instance);
        setActive(instance, false);
        main.updateIsActive(instance);
        GameObject.foreachComponent(instance, (comp) => {
            main.processRemoveFromScene(comp);
        }, true);
    }
    static invokeOnChildren(go, functionName, ...args) {
        this.invoke(go, functionName, true, args);
    }
    static invoke(go, functionName, children = false, ...args) {
        if (!go)
            return;
        // console.log(go);
        this.foreachComponent(go, c => {
            const fn = c[functionName];
            if (fn && typeof fn === "function") {
                const bound = fn.bind(c);
                // console.log(c, bound)
                bound(...args);
            }
        }, children);
    }
    static addNewComponent(go, type, callAwake = true) {
        const instance = new type();
        //@ts-ignore
        addNewComponent(go, instance, callAwake);
        return instance;
    }
    static addComponent(go, instance) {
        if (instance.gameObject == null) {
            throw new Error("Did you mean to create a new component? Use addNewComponent");
        }
        moveComponentInstance(go, instance);
    }
    static removeComponent(instance) {
        removeComponent(instance.gameObject, instance);
        return instance;
    }
    static getOrAddComponent(go, typeName) {
        return getOrAddComponent(go, typeName);
    }
    static getComponent(go, typeName) {
        if (go === null)
            return null;
        // if names are minified we could also use the type store and work with strings everywhere
        // not ideal, but I dont know a good/sane way to do this otherwise
        // const res = TypeStore.get(typeName);
        // if(res) typeName = res;
        return getComponent(go, typeName);
    }
    static getComponents(go, typeName, arr = null) {
        if (go === null)
            return arr ?? [];
        return getComponents(go, typeName, arr);
    }
    static findByGuid(guid, hierarchy) {
        const res = findByGuid(guid, hierarchy);
        return res;
    }
    static findObjectOfType(typeName, context, includeInactive = true) {
        return findObjectOfType(typeName, context ?? Context.Current, includeInactive);
    }
    static findObjectsOfType(typeName, context) {
        const arr = [];
        findObjectsOfType(typeName, arr, context);
        return arr;
    }
    static getComponentInChildren(go, typeName) {
        return getComponentInChildren(go, typeName);
    }
    static getComponentsInChildren(go, typeName, arr = null) {
        return getComponentsInChildren(go, typeName, arr ?? undefined);
    }
    static getComponentInParent(go, typeName) {
        return getComponentInParent(go, typeName);
    }
    static getComponentsInParent(go, typeName, arr = null) {
        return getComponentsInParent(go, typeName, arr);
    }
    static getAllComponents(go) {
        const componentsList = go.userData?.components;
        const newList = [...componentsList];
        return newList;
    }
    static *iterateComponents(go) {
        const list = go?.userData?.components;
        if (list && Array.isArray(list)) {
            for (let i = 0; i < list.length; i++) {
                yield list[i];
            }
        }
    }
}
class Component {
    get isComponent() { return true; }
    __context;
    get context() {
        return this.__context ?? Context.Current;
    }
    set context(context) {
        this.__context = context;
    }
    get scene() { return this.context.scene; }
    get layer() {
        return this.gameObject?.userData?.layer;
    }
    get name() {
        return this.gameObject?.userData.name;
    }
    __name;
    set name(str) {
        if (this.gameObject) {
            if (!this.gameObject.userData)
                this.gameObject.userData = {};
            this.gameObject.userData.name = str;
            this.__name = str;
        }
        else {
            this.__name = str;
        }
    }
    get tag() {
        return this.gameObject?.userData.tag;
    }
    set tag(str) {
        if (this.gameObject)
            this.gameObject.userData.tag = str;
    }
    get static() {
        return this.gameObject?.userData.static;
    }
    get hideFlags() {
        return this.gameObject?.userData.hideFlags;
    }
    get activeAndEnabled() {
        if (this.destroyed)
            return false;
        if (this.__isEnabled === false)
            return false;
        if (!this.__isActiveInHierarchy)
            return false;
        // let go = this.gameObject;
        // do {
        //     // console.log(go.name, go.visible)
        //     if (!go.visible) return false;
        //     go = go.parent as GameObject;
        // }
        // while (go);
        return true;
    }
    get __isActive() {
        return this.gameObject.visible;
    }
    get __isActiveInHierarchy() {
        if (!this.gameObject)
            return false;
        const res = this.gameObject[activeInHierarchyFieldName];
        if (res === undefined)
            return true;
        return res;
    }
    set __isActiveInHierarchy(val) {
        if (!this.gameObject)
            return;
        this.gameObject[activeInHierarchyFieldName] = val;
    }
    gameObject;
    guid = "invalid";
    sourceId;
    /** called once when the component becomes active for the first time */
    awake() { }
    /** called every time when the component gets enabled (this is invoked after awake and before start) */
    onEnable() { }
    onDisable() { }
    onDestroy() {
        this.__destroyed = true;
    }
    startCoroutine(routine, evt = FrameEvent.Update) {
        return this.context.registerCoroutineUpdate(this, routine, evt);
    }
    stopCoroutine(routine, evt = FrameEvent.Update) {
        this.context.unregisterCoroutineUpdate(routine, evt);
    }
    get destroyed() {
        return this.__destroyed;
    }
    destroy() {
        if (this.__destroyed)
            return;
        this.__internalDestroy();
    }
    /** @internal */
    __didAwake = false;
    /** @internal */
    __didStart = false;
    /** @internal */
    __didEnable = false;
    /** @internal */
    __isEnabled = undefined;
    /** @internal */
    __destroyed = false;
    /** @internal */
    get __internalDidAwakeAndStart() { return this.__didAwake && this.__didStart; }
    /** @internal */
    constructor() {
        // super();
        this.__internalNewInstanceCreated();
    }
    /** @internal */
    __internalNewInstanceCreated() {
        this.__didAwake = false;
        this.__didStart = false;
        this.__didEnable = false;
        this.__isEnabled = undefined;
        this.__destroyed = false;
        // this.__internalResetsCachedPhysicsData();
    }
    /** @internal */
    __internalAwake() {
        if (this.__didAwake)
            return;
        // console.log("__internalAwake");
        this.__didAwake = true;
        // this.gameObject.test();
        this.awake();
    }
    /** @internal */
    __internalStart() {
        if (this.__didStart)
            return;
        this.__didStart = true;
        if (this.start)
            this.start();
    }
    /** @internal */
    __internalEnable() {
        if (this.__didEnable)
            return false;
        // console.trace("INTERNAL ENABLE");
        this.__didEnable = true;
        this.onEnable();
        // if we do this after processing the callback
        this.__isEnabled = true;
        return true;
    }
    /** @internal */
    __internalDisable() {
        if (!this.__didEnable)
            return;
        this.__didEnable = false;
        // this._collisionExitRoutine = undefined;
        this.onDisable();
        // this._collisions?.clear();
        // if we do this after processing the callback
        this.__isEnabled = false;
    }
    /** @internal */
    __internalDestroy() {
        if (this.__destroyed)
            return;
        this.__destroyed = true;
        this.destroy?.call(this);
        // console.log("destroy", this);
        destroyComponentInstance(this);
    }
    // isActiveAndEnabled: boolean = false;
    get enabled() {
        return this.__isEnabled ?? true; // if it has no enabled field it is always enabled
    }
    set enabled(val) {
        // when called from animationclip we receive numbers
        // due to interpolation they can be anything between 0 and 1
        if (typeof val === "number") {
            if (val >= 0.5)
                val = true;
            else
                val = false;
        }
        // need to check here because codegen is calling this before everything is setup
        if (!this.__didAwake) {
            this.__isEnabled = val;
            return;
        }
        if (val) {
            this.__internalEnable();
        }
        else {
            this.__internalDisable();
        }
    }
    // TODO move this to threeutils
    // we need a copy for modifying the values to local space
    static _worldPositionBuffer = new THREE.Vector3();
    static _worldQuaternionBuffer = new THREE.Quaternion();
    static _worldEulerBuffer = new THREE.Euler();
    _worldPosition = undefined;
    _worldQuaternion = undefined;
    static _tempQuaternionBuffer2 = new THREE.Quaternion();
    _worldEuler = undefined;
    _worldRotation = undefined;
    get worldPosition() {
        if (!this._worldPosition)
            this._worldPosition = new THREE.Vector3();
        threeutils.getWorldPosition(this.gameObject, this._worldPosition);
        // this.gameObject.getWorldPosition(this._worldPosition);
        return this._worldPosition;
    }
    set worldPosition(val) {
        threeutils.setWorldPosition(this.gameObject, val);
    }
    setWorldPosition(x, y, z) {
        Component._worldPositionBuffer.set(x, y, z);
        this.worldPosition = Component._worldPositionBuffer;
    }
    get worldQuaternion() {
        if (!this._worldQuaternion)
            this._worldQuaternion = new THREE.Quaternion();
        return threeutils.getWorldQuaternion(this.gameObject, this._worldQuaternion);
    }
    set worldQuaternion(val) {
        threeutils.setWorldQuaternion(this.gameObject, val);
    }
    setWorldQuaternion(x, y, z, w) {
        Component._worldQuaternionBuffer.set(x, y, z, w);
        this.worldQuaternion = Component._worldQuaternionBuffer;
    }
    // world euler (in radians)
    get worldEuler() {
        if (!this._worldEuler)
            this._worldEuler = new THREE.Euler();
        this._worldEuler.setFromQuaternion(this.worldQuaternion);
        return this._worldEuler;
    }
    // world euler (in radians)
    set worldEuler(val) {
        if (!this._worldQuaternion)
            this._worldQuaternion = new THREE.Quaternion();
        this._worldQuaternion?.setFromEuler(val);
        this.worldQuaternion = this._worldQuaternion;
    }
    // returns rotation in degrees
    get worldRotation() {
        const rot = this.worldEuler;
        if (!this._worldRotation)
            this._worldRotation = new THREE.Vector3();
        const wr = this._worldRotation;
        wr.set(rot.x, rot.y, rot.z);
        wr.x = Mathf.toDegrees(wr.x);
        wr.y = Mathf.toDegrees(wr.y);
        wr.z = Mathf.toDegrees(wr.z);
        return wr;
    }
    set worldRotation(val) {
        this.setWorldRotation(val.x, val.y, val.z, true);
    }
    setWorldRotation(x, y, z, degrees = true) {
        if (degrees) {
            x = Mathf.toRadians(x);
            y = Mathf.toRadians(y);
            z = Mathf.toRadians(z);
        }
        Component._worldEulerBuffer.set(x, y, z);
        Component._worldQuaternionBuffer.setFromEuler(Component._worldEulerBuffer);
        this.worldQuaternion = Component._worldQuaternionBuffer;
    }
    static _forward = new THREE.Vector3();
    get forward() {
        return Component._forward.set(0, 0, -1).applyQuaternion(this.worldQuaternion);
    }
    // EventTarget implementation:
    _eventListeners = new Map();
    addEventListener(type, listener) {
        this._eventListeners[type] = this._eventListeners[type] || [];
        this._eventListeners[type].push(listener);
    }
    removeEventListener(type, listener) {
        if (!this._eventListeners[type])
            return;
        const index = this._eventListeners[type].indexOf(listener);
        if (index >= 0)
            this._eventListeners[type].splice(index, 1);
    }
    dispatchEvent(evt) {
        if (!this._eventListeners[evt.type])
            return false;
        const listeners = this._eventListeners[evt.type];
        for (let i = 0; i < listeners.length; i++) {
            listeners[i](evt);
        }
        return false;
    }
}
class Behaviour extends Component {
}
export { Behaviour, Component, GameObject };
//# sourceMappingURL=Component.js.map