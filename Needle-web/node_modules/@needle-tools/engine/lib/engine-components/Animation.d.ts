import { Behaviour } from "./Component";
import * as THREE from 'three';
import { AnimationAction, AnimationClip } from "three";
import { Vec2 } from "../engine/engine_types";
export declare class PlayOptions {
    fadeDuration?: number;
    loop?: boolean;
    exclusive?: boolean;
    startTime?: number;
    endTime?: number;
    clampWhenFinished?: boolean;
    minMaxSpeed?: Vec2;
    minMaxOffsetNormalized?: Vec2;
}
export declare class Animation extends Behaviour {
    playAutomatically: boolean;
    randomStartTime: boolean;
    minMaxSpeed?: Vec2;
    minMaxOffsetNormalized?: Vec2;
    loop: boolean;
    clampWhenFinished: boolean;
    private _tempAnimationClipBeforeGameObjectExisted;
    get clip(): AnimationClip | null;
    set clip(val: AnimationClip | null);
    set clips(animations: AnimationClip[]);
    set animations(animations: THREE.AnimationClip[]);
    get animations(): AnimationClip[];
    /**
     * @deprecated Currently unsupported
     */
    get currentAction(): THREE.AnimationAction | null;
    /**
     * @deprecated Currently unsupported
     */
    get currentActions(): THREE.AnimationAction[];
    private mixer;
    get actions(): Array<THREE.AnimationAction>;
    set actions(val: Array<THREE.AnimationAction>);
    private _actions;
    private _currentActions;
    private _handles;
    awake(): void;
    onEnable(): void;
    start(): void;
    update(): void;
    getAction(name: string): THREE.AnimationAction | undefined | null;
    get isPlaying(): boolean;
    play(clipOrNumber: AnimationClip | number | string | undefined, options?: PlayOptions): Promise<AnimationAction> | void;
    internalOnPlay(action: AnimationAction, options?: PlayOptions): Promise<AnimationAction>;
    private tryFindHandle;
    private _didInit;
    init(): void;
}
