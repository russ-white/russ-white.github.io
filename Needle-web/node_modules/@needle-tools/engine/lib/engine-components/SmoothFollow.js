var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Behaviour } from "./Component";
import * as THREE from "three";
import { Mathf } from "../engine/engine_math";
import { serializable } from "../engine/engine_serialization_decorator";
import { Object3D } from "three";
import { getWorldPosition, getWorldQuaternion } from "../engine/engine_three_utils";
import { Axes } from "../engine/engine_physics.types";
export class SmoothFollow extends Behaviour {
    target = null;
    followFactor = .1;
    rotateFactor = .1;
    positionAxes = Axes.All;
    // @serializable()
    // rotationAxes : Axes = Axes.All;
    flipForward = false;
    static _invertForward = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);
    _firstUpdate = true;
    onBeforeRender() {
        this.updateNow(false);
    }
    updateNow(hard) {
        if (!this.target || this.target === this.gameObject)
            return;
        if (this.followFactor > 0) {
            const wp = getWorldPosition(this.target);
            const fpos = this._firstUpdate || hard ? 1 : Mathf.clamp01(this.context.time.deltaTime * this.followFactor);
            const currentPosition = this.worldPosition;
            if (this.positionAxes & Axes.X)
                currentPosition.x = Mathf.lerp(currentPosition.x, wp.x, fpos);
            if (this.positionAxes & Axes.Y)
                currentPosition.y = Mathf.lerp(currentPosition.y, wp.y, fpos);
            if (this.positionAxes & Axes.Z)
                currentPosition.z = Mathf.lerp(currentPosition.z, wp.z, fpos);
            this.worldPosition = currentPosition;
        }
        if (this.rotateFactor > 0) {
            const wr = getWorldQuaternion(this.target);
            if (this.flipForward) {
                wr.premultiply(SmoothFollow._invertForward);
            }
            const frot = this._firstUpdate || hard ? 1 : Mathf.clamp01(this.context.time.deltaTime * this.rotateFactor);
            this.worldQuaternion = this.worldQuaternion.slerp(wr, frot);
        }
        this._firstUpdate = false;
    }
}
__decorate([
    serializable(Object3D)
], SmoothFollow.prototype, "target", void 0);
__decorate([
    serializable()
], SmoothFollow.prototype, "followFactor", void 0);
__decorate([
    serializable()
], SmoothFollow.prototype, "rotateFactor", void 0);
__decorate([
    serializable()
], SmoothFollow.prototype, "positionAxes", void 0);
//# sourceMappingURL=SmoothFollow.js.map