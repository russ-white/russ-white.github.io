var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Behaviour } from "./Component";
import { serializable } from "../engine/engine_serialization_decorator";
import * as params from "../engine/engine_default_parameters";
import { Color, GridHelper as _GridHelper } from "three";
export class GridHelper extends Behaviour {
    isGizmo = false;
    color0;
    color1;
    gridHelper;
    size;
    divisions;
    offset;
    onEnable() {
        if (this.isGizmo && !params.showGizmos)
            return;
        const size = this.size;
        const divisions = this.divisions;
        if (!this.gridHelper) {
            this.gridHelper = new _GridHelper(size, divisions, this.color0 ?? new Color(.4, .4, .4), this.color1 ?? new Color(.6, .6, .6));
            if (this.offset !== undefined)
                this.gridHelper.position.y += this.offset;
            this.gameObject.add(this.gridHelper);
        }
    }
}
__decorate([
    serializable()
], GridHelper.prototype, "isGizmo", void 0);
__decorate([
    serializable(Color)
], GridHelper.prototype, "color0", void 0);
__decorate([
    serializable(Color)
], GridHelper.prototype, "color1", void 0);
//# sourceMappingURL=GridHelper.js.map