import { Object3D } from "three";
import { USDZObject } from "three/examples/jsm/exporters/USDZExporter";
import { IUSDZExporterExtension } from "../Extension";
export interface UsdzAnimation {
    createAnimation(ext: AnimationExtension, model: USDZObject, context: any): any;
}
export type AnimationClipCollection = Array<{
    root: Object3D;
    clips: Array<THREE.AnimationClip>;
}>;
export declare class RegisteredAnimationInfo {
    get start(): number;
    get duration(): number;
    private ext;
    private root;
    private clip;
    constructor(ext: AnimationExtension, root: THREE.Object3D, clip: THREE.AnimationClip);
}
export declare class TransformData {
    clip: THREE.AnimationClip;
    pos?: THREE.KeyframeTrack;
    rot?: THREE.KeyframeTrack;
    scale?: THREE.KeyframeTrack;
    get frameRate(): number;
    private ext;
    private root;
    private target;
    constructor(ext: AnimationExtension, root: Object3D, target: Object3D, clip: THREE.AnimationClip);
    addTrack(track: any): void;
    getFrames(): number;
    getDuration(): number;
    getStartTime(arr: TransformData[]): number;
}
export declare class AnimationExtension implements IUSDZExporterExtension {
    get extensionName(): string;
    private dict;
    private rootTargetMap;
    getStartTime01(root: Object3D, clip: THREE.AnimationClip): number;
    registerAnimation(root: Object3D, clip: THREE.AnimationClip): RegisteredAnimationInfo | null;
    onAfterHierarchy(_context: any): void;
    private serializers;
    onAfterBuildDocument(_context: any): void;
    onExportObject(object: any, model: USDZObject, _context: any): void;
}
