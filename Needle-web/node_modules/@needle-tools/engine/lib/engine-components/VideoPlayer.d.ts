import { Behaviour } from "./Component";
import * as THREE from "three";
export declare enum AspectMode {
    None = 0,
    AdjustHeight = 1,
    AdjustWidth = 2
}
export declare enum VideoSource {
    VideoClip = 0,
    Url = 1
}
export declare enum VideoAudioOutputMode {
    None = 0,
    AudioSource = 1,
    Direct = 2,
    APIOnly = 3
}
export declare enum VideoRenderMode {
    CameraFarPlane = 0,
    CameraNearPlane = 1,
    RenderTexture = 2,
    MaterialOverride = 3
}
export declare class VideoPlayer extends Behaviour {
    renderer: THREE.Object3D | null;
    playOnAwake: boolean;
    playOnEnable?: boolean;
    aspectMode: AspectMode;
    private renderMode?;
    private targetMaterialProperty?;
    private targetMaterialRenderer?;
    private targetTexture?;
    private time;
    private _playbackSpeed;
    get playbackSpeed(): number;
    set playbackSpeed(val: number);
    private _isLooping;
    get isLooping(): boolean;
    set isLooping(val: boolean);
    get currentTime(): number;
    set currentTime(val: number);
    get isPlaying(): boolean;
    get crossOrigin(): string | null;
    set crossOrigin(val: string | null);
    get videoTexture(): THREE.VideoTexture | null;
    private _crossOrigin;
    private audioOutputMode;
    private source;
    private clip?;
    private url?;
    private videoElement;
    private _videoTexture;
    private videoMaterial;
    private _isPlaying;
    private wasPlaying;
    setVideo(video: MediaStream): void;
    setClipURL(url: string): void;
    awake(): void;
    onEnable(): void;
    onDisable(): void;
    onDestroy(): void;
    private _receivedInput;
    constructor();
    play(): void;
    stop(): void;
    pause(): void;
    create(playAutomatically: boolean): void;
    updateAspect(): void;
    private _overlay;
    get screenspace(): boolean;
    set screenspace(val: boolean);
    private _targetObjects;
    private createVideoElement;
    private handleBeginPlaying;
    private updateVideoElementSettings;
    private updateVideoElementStyles;
    private _updateAspectRoutineId;
    private updateAspectImpl;
}
