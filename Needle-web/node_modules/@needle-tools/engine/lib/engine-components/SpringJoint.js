"use strict";
// import { Behaviour, GameObject } from "./Component";
// import { Rigidbody } from "./RigidBody";
// import * as CANNON from 'cannon-es'
// import { Vector3 } from "three";
// export class SpringJoint extends Behaviour {
//     anchor: Vector3 | null = null;
//     connectedBody: Rigidbody | null = null;
//     connectedAnchor: Vector3 | null = null;
//     spring: number = 10;
//     damper: number = .2;
//     private rb  : Rigidbody | null = null;
//     awake(): void {
//         this.rb = GameObject.getComponent(this.gameObject, Rigidbody);
//         if(!this.connectedBody || !this.connectedBody.body || !this.rb || !this.rb.body) return;
//         this.connectedBody.body.mass = Math.min(this.rb.body.mass*.99, this.connectedBody.body.mass);
//         const spring = new CANNON.Spring(this.rb.body, this.connectedBody.body, {
//             // localAnchorA: new CANNON.Vec3(-1, 1, 0),
//             // localAnchorB: new CANNON.Vec3(0, 0, 0),
//             // restLength: -.1,
//             // stiffness: 10,
//             // damping: .2,
//             restLength: 0.01,
//             stiffness: this.spring*.5,
//             damping: this.damper,
//             // localAnchorA: new CANNON.Vec3(this.anchor.x, this.anchor.y, this.anchor.z),
//             // localAnchorB: new CANNON.Vec3(
//             //     this.connectedAnchor.x,
//             //     this.connectedAnchor.y,
//             //     this.connectedAnchor.z
//             // ),
//         });
//         this.context.physics.addPostStepListener(_ => {
//             // const wp = this.connectedBody.worldPosition;
//             // console.log(wp.y, this.connectedBody.body.position.y, this.rb.body.position.y);
//             spring.applyForce();
//         });
//     }
//     update(): void {
//         // console.log(this.worldPosition.y)
//     }
// }
//# sourceMappingURL=SpringJoint.js.map