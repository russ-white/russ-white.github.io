var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Mathf } from "../engine/engine_math";
import { serializable } from "../engine/engine_serialization_decorator";
class Keyframe {
    time;
    value;
    inTangent;
    inWeight;
    outTangent;
    outWeight;
    weightedMode;
}
__decorate([
    serializable()
], Keyframe.prototype, "time", void 0);
__decorate([
    serializable()
], Keyframe.prototype, "value", void 0);
__decorate([
    serializable()
], Keyframe.prototype, "inTangent", void 0);
__decorate([
    serializable()
], Keyframe.prototype, "inWeight", void 0);
__decorate([
    serializable()
], Keyframe.prototype, "outTangent", void 0);
__decorate([
    serializable()
], Keyframe.prototype, "outWeight", void 0);
__decorate([
    serializable()
], Keyframe.prototype, "weightedMode", void 0);
export class AnimationCurve {
    keys;
    get duration() {
        if (!this.keys || this.keys.length == 0)
            return 0;
        return this.keys[this.keys.length - 1].time;
    }
    evaluate(time) {
        if (!this.keys || this.keys.length == 0)
            return 0;
        // if the first keyframe time is already greater than the time we want to evaluate
        // then we dont need to iterate
        if (this.keys[0].time >= time) {
            return this.keys[0].value;
        }
        for (let i = 0; i < this.keys.length; i++) {
            const kf = this.keys[i];
            if (kf.time <= time) {
                const hasNextKeyframe = i + 1 < this.keys.length;
                if (hasNextKeyframe) {
                    const nextKf = this.keys[i + 1];
                    // if the next
                    if (nextKf.time < time)
                        continue;
                    const t = Mathf.remap(time, kf.time, nextKf.time, 0, 1);
                    return Mathf.lerp(kf.value, nextKf.value, t);
                }
                else {
                    return kf.value;
                }
            }
        }
        return this.keys[this.keys.length - 1].value;
    }
}
__decorate([
    serializable(Keyframe)
], AnimationCurve.prototype, "keys", void 0);
//# sourceMappingURL=AnimationCurve.js.map