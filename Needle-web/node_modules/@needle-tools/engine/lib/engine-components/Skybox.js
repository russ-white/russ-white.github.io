var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { serializable } from "../engine/engine_serialization_decorator";
import { Behaviour } from "./Component";
import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';
import { EXRLoader } from "three/examples/jsm/loaders/EXRLoader";
import { EquirectangularRefractionMapping, sRGBEncoding, TextureLoader } from "three";
import { syncField } from "../engine/engine_networking_auto";
export class RemoteSkybox extends Behaviour {
    url;
    allowDrop = true;
    background = true;
    backgroundBlurriness = 0;
    environment = true;
    _loader;
    _prevLoadedEnvironment;
    _prevEnvironment = null;
    _prevBackground = null;
    onEnable() {
        this.setSkybox(this.url);
        this.registerDropEvents();
    }
    onDisable() {
        if (this.context.scene.environment === this._prevLoadedEnvironment) {
            if (!this.context.isInXR) {
                this.context.scene.environment = this._prevEnvironment;
                this.context.scene.background = this._prevBackground;
            }
            this._prevLoadedEnvironment = undefined;
        }
        this.unregisterDropEvents();
    }
    async setSkybox(url) {
        if (!url)
            return;
        if (!url?.endsWith(".hdr") && !url.endsWith(".exr")) {
            console.warn("Potentially invalid skybox url", this.url, "on", this.name);
        }
        if (!this._loader) {
            const isEXR = url.endsWith(".exr");
            const isHdr = url.endsWith(".hdr");
            if (isEXR) {
                this._loader = new EXRLoader();
            }
            else if (isHdr) {
                this._loader = new RGBELoader();
            }
            else {
                this._loader = new TextureLoader();
            }
        }
        const envMap = await this._loader.loadAsync(url);
        if (!envMap)
            return;
        if (!this.enabled)
            return;
        this.url = url;
        envMap.mapping = EquirectangularRefractionMapping;
        if (this._loader instanceof TextureLoader) {
            envMap.encoding = sRGBEncoding;
        }
        this._prevBackground = this.context.scene.background;
        this._prevEnvironment = this.context.scene.environment;
        console.log("Set skybox", this.url);
        if (this.environment)
            this.context.scene.environment = envMap;
        if (this.background)
            this.context.scene.background = envMap;
        this._prevLoadedEnvironment = envMap;
        const nameIndex = url.lastIndexOf("/");
        envMap.name = url.substring(nameIndex >= 0 ? nameIndex + 1 : 0);
        this.context.scene.backgroundBlurriness = this.backgroundBlurriness;
    }
    dragOverEvent;
    dropEvent;
    registerDropEvents() {
        if (this.dragOverEvent)
            return;
        this.dragOverEvent = (e) => {
            if (!this.allowDrop)
                return;
            if (!e.dataTransfer)
                return;
            for (const type of e.dataTransfer.types) {
                // in ondragover we dont get access to the content
                // but if we have a uri list we can assume
                // someone is maybe dragging a image file
                // so we want to capture this
                if (type === "text/uri-list") {
                    e.preventDefault();
                }
            }
        };
        this.dropEvent = (e) => {
            if (!this.allowDrop)
                return;
            e.preventDefault();
            if (!e.dataTransfer)
                return;
            for (const type of e.dataTransfer.types) {
                if (type === "text/uri-list") {
                    const url = e.dataTransfer.getData(type);
                    console.log(type, url);
                    let name = new RegExp(/polyhaven.com\/asset_img\/.+?\/(?<name>.+)\.png/).exec(url)?.groups?.name;
                    if (!name) {
                        name = new RegExp(/polyhaven\.com\/a\/(?<name>.+)/).exec(url)?.groups?.name;
                    }
                    console.log(name);
                    if (name) {
                        const envurl = "https://dl.polyhaven.org/file/ph-assets/HDRIs/exr/1k/" + name + "_1k.exr";
                        this.setSkybox(envurl);
                    }
                    else
                        console.warn("Could not resolve skybox name from dropped url", url);
                }
            }
        };
        this.context.domElement.addEventListener("dragover", this.dragOverEvent);
        this.context.domElement.addEventListener("drop", this.dropEvent);
    }
    unregisterDropEvents() {
        if (!this.dragOverEvent)
            return;
        this.context.domElement.removeEventListener("dragover", this.dragOverEvent);
        this.context.domElement.removeEventListener("drop", this.dropEvent);
    }
}
__decorate([
    syncField("setSkybox"),
    serializable()
], RemoteSkybox.prototype, "url", void 0);
__decorate([
    serializable()
], RemoteSkybox.prototype, "allowDrop", void 0);
__decorate([
    serializable()
], RemoteSkybox.prototype, "background", void 0);
__decorate([
    serializable()
], RemoteSkybox.prototype, "backgroundBlurriness", void 0);
__decorate([
    serializable()
], RemoteSkybox.prototype, "environment", void 0);
//# sourceMappingURL=Skybox.js.map