import { Behaviour } from '../Component';
import * as Models from "./TimelineModels";
import * as Tracks from "./TimelineTracks";
import { GuidsMap } from '../../engine/engine_types';
export declare enum DirectorWrapMode {
    Hold = 0,
    Loop = 1,
    None = 2
}
export declare enum ClipExtrapolation {
    None = 0,
    Hold = 1,
    Loop = 2,
    PingPong = 3,
    Continue = 4
}
export type CreateTrackFunction = (director: PlayableDirector, track: Models.TrackModel) => Tracks.TrackHandler | undefined | null;
export declare class PlayableDirector extends Behaviour {
    private static createTrackFunctions;
    static registerCreateTrack(type: string, fn: CreateTrackFunction): void;
    playableAsset?: Models.TimelineAssetModel;
    playOnAwake?: boolean;
    extrapolationMode: DirectorWrapMode;
    get isPlaying(): boolean;
    get isPaused(): boolean;
    get time(): number;
    set time(value: number);
    get duration(): number;
    set duration(value: number);
    get weight(): number;
    set weight(value: number);
    private _visibilityChangeEvt?;
    private _clonedPlayableAsset;
    awake(): void;
    onEnable(): void;
    onDisable(): void;
    onDestroy(): void;
    rebuildGraph(): void;
    play(): void;
    pause(): void;
    stop(): void;
    evaluate(): void;
    isValid(): boolean | undefined;
    forEachTrack(): Generator<Tracks.TrackHandler, void, unknown>;
    get audioTracks(): Tracks.AudioTrackHandler[];
    private _guidsMap?;
    resolveGuids(map: GuidsMap): void;
    private _isPlaying;
    private _internalUpdateRoutine;
    private _isPaused;
    private _time;
    private _duration;
    private _weight;
    private _animationTracks;
    private _audioTracks;
    private _signalTracks;
    private _controlTracks;
    private _customTracks;
    private _allTracks;
    private internalUpdate;
    private internalEvaluate;
    private resolveBindings;
    private findRoot;
    private updateTimelineDuration;
    private setupAndCreateTrackHandlers;
    private setAudioTracksAllowPlaying;
}
