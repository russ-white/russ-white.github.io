import { PlayableDirector } from "./PlayableDirector";
import * as Models from "./TimelineModels";
import * as THREE from 'three';
import { Context } from "../../engine/engine_setup";
import { SignalReceiver } from "./SignalAsset";
export declare abstract class TrackHandler {
    director: PlayableDirector;
    track: Models.TrackModel;
    get muted(): boolean;
    set muted(val: boolean);
    forEachClip(backwards?: boolean): IterableIterator<Models.ClipModel>;
    onEnable?(): any;
    onDisable?(): any;
    onDestroy?(): any;
    abstract evaluate(time: number): any;
    onMuteChanged?(): any;
    getClipTime(time: number, model: Models.ClipModel): number;
    getClipTimeNormalized(time: number, model: Models.ClipModel): number;
    evaluateWeight(time: number, index: number, models: Array<Models.ClipModel>, isActive?: boolean): number;
}
export declare class AnimationTrackHandler extends TrackHandler {
    models: Array<Models.ClipModel>;
    trackOffset?: Models.TrackOffset;
    target?: THREE.Object3D;
    mixer?: THREE.AnimationMixer;
    clips: Array<THREE.AnimationClip>;
    actions: Array<THREE.AnimationAction>;
    /** holds data/info about clips differences */
    private _actionOffsets;
    private _didBind;
    createHooks(clipModel: Models.AnimationClipModel, clip: any): void;
    bind(): void;
    private ensureTrackOffsets;
    private _useclipOffsets;
    private _totalOffsetPosition;
    private _totalOffsetRotation;
    private _totalOffsetPosition2;
    private _totalOffsetRotation2;
    private _summedPos;
    private _tempPos;
    private _summedRot;
    private _tempRot;
    evaluate(time: number): void;
    private createRotationInterpolant;
    private createPositionInterpolant;
}
export declare class AudioTrackHandler extends TrackHandler {
    models: Array<Models.ClipModel>;
    listener: THREE.AudioListener;
    audio: Array<THREE.Audio>;
    audioContextTimeOffset: Array<number>;
    lastTime: number;
    private getAudioFilePath;
    onAllowAudioChanged(allow: boolean): void;
    addModel(model: Models.ClipModel): void;
    onDisable(): void;
    onMuteChanged(): void;
    evaluate(time: number): void;
}
export declare class SignalTrackHandler extends TrackHandler {
    models: Models.SignalMarkerModel[];
    didTrigger: boolean[];
    receivers: Array<SignalReceiver | null>;
    evaluate(time: number): void;
}
export declare class ControlTrackHandler extends TrackHandler {
    models: Array<Models.ClipModel>;
    timelines: Array<PlayableDirector | null>;
    private static resolved;
    resolveSourceObjects(context: Context): void;
    private _previousActiveModel;
    evaluate(time: number): void;
}
