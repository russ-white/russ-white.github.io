import { Vector3 } from "three";
import { CircularBuffer } from "./engine_utils";
export const $physicsKey = Symbol("object");
const contactsVectorBuffer = new CircularBuffer(() => new Vector3(), 20);
export class ContactPoint {
    _point;
    _normal;
    distance;
    impulse;
    friction;
    /** worldspace point */
    get point() {
        const target = contactsVectorBuffer.get();
        return target.set(this._point.x, this._point.y, this._point.z);
    }
    /** worldspace normal */
    get normal() {
        const target = contactsVectorBuffer.get();
        return target.set(this._normal.x, this._normal.y, this._normal.z);
    }
    constructor(point, dist, normal, impulse, friction) {
        this._point = point;
        this.distance = dist;
        this._normal = normal;
        this.impulse = impulse;
        this.friction = friction;
    }
}
/// all info in here must be readonly because the object is only created once per started collision
export class Collision {
    contacts;
    constructor(obj, otherCollider, contacts) {
        this.me = obj;
        this._collider = otherCollider;
        this._gameObject = otherCollider.gameObject;
        this.contacts = contacts;
    }
    me;
    _collider;
    /** the collider the collision happened with */
    get collider() {
        return this._collider;
    }
    /** the object the collision happened with */
    _gameObject;
    get gameObject() {
        return this._gameObject;
    }
    /** the rigidbody we hit, null if none attached */
    get rigidBody() {
        return this.collider?.attachedRigidbody;
    }
}
//# sourceMappingURL=engine_types.js.map