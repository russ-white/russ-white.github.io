import { Context } from "./engine_setup";
import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { INeedleGltfLoader } from "./engine_gltf";
import { UIDProvider } from "./engine_types";
import { SerializationContext } from "./engine_serialization_core";
import { NEEDLE_components } from "./extensions/NEEDLE_components";
export declare class NeedleGltfLoader implements INeedleGltfLoader {
    createBuiltinComponents(context: Context, gltfId: string, gltf: any, seed: number | UIDProvider | null, extension?: NEEDLE_components | undefined): Promise<void>;
    writeBuiltinComponentData(comp: any, context: SerializationContext): object | null;
    parseSync(context: Context, data: any, path: string, seed: number | UIDProvider | null): Promise<GLTF | undefined>;
    loadSync(context: Context, url: string, seed: number | UIDProvider | null, _allowAddingAnimator: boolean, prog?: ((ProgressEvent: any) => void) | undefined): Promise<GLTF | undefined>;
}
export declare enum GltfLoadEventType {
    BeforeLoad = 0,
    AfterLoaded = 1,
    FinishedSetup = 10
}
export declare class GltfLoadEvent {
    context: Context;
    loader: GLTFLoader;
    path: string;
    gltf?: GLTF;
    constructor(context: Context, path: string, loader: GLTFLoader, gltf?: GLTF);
}
export type GltfLoadEventCallback = (event: GltfLoadEvent) => void;
export declare function addGltfLoadEventListener(type: GltfLoadEventType, listener: GltfLoadEventCallback): void;
export declare function removeGltfLoadEventListener(type: GltfLoadEventType, listener: GltfLoadEventCallback): void;
export declare function parseSync(context: Context, data: any, path: string, seed: number | UIDProvider | null): Promise<GLTF | undefined>;
export declare function loadSync(context: Context, url: string, seed: number | UIDProvider | null, _allowAddingAnimator?: boolean, prog?: (ProgressEvent: any) => void): Promise<GLTF | undefined>;
export declare function findAnimationsLate(_context: Context, gltf: any, callbackarray: any, allowAddingAnimator?: boolean): void;
export declare function findAnimations(gltf: GLTF, allowAddingAnimator?: boolean): void;
export declare function tryFindObjectByName(name: any, obj: any, recursive?: boolean): any;
export declare function tryFindObject(globalObjectIdentifier: any, obj: any, recursive?: boolean): any;
export declare function tryFindScript(globalObjectIdentifier: any, list?: null): import("./engine_types").IComponent | null;
