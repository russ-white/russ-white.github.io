import { Context } from "./engine_setup";
import { INetworkConnection } from "./engine_networking_types";
import { IGameObject as GameObject, IComponent as Component } from "./engine_types";
import { UIDProvider } from "./engine_types";
import { Object3D } from "three";
import { InstantiateOptions } from "./engine_gameobject";
export declare class InstantiateIdProvider implements UIDProvider {
    get seed(): number;
    set seed(val: number);
    private _originalSeed;
    private _seed;
    constructor(seed: string | number);
    reset(): void;
    generateUUID(str?: string): any;
    initialize(strOrNumber: string | number): void;
    static createFromString(str: string): InstantiateIdProvider;
    private static hash;
}
export declare enum InstantiateEvent {
    NewInstanceCreated = "new-instance-created",
    InstanceDestroyed = "instance-destroyed"
}
export interface IBeforeNetworkedDestroy {
    onBeforeNetworkedDestroy(networkIds: string[]): void;
}
export declare function syncDestroy(obj: GameObject | Component, con: INetworkConnection, recursive?: boolean): void;
export declare function sendDestroyed(guid: string, con: INetworkConnection): void;
export declare function beginListenDestroy(context: Context): void;
export declare class HostData {
    filename: string;
    hash: string;
    size: number;
    constructor(filename: string, hash: string, size: number);
}
export declare function syncInstantiate(object: GameObject | Object3D, opts: InstantiateOptions, hostData?: HostData, save?: boolean): GameObject | null;
export declare function generateSeed(): number;
export declare function beginListenInstantiate(context: Context): void;
export declare type PrefabProviderCallback = (guid: string) => Promise<GameObject | null>;
export declare function registerPrefabProvider(key: string, fn: PrefabProviderCallback): void;
