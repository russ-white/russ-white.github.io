import { SourceIdentifier } from "./engine_types";
export declare const nameofFactory: <T>() => (name: keyof T) => keyof T;
export declare function nameof<T>(name: keyof T): keyof T;
export declare function isDebugMode(): boolean;
export declare class CircularBuffer<T> {
    private _factory;
    private _cache;
    private _maxSize;
    private _index;
    constructor(factory: () => T, maxSize: number);
    get(): T;
}
export declare function getUrlParams(): URLSearchParams;
export declare function getParam(paramName: string): string | boolean;
export declare function setParam(paramName: string, paramValue: string): void;
export declare function setParamWithoutReload(paramName: string, paramValue: string, appendHistory?: boolean): void;
export declare function setOrAddParamsToUrl(url: URLSearchParams, paramName: string, paramValue: string | number): void;
export declare function pushState(title: string, urlParams: URLSearchParams): void;
export declare function setState(title: string, urlParams: URLSearchParams): void;
export declare function makeId(length: any): string;
export declare function randomNumber(min: any, max: any): any;
export declare function makeIdFromRandomWords(): string;
export declare function sanitizeString(str: any): string;
export declare function tryFindObject(globalObjectIdentifier: string, obj: any, recursive?: boolean, searchComponents?: boolean): any;
declare type deepClonePredicate = (owner: any, propertyName: string, current: any) => boolean;
export declare function deepClone(obj: any, predicate?: deepClonePredicate): any;
export declare function delay(milliseconds: number): Promise<void>;
export declare function getPath(source: SourceIdentifier | undefined, uri: string): string;
export type WriteCallback = (data: any, prop: string) => void;
export interface IWatch {
    subscribeWrite(callback: WriteCallback): any;
    apply(): any;
    revoke(): any;
    dispose(): any;
}
export declare class Watch implements IWatch {
    private readonly _watches;
    constructor(object: object, str: string[] | string);
    subscribeWrite(callback: WriteCallback): void;
    apply(): void;
    revoke(): void;
    dispose(): void;
}
export declare function isMobileDevice(): boolean;
export declare function isMozillaXR(): boolean;
export declare function isiOS(): boolean;
export declare function isSafari(): boolean;
export {};
