"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updatePackages = void 0;
const log_1 = require("../utils/log");
const package_utils_1 = require("../utils/package-utils");
const version_utils_1 = require("../utils/version-utils");
const request = require("request");
async function updatePackages(packageJsonPath, packageNames) {
    const packageJson = (0, package_utils_1.getPackageJson)(packageJsonPath);
    if (!packageJson) {
        console.error(`ERR: Could not find package.json at ${packageJsonPath}`);
        return;
    }
    const tasks = [];
    if (packageJson.dependencies) {
        for (const name of packageNames) {
            const task = updatePackageVersion(packageJson.dependencies, name);
            if (task)
                tasks.push(task);
        }
    }
    if (packageJson.devDependencies) {
        for (const name of packageNames) {
            const task = updatePackageVersion(packageJson.devDependencies, name);
            if (task)
                tasks.push(task);
        }
    }
    if (packageJson.peerDependencies) {
        for (const name of packageNames) {
            const task = updatePackageVersion(packageJson.peerDependencies, name);
            if (task)
                tasks.push(task);
        }
    }
    const results = await Promise.all(tasks);
    const changed = results.some(result => result);
    if (changed) {
        // write package json
        (0, package_utils_1.savePackageJson)(packageJsonPath, packageJson);
    }
}
exports.updatePackages = updatePackages;
function updatePackageVersion(dict, packageName) {
    if (dict[packageName]) {
        console.log("Found package " + packageName);
        const version = dict[packageName];
        if ((0, version_utils_1.isVersion)(version)) {
            return new Promise(async (res, _rej) => {
                let latestVersion = await getLatestNpmPackageVersion(packageName);
                console.log("Latest version: " + latestVersion);
                if (latestVersion === null) {
                    console.error(`ERR: Could not find package ${packageName} on npm`);
                    return false;
                }
                if (latestVersion !== version) {
                    if (version.startsWith("^")) {
                        latestVersion = "^" + latestVersion;
                    }
                    console.log(`Updating ${packageName} from ${version} to ${latestVersion}`);
                    dict[packageName] = latestVersion;
                    res(true);
                }
                res(false);
            });
        }
        else {
            (0, log_1.warning)(`Package "${packageName}" has a non-version value: "${version}" - will not update`);
        }
    }
    return null;
}
async function getLatestNpmPackageVersion(name) {
    const url = `https://registry.npmjs.org/${name}`;
    return new Promise((res, _rej) => {
        request(url, (error, response, body) => {
            if (error) {
                console.error(error);
                res(null);
            }
            else {
                const json = JSON.parse(body);
                const latestVersion = json["dist-tags"].latest;
                res(latestVersion);
            }
        });
    });
    return null;
}
