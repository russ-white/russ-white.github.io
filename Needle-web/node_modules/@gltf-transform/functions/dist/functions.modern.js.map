{"version":3,"file":"functions.modern.js","sources":["../src/utils.ts","../src/center.ts","../src/colorspace.ts","../src/dedup.ts","../src/dequantize.ts","../src/draco.ts","../src/inspect.ts","../src/instance.ts","../src/prune.ts","../src/reorder.ts","../src/sort-primitive-weights.ts","../src/quantize.ts","../src/meshopt.ts","../src/metal-rough.ts","../src/unweld.ts","../src/normals.ts","../src/partition.ts","../src/resample.ts","../src/sequence.ts","../src/weld.ts","../src/simplify.ts","../src/list-texture-channels.ts","../src/list-texture-slots.ts","../src/squoosh.ts","../src/tangents.ts","../src/texture-resize.ts","../src/transform-mesh.ts","../src/unlit.ts","../src/unpartition.ts","../src/list-texture-info.ts"],"sourcesContent":["import type { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Accessor, Primitive, Texture, Transform, TransformContext } from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/** Maps pixels from source to target textures, with a per-pixel callback. */\nexport async function rewriteTexture(\n\tsource: Texture,\n\ttarget: Texture,\n\tfn: (pixels: NdArray, i: number, j: number) => void\n): Promise<Texture | null> {\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor (let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor (let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices ? indices.getCount() / 2 : position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices ? indices.getCount() / 3 : position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n\nexport function formatBytes(bytes: number, decimals = 2): string {\n\tif (bytes === 0) return '0 Bytes';\n\n\tconst k = 1000;\n\tconst dm = decimals < 0 ? 0 : decimals;\n\tconst sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\n\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function formatLong(x: number): string {\n\treturn x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nexport function formatDelta(a: number, b: number, decimals = 2): string {\n\tconst prefix = a > b ? '–' : '+';\n\tconst suffix = '%';\n\treturn prefix + ((Math.abs(a - b) / a) * 100).toFixed(decimals) + suffix;\n}\n\nexport function formatDeltaOp(a: number, b: number) {\n\treturn `${formatLong(a)} → ${formatLong(b)} (${formatDelta(a, b)})`;\n}\n\n/**\n * Returns a list of all unique vertex attributes on the given primitive and\n * its morph targets.\n */\nexport function deepListAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n\nexport function deepSwapAttribute(prim: Primitive, src: Accessor, dst: Accessor): void {\n\tprim.swap(src, dst);\n\tfor (const target of prim.listTargets()) {\n\t\ttarget.swap(src, dst);\n\t}\n}\n\nexport function remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\nexport function createIndices(count: number, maxIndex = count): Uint16Array | Uint32Array {\n\tconst array = maxIndex <= 65534 ? new Uint16Array(count) : new Uint32Array(count);\n\tfor (let i = 0; i < array.length; i++) array[i] = i;\n\treturn array;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { bounds } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = { pivot: 'center' };\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n */\nexport function center(_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = { ...CENTER_DEFAULTS, ..._options } as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot()\n\t\t\t.listScenes()\n\t\t\t.forEach((scene, index) => {\n\t\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\t\tlet pivot: vec3;\n\t\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\t\tconst bbox = bounds(scene);\n\t\t\t\t\tpivot = [\n\t\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t\t];\n\t\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t\t} else {\n\t\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\t\tif (isAnimated) {\n\t\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\t\tscene.addChild(offsetNode);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\t\tchild.setTranslation([t[0] + offset[0], t[1] + offset[1], t[2] + offset[2]]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import type { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'colorspace';\n\n/** Options for the {@link colorspace} function. */\nexport interface ColorspaceOptions {\n\t/** Must be `\"sRGB\"`. Required. */\n\tinputEncoding: string;\n}\n\n/**\n * Vertex color colorspace correction. The glTF format requires vertex colors to be stored\n * as linear values, and this function provides a way to correct vertex colors that are\n * (incorrectly) sRGB.\n */\nexport function colorspace(options: ColorspaceOptions): Transform {\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.inputEncoding === 'linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.inputEncoding !== 'sRGB') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input encoding \"${options.inputEncoding}\" – should be \"sRGB\" or ` +\n\t\t\t\t\t'\"linear\". Skipping conversion.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear(c: number): number {\n\t\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import {\n\tAccessor,\n\tBufferUtils,\n\tDocument,\n\tILogger,\n\tMaterial,\n\tMesh,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tRoot,\n\tTexture,\n\tTransform,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tpropertyTypes: [PropertyType.ACCESSOR, PropertyType.MESH, PropertyType.TEXTURE, PropertyType.MATERIAL],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n */\nexport const dedup = function (_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = { ...DEDUP_DEFAULTS, ..._options } as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(logger, doc);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction dedupAccessors(logger: ILogger, doc: Document): void {\n\t// Find all accessors used for mesh data.\n\tconst indicesAccessors: Set<Accessor> = new Set();\n\tconst attributeAccessors: Set<Accessor> = new Set();\n\tconst inputAccessors: Set<Accessor> = new Set();\n\tconst outputAccessors: Set<Accessor> = new Set();\n\n\tconst meshes = doc.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => attributeAccessors.add(accessor));\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices) indicesAccessors.add(indices);\n\t\t});\n\t});\n\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input) inputAccessors.add(input);\n\t\t\tif (output) outputAccessors.add(output);\n\t\t}\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[]): Map<Accessor, Accessor> {\n\t\tconst duplicateAccessors: Map<Accessor, Accessor> = new Map();\n\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicateAccessors.has(a)) continue;\n\n\t\t\tfor (let j = 0; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (a === b) continue;\n\t\t\t\tif (duplicateAccessors.has(b)) continue;\n\n\t\t\t\tif (a.getType() !== b.getType()) continue;\n\t\t\t\tif (a.getComponentType() !== b.getComponentType()) continue;\n\t\t\t\tif (a.getCount() !== b.getCount()) continue;\n\t\t\t\tif (a.getNormalized() !== b.getNormalized()) continue;\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicateAccessors.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn duplicateAccessors;\n\t}\n\n\tconst duplicateIndices = detectDuplicates(Array.from(indicesAccessors));\n\tlogger.debug(`${NAME}: Found ${duplicateIndices.size} duplicates among ${indicesAccessors.size} indices.`);\n\n\tconst duplicateAttributes = detectDuplicates(Array.from(attributeAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateAttributes.size} duplicates among ${attributeAccessors.size}` + ' attributes.'\n\t);\n\n\tconst duplicateInputs = detectDuplicates(Array.from(inputAccessors));\n\tconst duplicateOutputs = detectDuplicates(Array.from(outputAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateInputs.size + duplicateOutputs.size} duplicates among` +\n\t\t\t` ${inputAccessors.size + outputAccessors.size} animation accessors.`\n\t);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicateAttributes.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicateAttributes.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicateIndices.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicateIndices.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\tArray.from(duplicateIndices.keys()).forEach((indices) => indices.dispose());\n\tArray.from(duplicateAttributes.keys()).forEach((attribute) => attribute.dispose());\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicateInputs.has(input)) {\n\t\t\t\tsampler.swap(input, duplicateInputs.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicateOutputs.has(output)) {\n\t\t\t\tsampler.swap(output, duplicateOutputs.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\tArray.from(duplicateInputs.keys()).forEach((input) => input.dispose());\n\tArray.from(duplicateOutputs.keys()).forEach((output) => output.dispose());\n}\n\nfunction dedupMeshes(logger: ILogger, doc: Document): void {\n\tconst root = doc.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor | Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tconst meshKey = srcKeyItems.join(';');\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Found ${numMeshes - uniqueMeshes.size} duplicates among ${numMeshes} meshes.`);\n}\n\nfunction dedupImages(logger: ILogger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Found ${duplicates.size} duplicates among ${root.listTextures().length} textures.`);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(logger: ILogger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates: Map<Material, Material> = new Map();\n\tconst skip = new Set(['name']);\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++) {\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < materials.length; j++) {\n\t\t\tconst b = materials[j];\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\tif (a.equals(b, skip)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t// eslint-disable-next-line max-len\n\t\t`${NAME}: Found ${duplicates.size} duplicates among ${root.listMaterials().length} materials.`\n\t);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(prim: Primitive | PrimitiveTarget, refs: Map<Accessor | Material, number>): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n","import type { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link MeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = { ...DEQUANTIZE_DEFAULTS, ..._options } as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(MeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nfunction dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { DracoMeshCompression } from '@gltf-transform/extensions';\n\nexport interface DracoOptions {\n\tmethod?: 'edgebreaker' | 'sequential';\n\tencodeSpeed?: number;\n\tdecodeSpeed?: number;\n\tquantizePosition?: number;\n\tquantizeNormal?: number;\n\tquantizeColor?: number;\n\tquantizeTexcoord?: number;\n\tquantizeGeneric?: number;\n\tquantizationVolume?: 'mesh' | 'scene';\n}\n\nexport const DRACO_DEFAULTS: DracoOptions = {\n\tmethod: 'edgebreaker',\n\tencodeSpeed: 5,\n\tdecodeSpeed: 5,\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeColor: 8,\n\tquantizeTexcoord: 12,\n\tquantizeGeneric: 12,\n\tquantizationVolume: 'mesh',\n};\n\n/**\n * Applies Draco compression using {@link DracoMeshCompression KHR_draco_mesh_compression}.\n * This type of compression can reduce the size of triangle geometry.\n *\n * This function is a thin wrapper around the {@link DracoMeshCompression} extension itself.\n */\nexport const draco = (_options: DracoOptions): Transform => {\n\tconst options = { ...DRACO_DEFAULTS, ..._options } as Required<DracoOptions>;\n\treturn (doc: Document): void => {\n\t\tdoc.createExtension(DracoMeshCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.method === 'edgebreaker'\n\t\t\t\t\t\t? DracoMeshCompression.EncoderMethod.EDGEBREAKER\n\t\t\t\t\t\t: DracoMeshCompression.EncoderMethod.SEQUENTIAL,\n\t\t\t\tencodeSpeed: options.encodeSpeed,\n\t\t\t\tdecodeSpeed: options.decodeSpeed,\n\t\t\t\tquantizationBits: {\n\t\t\t\t\tPOSITION: options.quantizePosition,\n\t\t\t\t\tNORMAL: options.quantizeNormal,\n\t\t\t\t\tCOLOR: options.quantizeColor,\n\t\t\t\t\tTEX_COORD: options.quantizeTexcoord,\n\t\t\t\t\tGENERIC: options.quantizeGeneric,\n\t\t\t\t},\n\t\t\t\tquantizationVolume: options.quantizationVolume,\n\t\t\t});\n\t};\n};\n","import {\n\tAccessor,\n\tDocument,\n\tExtensionProperty,\n\tGLTF,\n\tImageUtils,\n\tTexture,\n\tbounds,\n\tPropertyType,\n} from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils';\nimport { KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_UASTC, read as readKTX } from 'ktx-parse';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect(doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes(doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc\n\t\t.getRoot()\n\t\t.listScenes()\n\t\t.map((scene) => {\n\t\t\tconst root = scene.listChildren()[0];\n\t\t\tconst sceneBounds = bounds(scene);\n\t\t\treturn {\n\t\t\t\tname: scene.getName(),\n\t\t\t\trootName: root ? root.getName() : '',\n\t\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t\t};\n\t\t});\n\treturn { properties: scenes };\n}\n\n/** List meshes. */\nfunction listMeshes(doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc\n\t\t.getRoot()\n\t\t.listMeshes()\n\t\t.map((mesh) => {\n\t\t\tconst instances = mesh.listParents().filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\t\t\tlet glPrimitives = 0;\n\t\t\tlet verts = 0;\n\t\t\tconst semantics = new Set<string>();\n\t\t\tconst meshIndices = new Set<string>();\n\t\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\t\tsemantics.add(semantic + ':' + accessorToTypeLabel(attr));\n\t\t\t\t\tmeshAccessors.add(attr);\n\t\t\t\t}\n\t\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t\t}\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (indices) {\n\t\t\t\t\tmeshIndices.add(accessorToTypeLabel(indices));\n\t\t\t\t\tmeshAccessors.add(indices);\n\t\t\t\t}\n\t\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\t\tconst modes = mesh.listPrimitives().map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\t\treturn {\n\t\t\t\tname: mesh.getName(),\n\t\t\t\tmode: Array.from(new Set(modes)),\n\t\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\t\tglPrimitives: glPrimitives,\n\t\t\t\tvertices: verts,\n\t\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\t\tinstances: instances,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: meshes };\n}\n\n/** List materials. */\nfunction listMaterials(doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc\n\t\t.getRoot()\n\t\t.listMaterials()\n\t\t.map((material) => {\n\t\t\tconst instances = material\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\t// Find all texture slots attached to this material or its extensions.\n\t\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listEdges()\n\t\t\t\t.filter((ref) => {\n\t\t\t\t\tconst child = ref.getChild();\n\t\t\t\t\tconst parent = ref.getParent();\n\t\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (child instanceof Texture && parent instanceof ExtensionProperty && extensions.has(parent)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t\t.map((ref) => ref.getName());\n\n\t\t\treturn {\n\t\t\t\tname: material.getName(),\n\t\t\t\tinstances,\n\t\t\t\ttextures: slots,\n\t\t\t\talphaMode: material.getAlphaMode(),\n\t\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t\t};\n\t\t});\n\n\treturn { properties: materials };\n}\n\n/** List textures. */\nfunction listTextures(doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc\n\t\t.getRoot()\n\t\t.listTextures()\n\t\t.map((texture) => {\n\t\t\tconst instances = texture\n\t\t\t\t.listParents()\n\t\t\t\t.filter((parent) => parent.propertyType !== PropertyType.ROOT).length;\n\n\t\t\tconst slots = doc\n\t\t\t\t.getGraph()\n\t\t\t\t.listParentEdges(texture)\n\t\t\t\t.filter((edge) => edge.getParent().propertyType !== PropertyType.ROOT)\n\t\t\t\t.map((edge) => edge.getName());\n\n\t\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\t\tlet compression = '';\n\t\t\tif (texture.getMimeType() === 'image/ktx2') {\n\t\t\t\tconst container = readKTX(texture.getImage()!);\n\t\t\t\tconst dfd = container.dataFormatDescriptor[0];\n\t\t\t\tif (dfd.colorModel === KHR_DF_MODEL_ETC1S) {\n\t\t\t\t\tcompression = 'ETC1S';\n\t\t\t\t} else if (dfd.colorModel === KHR_DF_MODEL_UASTC) {\n\t\t\t\t\tcompression = 'UASTC';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tname: texture.getName(),\n\t\t\t\turi: texture.getURI(),\n\t\t\t\tslots: Array.from(new Set(slots)),\n\t\t\t\tinstances,\n\t\t\t\tmimeType: texture.getMimeType(),\n\t\t\t\tcompression,\n\t\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\t\tgpuSize: ImageUtils.getMemSize(texture.getImage()!, texture.getMimeType()),\n\t\t\t};\n\t\t});\n\n\treturn { properties: textures };\n}\n\n/** List animations. */\nfunction listAnimations(doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc\n\t\t.getRoot()\n\t\t.listAnimations()\n\t\t.map((anim) => {\n\t\t\tlet minTime = Infinity;\n\t\t\tlet maxTime = -Infinity;\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tif (!input) return;\n\t\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t\t});\n\n\t\t\tlet size = 0;\n\t\t\tlet keyframes = 0;\n\t\t\tconst accessors: Set<Accessor> = new Set();\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (!input) return;\n\t\t\t\tkeyframes += input.getCount();\n\t\t\t\taccessors.add(input);\n\t\t\t\tif (!output) return;\n\t\t\t\taccessors.add(output);\n\t\t\t});\n\t\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tname: anim.getName(),\n\t\t\t\tchannels: anim.listChannels().length,\n\t\t\t\tsamplers: anim.listSamplers().length,\n\t\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\t\tkeyframes: keyframes,\n\t\t\t\tsize: size,\n\t\t\t};\n\t\t});\n\n\treturn { properties: animations };\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tcompression: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\nconst NumericTypeLabels: Record<string, string> = {\n\tFloat32Array: 'f32',\n\tUint32Array: 'u32',\n\tUint16Array: 'u16',\n\tUint8Array: 'u8',\n\tInt32Array: 'i32',\n\tInt16Array: 'i16',\n\tInt8Array: 'i8',\n};\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction accessorToTypeLabel(accessor: Accessor): string {\n\tconst array = accessor.getArray()!;\n\tconst base = NumericTypeLabels[array.constructor.name] || '?';\n\tconst suffix = accessor.getNormalized() ? '_norm' : '';\n\treturn base + suffix;\n}\n","import { Document, ILogger, MathUtils, Mesh, Node, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, MeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'instance';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface InstanceOptions {}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. No\n * options are currently implemented for this function.\n */\nexport function instance(_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...INSTANCE_DEFAULTS, ..._options } as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst batchExtension = doc.createExtension(MeshGPUInstancing);\n\n\t\tif (root.listAnimations().length) {\n\t\t\tlogger.warn(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t\treturn;\n\t\t}\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < 2) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode().setMesh(mesh).setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, (t = node.getWorldTranslation()));\n\t\t\t\t\tbatchRotation.setElement(i, (r = node.getWorldRotation()));\n\t\t\t\t\tbatchScale.setElement(i, (s = node.getWorldScale()));\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with multiple parent nodes were found.`);\n\t\t}\n\n\t\tif (batchExtension.listProperties().length === 0) {\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: ILogger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (\n\t\t\tnode.listChildren().length ||\n\t\t\tnode.getCamera() ||\n\t\t\tnode.getMesh() ||\n\t\t\tnode.getSkin() ||\n\t\t\tnode.listExtensions().length\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParent();\n\t\tif (nodeParent instanceof Node) {\n\t\t\tnodes.push(nodeParent);\n\t\t}\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction createBatch(doc: Document, batchExtension: MeshGPUInstancing, mesh: Mesh, count: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc\n\t\t.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc\n\t\t.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension\n\t\t.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import {\n\tAnimationChannel,\n\tDocument,\n\tGraph,\n\tProperty,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tNode,\n\tScene,\n\tExtensionProperty,\n\tMaterial,\n\tPrimitive,\n\tPrimitiveTarget,\n\tTexture,\n\tTextureInfo,\n} from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'prune';\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n\t/** Whether to keep empty leaf nodes. */\n\tkeepLeaves?: boolean;\n\t/** Whether to keep unused vertex attributes, such as UVs without an assigned texture. */\n\tkeepAttributes?: boolean;\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t],\n\tkeepLeaves: false,\n\tkeepAttributes: true,\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n */\nexport const prune = function (_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...PRUNE_DEFAULTS, ..._options } as Required<PruneOptions>;\n\tconst propertyTypes = new Set(options.propertyTypes);\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst graph = doc.getGraph();\n\n\t\tconst disposed: Record<string, number> = {};\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\tif (propertyTypes.has(PropertyType.NODE) && !options.keepLeaves) root.listScenes().forEach(nodeTreeShake);\n\t\tif (propertyTypes.has(PropertyType.NODE)) root.listNodes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.SKIN)) root.listSkins().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.MESH)) root.listMeshes().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.CAMERA)) root.listCameras().forEach(treeShake);\n\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE);\n\t\t}\n\t\tif (propertyTypes.has(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET);\n\t\t}\n\n\t\t// Prune unused vertex attributes.\n\t\tif (!options.keepAttributes && propertyTypes.has(PropertyType.ACCESSOR)) {\n\t\t\tfor (const mesh of root.listMeshes()) {\n\t\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\t\tconst required = listRequiredSemantics(doc, prim.getMaterial());\n\t\t\t\t\tconst unused = listUnusedSemantics(prim, required);\n\t\t\t\t\tpruneAttributes(prim, unused);\n\t\t\t\t\tprim.listTargets().forEach((target) => pruneAttributes(target, unused));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.has(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t\tmarkDisposed(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim);\n\t\t\t\t\tsamplers.forEach(treeShake);\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach(treeShake);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) root.listMaterials().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) root.listTextures().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) root.listAccessors().forEach(treeShake);\n\t\tif (propertyTypes.has(PropertyType.BUFFER)) root.listBuffers().forEach(treeShake);\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (Object.keys(disposed).length) {\n\t\t\tconst str = Object.keys(disposed)\n\t\t\t\t.map((t) => `${t} (${disposed[t]})`)\n\t\t\t\t.join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t\t//\n\n\t\t/** Disposes of the given property if it is unused. */\n\t\tfunction treeShake(prop: Property): void {\n\t\t\t// Consider a property unused if it has no references from another property, excluding\n\t\t\t// types Root and AnimationChannel.\n\t\t\tconst parents = prop.listParents().filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\t\t\tif (!parents.length) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * For property types the Root does not maintain references to, we'll need to search the\n\t\t * graph. It's possible that objects may have been constructed without any outbound links,\n\t\t * but since they're not on the graph they don't need to be tree-shaken.\n\t\t */\n\t\tfunction indirectTreeShake(graph: Graph<Property>, propertyType: string): void {\n\t\t\tgraph\n\t\t\t\t.listEdges()\n\t\t\t\t.map((edge) => edge.getParent())\n\t\t\t\t.filter((parent) => parent.propertyType === propertyType)\n\t\t\t\t.forEach(treeShake);\n\t\t}\n\n\t\t/** Iteratively prunes leaf Nodes without contents. */\n\t\tfunction nodeTreeShake(prop: Node | Scene): void {\n\t\t\tprop.listChildren().forEach(nodeTreeShake);\n\n\t\t\tif (prop instanceof Scene) return;\n\n\t\t\tconst isUsed = graph.listParentEdges(prop).some((e) => {\n\t\t\t\tconst ptype = e.getParent().propertyType;\n\t\t\t\treturn ptype !== PropertyType.ROOT && ptype !== PropertyType.SCENE && ptype !== PropertyType.NODE;\n\t\t\t});\n\t\t\tconst isEmpty = graph.listChildren(prop).length === 0;\n\t\t\tif (isEmpty && !isUsed) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\tfunction pruneAttributes(prim: Primitive | PrimitiveTarget, unused: string[]) {\n\t\t\tfor (const semantic of unused) {\n\t\t\t\tprim.setAttribute(semantic, null);\n\t\t\t}\n\t\t}\n\n\t\t/** Records properties disposed by type. */\n\t\tfunction markDisposed(prop: Property): void {\n\t\t\tdisposed[prop.propertyType] = disposed[prop.propertyType] || 0;\n\t\t\tdisposed[prop.propertyType]++;\n\t\t}\n\t});\n};\n\n/**\n * Lists vertex attribute semantics that are unused when rendering a given primitive.\n */\nfunction listUnusedSemantics(prim: Primitive | PrimitiveTarget, required: Set<string>): string[] {\n\tconst unused = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (semantic === 'TANGENT' && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('TEXCOORD_') && !required.has(semantic)) {\n\t\t\tunused.push(semantic);\n\t\t} else if (semantic.startsWith('COLOR_') && semantic !== 'COLOR_0') {\n\t\t\tunused.push(semantic);\n\t\t}\n\t}\n\treturn unused;\n}\n\n/**\n * Lists vertex attribute semantics required by a material. Does not include\n * attributes that would be used unconditionally, like POSITION or NORMAL.\n */\nfunction listRequiredSemantics(\n\tdocument: Document,\n\tmaterial: Material | ExtensionProperty | null,\n\tsemantics = new Set<string>()\n): Set<string> {\n\tif (!material) return semantics;\n\n\tconst graph = document.getGraph();\n\n\tconst edges = graph.listChildEdges(material);\n\tconst textureNames = new Set<string>();\n\n\tfor (const edge of edges) {\n\t\tif (edge.getChild() instanceof Texture) {\n\t\t\ttextureNames.add(edge.getName());\n\t\t}\n\t}\n\n\tfor (const edge of edges) {\n\t\tconst name = edge.getName();\n\t\tconst child = edge.getChild();\n\n\t\tif (child instanceof TextureInfo) {\n\t\t\tif (textureNames.has(name.replace(/Info$/, ''))) {\n\t\t\t\tsemantics.add(`TEXCOORD_${child.getTexCoord()}`);\n\t\t\t}\n\t\t}\n\n\t\tif (child instanceof Texture && name.match(/normalTexture/i)) {\n\t\t\tsemantics.add('TANGENT');\n\t\t}\n\n\t\tif (child instanceof ExtensionProperty) {\n\t\t\tlistRequiredSemantics(document, child, semantics);\n\t\t}\n\n\t\t// TODO(#748): Does KHR_materials_anisotropy imply required vertex attributes?\n\t}\n\n\treturn semantics;\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform, deepListAttributes, remapAttribute, SetMap } from './utils';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder: unknown;\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance';\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n */\nexport function reorder(_options: ReorderOptions): Transform {\n\tconst options = { ...REORDER_DEFAULTS, ..._options } as Required<ReorderOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = createLayoutPlan(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size'\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.ACCESSOR] }));\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Constructs a plan for processing vertex streams, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n */\nexport function createLayoutPlan(document: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of deepListAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { indicesToAttributes, indicesToMode, attributesToPrimitives };\n}\n","import { Accessor, GLTF, MathUtils, Primitive, PrimitiveTarget, TypedArray, vec4 } from '@gltf-transform/core';\n\n/**\n * Sorts skinning weights from high to low, for each vertex of the input\n * {@link Primitive} or {@link PrimitiveTarget}, and normalizes the weights.\n * Optionally, uses the given 'limit' to remove least-significant joint\n * influences such that no vertex has more than 'limit' influences.\n *\n * Most realtime engines support a limited number of joint influences per vertex,\n * often 4 or 8. Sorting and removing the additional influences can reduce file\n * size and improve compatibility.\n *\n * Example:\n *\n * ```javascript\n * import { sortPrimitiveWeights } from '@gltf-transform/functions';\n *\n * const limit = 4;\n * for (const mesh of document.getRoot().listMeshes()) {\n * \tfor (const prim of mesh.listPrimitives()) {\n * \t\tsortPrimitiveWeights(prim, limit);\n * \t}\n * }\n * ```\n *\n * @param prim Input, to be modified in place.\n * @param limit Maximum number of joint influences per vertex. Must be a multiple of four.\n */\nexport function sortPrimitiveWeights(prim: Primitive | PrimitiveTarget, limit = Infinity) {\n\tif ((Number.isFinite(limit) && limit % 4) || limit <= 0) {\n\t\tthrow new Error(`Limit must be positive multiple of four.`);\n\t}\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\t// (1) Sort.\n\n\tconst indices = new Uint16Array(setCount * 4);\n\tconst srcWeights = new Float32Array(setCount * 4);\n\tconst dstWeights = new Float32Array(setCount * 4);\n\tconst srcJoints = new Uint32Array(setCount * 4);\n\tconst dstJoints = new Uint32Array(setCount * 4);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'WEIGHTS', srcWeights);\n\t\tgetVertexArray(prim, i, 'JOINTS', srcJoints);\n\n\t\t// Sort indices to create a lookup table, indices[dstIndex] → srcIndex,\n\t\t// indexed into the weights and joints arrays.\n\t\tfor (let j = 0; j < setCount * 4; j++) indices[j] = j;\n\t\tindices.sort((a, b) => (srcWeights[a] > srcWeights[b] ? -1 : 1));\n\n\t\t// Sort weights and joints.\n\t\tfor (let j = 0; j < indices.length; j++) {\n\t\t\tdstWeights[j] = srcWeights[indices[j]];\n\t\t\tdstJoints[j] = srcJoints[indices[j]];\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'WEIGHTS', dstWeights);\n\t\tsetVertexArray(prim, i, 'JOINTS', dstJoints);\n\t}\n\n\t// (2) Limit.\n\tfor (let i = setCount; i * 4 > limit; i--) {\n\t\tconst weights = prim.getAttribute(`WEIGHTS_${i - 1}`)!;\n\t\tconst joints = prim.getAttribute(`JOINTS_${i - 1}`)!;\n\t\tprim.setAttribute(`WEIGHTS_${i - 1}`, null);\n\t\tprim.setAttribute(`JOINTS_${i - 1}`, null);\n\t\tif (weights.listParents().length === 1) weights.dispose();\n\t\tif (joints.listParents().length === 1) joints.dispose();\n\t}\n\n\t// (3) Normalize.\n\tnormalizePrimitiveWeights(prim);\n}\n\n// Utilities.\n\ntype PrimLike = Primitive | PrimitiveTarget;\n\nfunction normalizePrimitiveWeights(prim: PrimLike): void {\n\t// Would prefer to warn if unsafe, but no logger accessible in this scope.\n\tif (!isNormalizeSafe(prim)) return;\n\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst setCount = prim.listSemantics().filter((name) => name.startsWith('WEIGHTS_')).length;\n\n\tconst templateAttribute = prim.getAttribute('WEIGHTS_0')!;\n\tconst templateArray = templateAttribute.getArray()!;\n\tconst componentType = templateAttribute.getComponentType();\n\tconst normalized = templateAttribute.getNormalized();\n\tconst normalizedComponentType = normalized ? componentType : undefined;\n\tconst delta = normalized ? MathUtils.denormalize(1, componentType) : Number.EPSILON;\n\tconst joints = new Uint32Array(setCount * 4).fill(0);\n\tconst weights = templateArray.slice(0, setCount * 4).fill(0);\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tgetVertexArray(prim, i, 'JOINTS', joints);\n\t\tgetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\n\t\tlet weightsSum = sum(weights, normalizedComponentType);\n\t\tif (weightsSum === 0) continue;\n\n\t\t// (1) If sum of weights not within δ of 1, renormalize all weights.\n\t\tif (Math.abs(1 - weightsSum) > delta) {\n\t\t\tfor (let j = 0; j < weights.length; j++) {\n\t\t\t\tif (normalized) {\n\t\t\t\t\tconst intValue = MathUtils.normalize(weights[j] / weightsSum, componentType);\n\t\t\t\t\tweights[j] = MathUtils.denormalize(intValue, componentType);\n\t\t\t\t} else {\n\t\t\t\t\tweights[j] /= weightsSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tweightsSum = sum(weights, normalizedComponentType);\n\n\t\t// (2) Sum of normalized weights may still be off by δ. Compensate\n\t\t// in least-significant weight.\n\t\tif (normalized && weightsSum !== 1) {\n\t\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\t\tif (weights[j] > 0) {\n\t\t\t\t\tweights[j] += MathUtils.normalize(1 - weightsSum, componentType);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (3) Remove joint indices whose weights have fallen to zero.\n\t\tfor (let j = weights.length - 1; j >= 0; j--) {\n\t\t\tif (weights[j] === 0) {\n\t\t\t\tjoints[j] = 0;\n\t\t\t}\n\t\t}\n\n\t\tsetVertexArray(prim, i, 'JOINTS', joints);\n\t\tsetVertexArray(prim, i, 'WEIGHTS', weights, normalizedComponentType);\n\t}\n}\n\n/** Lists all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction getVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\ttarget: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): TypedArray {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tweights.getElement(vertexIndex, el);\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\ttarget[i * 4 + j] = MathUtils.normalize(el[j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\ttarget[i * 4 + j] = el[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\n/** Sets all values of a multi-set vertex attribute (WEIGHTS_#, ...) for given vertex. */\nfunction setVertexArray(\n\tprim: PrimLike,\n\tvertexIndex: number,\n\tprefix: string,\n\tvalues: TypedArray,\n\tnormalizedComponentType?: GLTF.AccessorComponentType\n): void {\n\tlet weights: Accessor | null;\n\tconst el = [0, 0, 0, 0] as vec4;\n\tfor (let i = 0; (weights = prim.getAttribute(`${prefix}_${i}`)); i++) {\n\t\tfor (let j = 0; j < 4; j++) {\n\t\t\tif (normalizedComponentType) {\n\t\t\t\tel[j] = MathUtils.denormalize(values[i * 4 + j], normalizedComponentType);\n\t\t\t} else {\n\t\t\t\tel[j] = values[i * 4 + j];\n\t\t\t}\n\t\t}\n\t\tweights.setElement(vertexIndex, el);\n\t}\n}\n\n/** Sum an array of numbers. */\nfunction sum(values: TypedArray, normalizedComponentType?: GLTF.AccessorComponentType): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < values.length; i++) {\n\t\tif (normalizedComponentType) {\n\t\t\tsum += MathUtils.denormalize(values[i], normalizedComponentType);\n\t\t} else {\n\t\t\tsum += values[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\n/** Returns true if attribute normalization is supported for this primitive. */\nfunction isNormalizeSafe(prim: PrimLike): boolean {\n\tconst attributes = prim\n\t\t.listSemantics()\n\t\t.filter((name) => name.startsWith('WEIGHTS_'))\n\t\t.map((name) => prim.getAttribute(name)!);\n\tconst normList = attributes.map((a) => a.getNormalized());\n\tconst typeList = attributes.map((a) => a.getComponentType());\n\treturn new Set(normList).size === 1 && new Set(typeList).size === 1;\n}\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tILogger,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport type { Volume } from '@gltf-transform/extensions';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\nimport { sortPrimitiveWeights } from './sort-primitive-weights';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n\t/** Normalize weight attributes. */\n\tnormalizeWeights?: boolean;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<QuantizeOptions> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n\tnormalizeWeights: true,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n */\nconst quantize = (_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform => {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(MeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t\ttransformMeshMaterials(mesh, 1 / nodeTransform.scale);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN, PropertyType.MATERIAL] }),\n\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.MATERIAL] })\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>\n): void {\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!options.pattern.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (options.normalizeWeights && prim.getAttribute('WEIGHTS_0')) {\n\t\tsortPrimitiveWeights(prim, Infinity);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (!(parent instanceof Node)) continue;\n\n\t\tconst animChannels = parent.listParents().filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\tif (parent.getSkin()) {\n\t\t\tparent.setSkin(transformSkin(parent.getSkin()!, nodeTransform));\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet targetNode: Node;\n\t\tif (isParentNode || isAnimated) {\n\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\tanimChannels\n\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t} else {\n\t\t\ttargetNode = parent;\n\t\t}\n\n\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\ttargetNode.setMatrix(nodeMatrix);\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone();\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/** Applies corrective scale to volumetric materials, which give thickness in local units. */\nfunction transformMeshMaterials(mesh: Mesh, scale: number) {\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tlet material = prim.getMaterial();\n\t\tif (!material) continue;\n\n\t\tlet volume = material.getExtension<Volume>('KHR_materials_volume');\n\t\tif (!volume || volume.getThicknessFactor() <= 0) continue;\n\n\t\t// prune()+dedup() will clean this up later.\n\t\tvolume = volume.clone().setThicknessFactor(volume.getThicknessFactor() * scale);\n\t\tmaterial = material.clone().setExtension('KHR_materials_volume', volume);\n\t\tprim.setMaterial(material);\n\t}\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tlet value = Math.round(Math.abs(el[j]) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(true);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: ILogger,\n\toptions: Required<QuantizeOptions>\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n\nexport { quantize };\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { MeshoptCompression } from '@gltf-transform/extensions';\nimport type { MeshoptEncoder } from 'meshoptimizer';\nimport { reorder } from './reorder';\nimport { quantize } from './quantize';\n\nexport interface MeshoptOptions {\n\tencoder: unknown;\n\tlevel?: 'medium' | 'high';\n}\n\nexport const MESHOPT_DEFAULTS: Required<Omit<MeshoptOptions, 'encoder'>> = { level: 'high' };\n\nconst NAME = 'meshopt';\n\n/**\n * Applies Meshopt compression using {@link MeshoptCompression EXT_meshopt_compression}.\n * This type of compression can reduce the size of point, line, and triangle geometry,\n * morph targets, and animation data.\n *\n * This function is a thin wrapper around {@link reorder}, {@link quantize}, and\n * {@link MeshoptCompression}, and exposes relatively few configuration options.\n * To access more options (like quantization bits) direct use of the underlying\n * functions is recommended.\n *\n * Example:\n *\n * ```javascript\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await MeshoptEncoder.ready;\n *\n * await document.transform(\n *   reorder({encoder: MeshoptEncoder, level: 'medium'})\n * );\n * ```\n */\nexport const meshopt = (_options: MeshoptOptions): Transform => {\n\tconst options = { ...MESHOPT_DEFAULTS, ..._options } as Required<MeshoptOptions>;\n\tconst encoder = options.encoder as typeof MeshoptEncoder | undefined;\n\n\tif (!encoder) {\n\t\tthrow new Error(`${NAME}: encoder dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn async (document: Document): Promise<void> => {\n\t\tawait document.transform(\n\t\t\treorder({\n\t\t\t\tencoder: encoder,\n\t\t\t\ttarget: 'size',\n\t\t\t}),\n\t\t\tquantize({\n\t\t\t\t// IMPORTANT: Vertex attributes should be quantized in 'high' mode IFF they are\n\t\t\t\t// _not_ filtered in 'packages/extensions/src/ext-meshopt-compression/encoder.ts'.\n\t\t\t\tpattern: options.level === 'medium' ? /.*/ : /^(POSITION|TEXCOORD|JOINTS|WEIGHTS)(_\\d+)?$/,\n\t\t\t\tquantizePosition: 14,\n\t\t\t\tquantizeTexcoord: 12,\n\t\t\t\tquantizeColor: 8,\n\t\t\t\tquantizeNormal: 8,\n\t\t\t})\n\t\t);\n\n\t\tdocument\n\t\t\t.createExtension(MeshoptCompression)\n\t\t\t.setRequired(true)\n\t\t\t.setEncoderOptions({\n\t\t\t\tmethod:\n\t\t\t\t\toptions.level === 'medium'\n\t\t\t\t\t\t? MeshoptCompression.EncoderMethod.QUANTIZE\n\t\t\t\t\t\t: MeshoptCompression.EncoderMethod.FILTER,\n\t\t\t});\n\t};\n};\n","import type { Document, Texture, Transform } from '@gltf-transform/core';\nimport {\n\tMaterialsIOR,\n\tMaterialsPBRSpecularGlossiness,\n\tMaterialsSpecular,\n\tPBRSpecularGlossiness,\n} from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n */\nexport function metalRough(_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...METALROUGH_DEFAULTS, ..._options } as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc\n\t\t\t.getRoot()\n\t\t\t.listExtensionsUsed()\n\t\t\t.map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(MaterialsIOR);\n\t\tconst specExtension = doc.createExtension(MaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(MaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension\n\t\t\t\t.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","\nimport type { Accessor, Document, ILogger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform, formatDeltaOp } from './utils';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n */\nexport function unweld(_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNWELD_DEFAULTS, ..._options } as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\tconst srcVertexCount = prim.getAttribute('POSITION')!.getCount();\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(srcAttribute, unweldAttribute(srcAttribute, indices, logger, visited));\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dstVertexCount = prim.getAttribute('POSITION')!.getCount();\n\t\t\t\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\tsrcAttribute: Accessor,\n\tindices: Accessor,\n\tlogger: ILogger,\n\tvisited: Map<Accessor, Map<Accessor, Accessor>>\n): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as new (len: number) => TypedArray;\n\tdstAttribute.setArray(new ArrayCtor(indices.getCount() * srcAttribute.getElementSize()));\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import type { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { unweld } from './unweld';\nimport { createTransform } from './utils';\nimport { normalize } from 'gl-matrix/vec3';\n\nconst NAME = 'normals';\n\n/** Options for the {@link normals} function. */\nexport interface NormalsOptions {\n\t/** Whether to overwrite existing `NORMAL` attributes. */\n\toverwrite?: boolean;\n}\n\nconst NORMALS_DEFAULTS: Required<NormalsOptions> = {\n\toverwrite: false,\n};\n\n/**\n * Generates flat vertex normals for mesh primitives.\n *\n * Example:\n *\n * ```ts\n * import { normals } from '@gltf-transform/functions';\n *\n * await document.transform(normals({overwrite: true}));\n * ```\n */\nexport function normals(_options: NormalsOptions = NORMALS_DEFAULTS): Transform {\n\tconst options = { ...NORMALS_DEFAULTS, ..._options } as Required<NormalsOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tlet modified = 0;\n\n\t\tawait document.transform(unweld());\n\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst position = prim.getAttribute('POSITION')!;\n\t\t\t\tlet normal = prim.getAttribute('NORMAL');\n\n\t\t\t\tif (options.overwrite && normal) {\n\t\t\t\t\tnormal.dispose();\n\t\t\t\t} else if (normal) {\n\t\t\t\t\tlogger.debug(`${NAME}: Skipping primitive: NORMAL found.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tnormal = document\n\t\t\t\t\t.createAccessor()\n\t\t\t\t\t.setArray(new Float32Array(position.getCount() * 3))\n\t\t\t\t\t.setType('VEC3');\n\n\t\t\t\tconst a = [0, 0, 0] as vec3;\n\t\t\t\tconst b = [0, 0, 0] as vec3;\n\t\t\t\tconst c = [0, 0, 0] as vec3;\n\n\t\t\t\tfor (let i = 0; i < position.getCount(); i += 3) {\n\t\t\t\t\tposition.getElement(i + 0, a);\n\t\t\t\t\tposition.getElement(i + 1, b);\n\t\t\t\t\tposition.getElement(i + 2, c);\n\n\t\t\t\t\tconst faceNormal = computeNormal(a, b, c);\n\n\t\t\t\t\tnormal.setElement(i + 0, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 1, faceNormal);\n\t\t\t\t\tnormal.setElement(i + 2, faceNormal);\n\t\t\t\t}\n\n\t\t\t\tprim.setAttribute('NORMAL', normal);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/23709352/1314762\nfunction computeNormal(a: vec3, b: vec3, c: vec3): vec3 {\n\tconst A = [b[0] - a[0], b[1] - a[1], b[2] - a[2]];\n\tconst B = [c[0] - a[0], c[1] - a[1], c[2] - a[2]];\n\tconst n = [\n\t\tA[1] * B[2] - A[2] * B[1], //\n\t\tA[2] * B[0] - A[0] * B[2],\n\t\tA[0] * B[1] - A[1] * B[0],\n\t] as vec3;\n\treturn normalize([0, 0, 0], n) as vec3;\n}\n","import { Document, ILogger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> = {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n */\nconst partition = (_options: PartitionOptions = PARTITION_DEFAULTS): Transform => {\n\tconst options = { ...PARTITION_DEFAULTS, ..._options } as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({ propertyTypes: [PropertyType.BUFFER] }));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction partitionMeshes(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\tprimitive.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\tprimitive.listTargets().forEach((primTarget) => {\n\t\t\t\t\tprimTarget.listAttributes().forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations(doc: Document, logger: ILogger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(\n\t\tdoc\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.map((b) => b.getURI())\n\t);\n\n\tdoc.getRoot()\n\t\t.listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc\n\t\t\t\t.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\t\tconst input = sampler.getInput();\n\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI(basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n\nexport { partition };\n","import {\n\tAccessor,\n\tAnimationSampler,\n\tDocument,\n\tGLTF,\n\tMathUtils,\n\tPropertyType,\n\tRoot,\n\tTransform,\n\tTransformContext,\n} from '@gltf-transform/core';\nimport quat, { getAngle, slerp } from 'gl-matrix/quat';\nimport { dedup } from './dedup';\nimport { createTransform, isTransformPending } from './utils';\n\nconst NAME = 'resample';\n\nexport interface ResampleOptions {\n\ttolerance?: number;\n}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> = { tolerance: 1e-4 };\n\n/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate\n * keyframes are commonly present in animation 'baked' by the authoring software to apply IK\n * constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Example: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n */\nexport const resample = (_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform => {\n\tconst options = { ...RESAMPLE_DEFAULTS, ..._options } as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst srcAccessorCount = document.getRoot().listAccessors().length;\n\t\tconst logger = document.getLogger();\n\n\t\tlet didSkipMorphTargets = false;\n\n\t\tfor (const animation of document.getRoot().listAnimations()) {\n\t\t\t// Skip morph targets, see https://github.com/donmccurdy/glTF-Transform/issues/290.\n\t\t\tconst samplerTargetPaths = new Map<AnimationSampler, GLTF.AnimationChannelTargetPath>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tsamplerTargetPaths.set(channel.getSampler()!, channel.getTargetPath()!);\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tif (samplerTargetPaths.get(sampler) === 'weights') {\n\t\t\t\t\tdidSkipMorphTargets = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (sampler.getInterpolation() === 'STEP' || sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\taccessorsVisited.add(sampler.getInput()!);\n\t\t\t\t\taccessorsVisited.add(sampler.getOutput()!);\n\t\t\t\t\toptimize(sampler, samplerTargetPaths.get(sampler)!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\t// Resampling may result in duplicate input or output sampler\n\t\t// accessors. Find and remove the duplicates after processing.\n\t\tconst dstAccessorCount = document.getRoot().listAccessors().length;\n\t\tif (dstAccessorCount > srcAccessorCount && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tif (didSkipMorphTargets) {\n\t\t\tlogger.warn(`${NAME}: Skipped optimizing morph target keyframes, not yet supported.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction optimize(sampler: AnimationSampler, path: GLTF.AnimationChannelTargetPath, options: ResampleOptions): void {\n\tconst input = sampler.getInput()!.clone();\n\tconst output = sampler.getOutput()!.clone();\n\n\tconst tolerance = options.tolerance as number;\n\tconst interpolation = sampler.getInterpolation();\n\n\tconst lastIndex = input.getCount() - 1;\n\tconst tmp: number[] = [];\n\tconst value: number[] = [];\n\tconst valueNext: number[] = [];\n\tconst valuePrev: number[] = [];\n\n\tlet writeIndex = 1;\n\n\tfor (let i = 1; i < lastIndex; ++i) {\n\t\tconst timePrev = input.getScalar(writeIndex - 1);\n\t\tconst time = input.getScalar(i);\n\t\tconst timeNext = input.getScalar(i + 1);\n\t\tconst t = (time - timePrev) / (timeNext - timePrev);\n\n\t\tlet keep = false;\n\n\t\t// Remove unnecessary adjacent keyframes.\n\t\tif (time !== timeNext && (i !== 1 || time !== input.getScalar(0))) {\n\t\t\toutput.getElement(writeIndex - 1, valuePrev);\n\t\t\toutput.getElement(i, value);\n\t\t\toutput.getElement(i + 1, valueNext);\n\n\t\t\tif (interpolation === 'LINEAR' && path === 'rotation') {\n\t\t\t\t// Prune keyframes colinear with prev/next keyframes.\n\t\t\t\tconst sample = slerp(tmp as quat, valuePrev as quat, valueNext as quat, t) as number[];\n\t\t\t\tconst angle = getAngle(valuePrev as quat, value as quat) + getAngle(value as quat, valueNext as quat);\n\t\t\t\tkeep = !MathUtils.eq(value, sample, tolerance) || angle + Number.EPSILON >= Math.PI;\n\t\t\t} else if (interpolation === 'LINEAR') {\n\t\t\t\t// Prune keyframes colinear with prev/next keyframes.\n\t\t\t\tconst sample = vlerp(tmp, valuePrev, valueNext, t);\n\t\t\t\tkeep = !MathUtils.eq(value, sample, tolerance);\n\t\t\t} else if (interpolation === 'STEP') {\n\t\t\t\t// Prune keyframes identical to prev/next keyframes.\n\t\t\t\tkeep = !MathUtils.eq(value, valuePrev) || !MathUtils.eq(value, valueNext);\n\t\t\t}\n\t\t}\n\n\t\t// In-place compaction.\n\t\tif (keep) {\n\t\t\tif (i !== writeIndex) {\n\t\t\t\tinput.setScalar(writeIndex, input.getScalar(i));\n\t\t\t\toutput.setElement(writeIndex, output.getElement(i, tmp));\n\t\t\t}\n\t\t\twriteIndex++;\n\t\t}\n\t}\n\n\t// Flush last keyframe (compaction looks ahead).\n\tif (lastIndex > 0) {\n\t\tinput.setScalar(writeIndex, input.getScalar(lastIndex));\n\t\toutput.setElement(writeIndex, output.getElement(lastIndex, tmp));\n\t\twriteIndex++;\n\t}\n\n\t// If the sampler was optimized, truncate and save the results. If not, clean up.\n\tif (writeIndex !== input.getCount()) {\n\t\tinput.setArray(input.getArray()!.slice(0, writeIndex));\n\t\toutput.setArray(output.getArray()!.slice(0, writeIndex * output.getElementSize()));\n\t\tsampler.setInput(input);\n\t\tsampler.setOutput(output);\n\t} else {\n\t\tinput.dispose();\n\t\toutput.dispose();\n\t}\n}\n\nfunction lerp(v0: number, v1: number, t: number): number {\n\treturn v0 * (1 - t) + v1 * t;\n}\n\nfunction vlerp(out: number[], a: number[], b: number[], t: number): number[] {\n\tfor (let i = 0; i < a.length; i++) out[i] = lerp(a[i], b[i], t);\n\treturn out;\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n */\nexport function sequence (_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = {...SEQUENCE_DEFAULTS, ..._options} as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes()\n\t\t\t.filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => a.getName() > b.getName() ? 1 : -1);\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(inputArray))\n\t\t\t\t.setBuffer(animBuffer);\n\t\t\tconst output = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import {\n\tAccessor,\n\tDocument,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tTransform,\n\tTransformContext,\n\tTypedArray,\n\tvec3,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup';\nimport { createIndices, createTransform, formatDeltaOp, isTransformPending } from './utils';\n\nconst NAME = 'weld';\n\nconst Tolerance = {\n\tDEFAULT: 0.0001,\n\tTEXCOORD: 0.0001, // [0, 1]\n\tCOLOR: 0.01, // [0, 1]\n\tNORMAL: 0.5, // [-1, 1]\n\tJOINTS: 0.0, // [0, ∞]\n\tWEIGHTS: 0.01, // [0, ∞]\n};\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Tolerance, as a fraction of primitive AABB, used when merging similar vertices. */\n\ttolerance?: number;\n\t/** Whether to overwrite existing indices. */\n\toverwrite?: boolean;\n}\n\nexport const WELD_DEFAULTS: Required<WeldOptions> = {\n\ttolerance: Tolerance.DEFAULT,\n\toverwrite: true,\n};\n\n/**\n * Index {@link Primitive Primitives} and (optionally) merge similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For --tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```javascript\n * import { weld } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tweld({ tolerance: 0.001 })\n * );\n * ```\n */\nexport function weld(_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = { ...WELD_DEFAULTS, ..._options } as Required<WeldOptions>;\n\n\tif (options.tolerance > 0.1 || options.tolerance < 0) {\n\t\tthrow new Error(`${NAME}: Requires 0 ≤ tolerance ≤ 0.1`);\n\t}\n\n\treturn createTransform(NAME, async (doc: Document, context?: TransformContext): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tweldPrimitive(doc, prim, options);\n\t\t\t}\n\t\t}\n\n\t\t// TODO(perf): Suppose we just invoked simplify(), and dedup is not explicitly\n\t\t// in the transform stack .... now we are going to run it twice!\n\t\tif (!isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait doc.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**\n * Index a {@link Primitive} and (optionally) weld similar vertices. When merged\n * and indexed, data is shared more efficiently between vertices. File size can\n * be reduced, and the GPU can sometimes use the vertex cache more efficiently.\n *\n * When welding, the 'tolerance' threshold determines which vertices qualify for\n * welding based on distance between the vertices as a fraction of the primitive's\n * bounding box (AABB). For example, tolerance=0.01 welds vertices within +/-1%\n * of the AABB's longest dimension. Other vertex attributes are also compared\n * during welding, with attribute-specific thresholds. For --tolerance=0, geometry\n * is indexed in place, without merging.\n *\n * Example:\n *\n * ```javascript\n * import { weldPrimitive } from '@gltf-transform/functions';\n *\n * const mesh = document.getRoot().listMeshes()\n * \t.find((mesh) => mesh.getName() === 'Gizmo');\n *\n * for (const prim of mesh.listPrimitives()) {\n *   weldPrimitive(document, prim, {tolerance: 0.0001});\n * }\n * ```\n */\nexport function weldPrimitive(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tif (prim.getIndices() && !options.overwrite) return;\n\tif (prim.getMode() === Primitive.Mode.POINTS) return;\n\tif (options.tolerance === 0) {\n\t\t_indexPrimitive(doc, prim);\n\t} else {\n\t\t_weldPrimitive(doc, prim, options);\n\t}\n}\n\n/** @internal Adds indices, if missing. Does not merge vertices. */\nfunction _indexPrimitive(doc: Document, prim: Primitive): void {\n\t// No need to overwrite here, even if options.overwrite=true.\n\tif (prim.getIndices()) return;\n\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indices = doc\n\t\t.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(createIndices(numVertices));\n\tprim.setIndices(indices);\n}\n\n/** @internal Weld and merge, combining vertices that are similar on all vertex attributes. */\nfunction _weldPrimitive(doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst logger = doc.getLogger();\n\n\tconst srcPosition = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices() || doc.createAccessor().setArray(createIndices(srcPosition.getCount()));\n\tconst uniqueIndices = new Uint32Array(new Set(srcIndices.getArray()!));\n\n\t// (1) Compute per-attribute tolerances, pre-sort vertices.\n\n\tconst tolerance = Math.max(options.tolerance, Number.EPSILON);\n\tconst attributeTolerance: Record<string, number> = {};\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tattributeTolerance[semantic] = getAttributeTolerance(semantic, attribute, tolerance);\n\t}\n\n\tlogger.debug(`${NAME}: Tolerance thresholds: ${formatKV(attributeTolerance)}`);\n\n\tconst posA: vec3 = [0, 0, 0];\n\tconst posB: vec3 = [0, 0, 0];\n\n\tuniqueIndices.sort((a, b) => {\n\t\tsrcPosition.getElement(a, posA);\n\t\tsrcPosition.getElement(b, posB);\n\t\treturn posA[0] > posB[0] ? 1 : -1;\n\t});\n\n\t// (2) Compare and identify vertices to weld. Use sort to keep iterations below O(n²),\n\n\tconst weldMap = createIndices(uniqueIndices.length); // oldIndex → oldCommonIndex\n\tconst writeMap = createIndices(uniqueIndices.length); // oldIndex → newIndex\n\n\tconst srcVertexCount = srcPosition.getCount();\n\tlet dstVertexCount = 0;\n\tlet backIters = 0;\n\n\tfor (let i = 0; i < uniqueIndices.length; i++) {\n\t\tconst a = uniqueIndices[i];\n\n\t\tfor (let j = i - 1; j >= 0; j--) {\n\t\t\tconst b = weldMap[uniqueIndices[j]];\n\n\t\t\tsrcPosition.getElement(a, posA);\n\t\t\tsrcPosition.getElement(b, posB);\n\n\t\t\t// Sort order allows early exit on X-axis distance.\n\t\t\tif (Math.abs(posA[0] - posB[0]) > attributeTolerance['POSITION']) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbackIters++;\n\n\t\t\t// Weld if base attributes and morph target attributes match.\n\t\t\tconst isBaseMatch = prim.listSemantics().every((semantic) => {\n\t\t\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t});\n\t\t\tconst isTargetMatch = prim.listTargets().every((target) => {\n\t\t\t\treturn target.listSemantics().every((semantic) => {\n\t\t\t\t\tconst attribute = target.getAttribute(semantic)!;\n\t\t\t\t\tconst tolerance = attributeTolerance[semantic];\n\t\t\t\t\treturn compareAttributes(attribute, a, b, tolerance, semantic);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (isBaseMatch && isTargetMatch) {\n\t\t\t\tweldMap[a] = b;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Output the vertex if we didn't find a match, else record the index of the match.\n\t\tif (weldMap[a] === a) {\n\t\t\twriteMap[a] = dstVertexCount++; // note: reorders the primitive on x-axis sort.\n\t\t} else {\n\t\t\twriteMap[a] = writeMap[weldMap[a]];\n\t\t}\n\t}\n\n\tlogger.debug(`${NAME}: Iterations per vertex: ${Math.round(backIters / uniqueIndices.length)} (avg)`);\n\tlogger.debug(`${NAME}: ${formatDeltaOp(srcVertexCount, dstVertexCount)} vertices.`);\n\n\t// (3) Update indices.\n\n\tconst dstIndicesCount = srcIndices.getCount(); // # primitives does not change.\n\tconst dstIndicesArray = createIndices(dstIndicesCount, uniqueIndices.length);\n\tfor (let i = 0; i < dstIndicesCount; i++) {\n\t\tdstIndicesArray[i] = writeMap[srcIndices.getScalar(i)];\n\t}\n\tprim.setIndices(srcIndices.clone().setArray(dstIndicesArray));\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\t// (4) Update vertex attributes.\n\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, writeMap, dstVertexCount);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, writeMap, dstVertexCount);\n\t\t}\n\t}\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\tparent: Primitive | PrimitiveTarget,\n\tsrcAttr: Accessor,\n\treorder: Uint32Array | Uint16Array,\n\tdstCount: number\n): void {\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstCount * srcAttr.getElementSize());\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\tconst done = new Uint8Array(dstCount);\n\n\tfor (let i = 0, el = [] as number[]; i < reorder.length; i++) {\n\t\tif (!done[reorder[i]]) {\n\t\t\tdstAttr.setElement(reorder[i], srcAttr.getElement(i, el));\n\t\t\tdone[reorder[i]] = 1;\n\t\t}\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n\n\t// Clean up.\n\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n}\n\nconst _a = [] as number[];\nconst _b = [] as number[];\n\n/** Computes a per-attribute tolerance, based on domain and usage of the attribute. */\nfunction getAttributeTolerance(semantic: string, attribute: Accessor, tolerance: number): number {\n\t// Attributes like NORMAL and COLOR_# do not vary in range like POSITION,\n\t// so do not apply the given tolerance factor to these attributes.\n\tif (semantic === 'NORMAL' || semantic === 'TANGENT') return Tolerance.NORMAL;\n\tif (semantic.startsWith('COLOR_')) return Tolerance.COLOR;\n\tif (semantic.startsWith('TEXCOORD_')) return Tolerance.TEXCOORD;\n\tif (semantic.startsWith('JOINTS_')) return Tolerance.JOINTS;\n\tif (semantic.startsWith('WEIGHTS_')) return Tolerance.WEIGHTS;\n\n\t_a.length = _b.length = 0;\n\tattribute.getMinNormalized(_a);\n\tattribute.getMaxNormalized(_b);\n\tconst range = Math.max(..._b) - Math.min(..._a) || 1;\n\treturn tolerance * range;\n}\n\n/** Compares two vertex attributes against a tolerance threshold. */\nfunction compareAttributes(attribute: Accessor, a: number, b: number, tolerance: number, _semantic: string): boolean {\n\tattribute.getElement(a, _a);\n\tattribute.getElement(b, _b);\n\tfor (let i = 0, il = attribute.getElementSize(); i < il; i++) {\n\t\tif (Math.abs(_a[i] - _b[i]) > tolerance) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction formatKV(kv: Record<string, unknown>): string {\n\treturn Object.entries(kv)\n\t\t.map(([k, v]) => `${k}=${v}`)\n\t\t.join(', ');\n}\n","import { Accessor, Document, Primitive, PropertyType, Transform, TransformContext } from '@gltf-transform/core';\nimport {\n\tcreateTransform,\n\tformatDeltaOp,\n\tdeepListAttributes,\n\tremapAttribute,\n\tdeepSwapAttribute,\n\tisTransformPending,\n} from './utils';\nimport { weld } from './weld';\nimport type { MeshoptSimplifier } from 'meshoptimizer';\nimport { dedup } from './dedup';\n\nconst NAME = 'simplify';\n\n/** Options for the {@link simplify} function. */\nexport interface SimplifyOptions {\n\t/** MeshoptSimplifier instance. */\n\tsimplifier: unknown;\n\t/** Target ratio (0–1) of vertices to keep. Default: 0.5 (50%). */\n\tratio?: number;\n\t/** Limit on error, as a fraction of mesh radius. Default: 0.01 (1%). */\n\terror?: number;\n\t/**\n\t * Whether to lock topological borders of the mesh. May be necessary when\n\t * adjacent 'chunks' of a large mesh (e.g. terrain) share a border, helping\n\t * to ensure no seams appear.\n\t */\n\tlockBorder?: boolean;\n}\n\nexport const SIMPLIFY_DEFAULTS: Required<Omit<SimplifyOptions, 'simplifier'>> = {\n\tratio: 0.5,\n\terror: 0.001,\n\tlockBorder: false,\n};\n\n/**\n * Simplification algorithm, based on meshoptimizer, producing meshes with fewer\n * triangles and vertices. Simplification is lossy, but the algorithm aims to\n * preserve visual quality as much as possible for given parameters.\n *\n * The algorithm aims to reach the target 'ratio', while minimizing error. If\n * error exceeds the specified 'error' threshold, the algorithm will quit\n * before reaching the target ratio. Examples:\n *\n * - ratio=0.5, error=0.001: Aims for 50% simplification, constrained to 0.1% error.\n * - ratio=0.5, error=1: Aims for 50% simplification, unconstrained by error.\n * - ratio=0.0, error=0.01: Aims for maximum simplification, constrained to 1% error.\n *\n * Topology, particularly split vertices, will also limit the simplifier. For\n * best results, apply a {@link weld} operation before simplification.\n *\n * Example:\n *\n * ```javascript\n * import { simplify, weld } from '@gltf-transform/functions';\n * import { MeshoptSimplifier } from 'meshoptimizer';\n *\n * await document.transform(\n *   weld({ tolerance: 0.0001 }),\n *   simplify({ simplifier: MeshoptSimplifier, ratio: 0.75, error: 0.001 })\n * );\n * ```\n *\n * References:\n * - https://github.com/zeux/meshoptimizer/blob/master/js/README.md#simplifier\n */\nexport const simplify = (_options: SimplifyOptions): Transform => {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier | undefined;\n\n\tif (!simplifier) {\n\t\tthrow new Error(`${NAME}: simplifier dependency required — install \"meshoptimizer\".`);\n\t}\n\n\treturn createTransform(NAME, async (document: Document, context?: TransformContext): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tawait simplifier.ready;\n\t\tawait document.transform(weld({ overwrite: false }));\n\n\t\t// Simplify mesh primitives.\n\t\tfor (const mesh of document.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (prim.getMode() !== Primitive.Mode.TRIANGLES) {\n\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t`${NAME}: Skipping primitive of mesh \"${mesh.getName()}\": Requires TRIANGLES draw mode.`\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsimplifyPrimitive(document, prim, options);\n\t\t\t}\n\t\t}\n\n\t\t// Where multiple primitive indices point into the same vertex streams, simplification\n\t\t// may write duplicate streams. Find and remove the duplicates after processing.\n\t\tif (!isTransformPending(context, NAME, 'dedup')) {\n\t\t\tawait document.transform(dedup({ propertyTypes: [PropertyType.ACCESSOR] }));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nexport function simplifyPrimitive(document: Document, prim: Primitive, _options: SimplifyOptions): Primitive {\n\tconst options = { ...SIMPLIFY_DEFAULTS, ..._options } as Required<SimplifyOptions>;\n\tconst simplifier = options.simplifier as typeof MeshoptSimplifier;\n\n\tconst logger = document.getLogger();\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst srcIndices = prim.getIndices()!;\n\tconst srcVertexCount = position.getCount();\n\n\tlet positionArray = position.getArray()!;\n\tlet indicesArray = srcIndices.getArray()!;\n\n\t// (1) Gather attributes and indices in Meshopt-compatible format.\n\n\tif (position.getComponentType() !== Accessor.ComponentType.FLOAT) {\n\t\tif (position.getNormalized()) {\n\t\t\tconst src = positionArray;\n\t\t\tconst dst = new Float32Array(src.length);\n\n\t\t\t// Dequantize.\n\t\t\tfor (let i = 0, il = position.getCount(), el = [] as number[]; i < il; i++) {\n\t\t\t\tel = position.getElement(i, el);\n\t\t\t\tposition.setArray(dst).setElement(i, el).setArray(src);\n\t\t\t}\n\n\t\t\tpositionArray = dst;\n\t\t} else {\n\t\t\tpositionArray = new Float32Array(positionArray);\n\t\t}\n\t}\n\n\tif (srcIndices.getComponentType() !== Accessor.ComponentType.UNSIGNED_INT) {\n\t\tindicesArray = new Uint32Array(indicesArray);\n\t}\n\n\t// (2) Run simplification.\n\n\tconst targetCount = Math.floor((options.ratio * srcVertexCount) / 3) * 3;\n\tconst [dstIndicesArray, error] = simplifier.simplify(\n\t\tindicesArray as Uint32Array,\n\t\tpositionArray as Float32Array,\n\t\t3,\n\t\ttargetCount,\n\t\toptions.error,\n\t\toptions.lockBorder ? ['LockBorder'] : []\n\t);\n\n\tconst [remap, unique] = simplifier.compactMesh(dstIndicesArray);\n\n\tlogger.debug(`${NAME}: ${formatDeltaOp(position.getCount(), unique)} vertices, error: ${error.toFixed(4)}.`);\n\n\t// (3) Write vertex attributes.\n\n\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\tconst dstAttribute = srcAttribute.clone();\n\t\tremapAttribute(dstAttribute, remap, unique);\n\t\tdeepSwapAttribute(prim, srcAttribute, dstAttribute);\n\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t}\n\n\t// (4) Write indices.\n\n\tconst dstIndices = srcIndices.clone();\n\tdstIndices.setArray(srcVertexCount <= 65534 ? new Uint16Array(dstIndicesArray) : dstIndicesArray);\n\tprim.setIndices(dstIndices);\n\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\n\treturn prim;\n}\n","import type { Document, Texture } from '@gltf-transform/core';\nimport { Material, TextureChannel, PropertyType } from '@gltf-transform/core';\n\n/**\n * Returns a list of {@link TextureChannel TextureChannels} used by the given\n * texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel\n * in use. See {@link getTextureChannelMask} for bitmask alternative.\n *\n * Example:\n *\n * ```js\n * const channels = listTextureChannels(document, texture);\n * if (channels.includes(TextureChannel.R)) {\n *   console.log('texture red channel used');\n * }\n */\nexport function listTextureChannels(document: Document, texture: Texture): TextureChannel[] {\n\tconst mask = getTextureChannelMask(document, texture);\n\tconst channels = [];\n\tif (mask & TextureChannel.R) channels.push(TextureChannel.R);\n\tif (mask & TextureChannel.G) channels.push(TextureChannel.G);\n\tif (mask & TextureChannel.B) channels.push(TextureChannel.B);\n\tif (mask & TextureChannel.A) channels.push(TextureChannel.A);\n\treturn channels;\n}\n\n/**\n * Returns bitmask of all {@link TextureChannel TextureChannels} used by the\n * given texture. Determination is based only on the _role_ of the textures, e.g.\n * a texture used for the `occlusionTexture` will have (at least) a red channel.\n * See {@link listTextureChannels} for an array alternative.\n *\n * Example:\n *\n * ```js\n * const mask = getTextureChannelMask(document, texture);\n * if (mask & TextureChannel.R) {\n *   console.log('texture red channel used');\n * }\n * ```\n */\nexport function getTextureChannelMask(document: Document, texture: Texture): number {\n\tlet mask = 0x0000;\n\tfor (const edge of document.getGraph().listParentEdges(texture)) {\n\t\tconst parent = edge.getParent();\n\t\tlet { channels } = edge.getAttributes() as { channels: number | undefined };\n\n\t\tif (\n\t\t\tchannels &&\n\t\t\tedge.getName() === 'baseColorTexture' &&\n\t\t\tparent instanceof Material &&\n\t\t\tparent.getAlphaMode() === Material.AlphaMode.OPAQUE\n\t\t) {\n\t\t\tchannels &= ~TextureChannel.A;\n\t\t}\n\n\t\tif (channels) {\n\t\t\tmask |= channels;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\tdocument.getLogger().warn(`Missing attribute \".channels\" on edge, \"${edge.getName()}\".`);\n\t\t}\n\t}\n\treturn mask;\n}\n","import type { Document, Texture } from '@gltf-transform/core';\n\n/**\n * Returns names of all texture slots using the given texture.\n *\n * Example:\n *\n * ```js\n * const slots = listTextureSlots(document, texture);\n * // → ['occlusionTexture', 'metallicRoughnesTexture']\n * ```\n */\nexport function listTextureSlots(doc: Document, texture: Texture): string[] {\n\tconst root = doc.getRoot();\n\tconst slots = doc\n\t\t.getGraph()\n\t\t.listParentEdges(texture)\n\t\t.filter((edge) => edge.getParent() !== root)\n\t\t.map((edge) => edge.getName());\n\treturn Array.from(new Set(slots));\n}\n","import { Document, TextureChannel, Transform } from '@gltf-transform/core';\nimport { TextureWebP } from '@gltf-transform/extensions';\nimport { getTextureChannelMask } from './list-texture-channels';\nimport { listTextureSlots } from './list-texture-slots';\nimport type { SquooshLib } from './types/squoosh-lib';\nimport { formatBytes } from './utils';\n\nenum Codec {\n\tOXIPNG = 'oxipng',\n\tMOZJPEG = 'mozjpeg',\n\tWEBP = 'webp',\n}\n\nconst CODEC_TO_MIME_TYPE: Record<Codec, string> = {\n\t[Codec.OXIPNG]: 'image/png',\n\t[Codec.MOZJPEG]: 'image/jpeg',\n\t[Codec.WEBP]: 'image/webp',\n};\n\n// TODO(feat): There are _many_ other encoder options for each of the\n// codecs provided here, but the options are mostly undocumented. If\n// anyone is willing to contribute documentation on what the options\n// are, I'm happy to expose more here.\n// See: https://github.com/GoogleChromeLabs/squoosh/blob/dev/libsquoosh/src/codecs.ts\nexport interface SquooshOptions {\n\tsquoosh: unknown;\n\tjobs?: number;\n\tformats?: RegExp;\n\tslots?: RegExp;\n\tauto?: boolean;\n}\n\ninterface SquooshInternalOptions extends SquooshOptions {\n\tcodec: Codec;\n}\n\nconst SQUOOSH_DEFAULTS: Required<Omit<Omit<SquooshInternalOptions, 'codec'>, 'squoosh'>> = {\n\tjobs: 4,\n\tformats: /.*/,\n\tslots: /.*/,\n\tauto: false,\n};\n\nconst WEBP_DEFAULTS: Omit<SquooshInternalOptions, 'squoosh'> = {\n\t...SQUOOSH_DEFAULTS,\n\tcodec: Codec.WEBP,\n};\nconst MOZJPEG_DEFAULTS: Omit<SquooshInternalOptions, 'squoosh'> = {\n\t...SQUOOSH_DEFAULTS,\n\tcodec: Codec.MOZJPEG,\n\tformats: /^image\\/jpeg$/,\n};\nconst OXIPNG_DEFAULTS: Omit<SquooshInternalOptions, 'squoosh'> = {\n\t...SQUOOSH_DEFAULTS,\n\tcodec: Codec.OXIPNG,\n\tformats: /^image\\/png$/,\n};\n\nconst SUPPORTED_MIME_TYPES = ['image/jpeg', 'image/png', 'image/webp'];\n\nlet pool: SquooshLib.ImagePool | null = null;\nlet poolUsers = 0;\n\nconst requestImagePool = (squoosh: typeof SquooshLib, jobs: number): SquooshLib.ImagePool => {\n\tif (!pool) {\n\t\tpool = new squoosh.ImagePool(jobs);\n\t}\n\tpoolUsers++;\n\treturn pool;\n};\n\nconst releaseImagePool = (): void => {\n\tpoolUsers--;\n\tif (pool && poolUsers <= 0) {\n\t\tpool.close(); // Required for process to exit.\n\t\tpool = null;\n\t}\n};\n\n/** @internal Shared base for {@link webp()}, {@link mozjpeg()}, and {@link oxipng()}. */\nexport const squoosh = function (_options: SquooshInternalOptions): Transform {\n\tconst options = { ...SQUOOSH_DEFAULTS, ..._options } as Required<SquooshInternalOptions>;\n\tconst squoosh = options.squoosh as typeof SquooshLib | null;\n\tconst codec = options.codec;\n\n\tif (!squoosh) {\n\t\tthrow new Error(`${codec}: squoosh dependency required — install \"@squoosh/lib\".`);\n\t}\n\n\treturn async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\t\tconst textures = document.getRoot().listTextures();\n\t\tconst pool = requestImagePool(squoosh, options.jobs);\n\n\t\tawait Promise.all(\n\t\t\ttextures.map(async (texture, textureIndex) => {\n\t\t\t\tconst slots = listTextureSlots(document, texture);\n\t\t\t\tconst channels = getTextureChannelMask(document, texture);\n\t\t\t\tconst textureLabel =\n\t\t\t\t\ttexture.getURI() ||\n\t\t\t\t\ttexture.getName() ||\n\t\t\t\t\t`${textureIndex + 1}/${document.getRoot().listTextures().length}`;\n\t\t\t\tconst prefix = `${codec}:texture(${textureLabel})`;\n\n\t\t\t\t// FILTER: Exclude textures that don't match (a) 'slots' or (b) expected formats.\n\n\t\t\t\tif (!SUPPORTED_MIME_TYPES.includes(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!options.formats.test(texture.getMimeType())) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, \"${texture.getMimeType()}\" excluded by \"formats\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (slots.length && !slots.some((slot) => options.slots.test(slot))) {\n\t\t\t\t\tlogger.debug(`${prefix}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (options.codec === Codec.MOZJPEG && channels & TextureChannel.A) {\n\t\t\t\t\tlogger.warn(`${prefix}: Skipping, [${slots.join(', ')}] requires alpha channel.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(`${prefix}: Slots → [${slots.join(', ')}]`);\n\n\t\t\t\t// COMPRESS: Run `squoosh/lib` library.\n\n\t\t\t\tconst image = pool.ingestImage(texture.getImage()!);\n\t\t\t\tconst srcByteLength = texture.getImage()!.byteLength;\n\n\t\t\t\tawait image.encode({ [options.codec]: options.auto ? 'auto' : {} });\n\n\t\t\t\tconst encodedImage = await image.encodedWith[options.codec];\n\n\t\t\t\tlogger.debug(`${prefix}: ${JSON.stringify(encodedImage.optionsUsed)}`);\n\n\t\t\t\ttexture.setImage(encodedImage.binary).setMimeType(CODEC_TO_MIME_TYPE[options.codec]);\n\t\t\t\tconst dstByteLength = encodedImage.binary.byteLength;\n\n\t\t\t\tlogger.debug(`${prefix}: ${formatBytes(srcByteLength)} → ${formatBytes(dstByteLength)}`);\n\t\t\t})\n\t\t);\n\n\t\treleaseImagePool();\n\n\t\tlogger.debug(`${codec}: Complete.`);\n\t};\n};\n\n/**\n * Converts images to WebP, using the {@link TextureWebP} extension.\n *\n * Requires `@squoosh/lib`, and currently works only in Node.js\n * environments. Support for encoding in web browsers may be available pending\n * [GoogleChromeLabs/squoosh#1084](https://github.com/GoogleChromeLabs/squoosh/issues/1084).\n *\n * Example:\n *\n * ```javascript\n * import { cpus } from 'os';\n * import * as squoosh from '@squoosh/lib';\n * import { webp } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \twebp({ squoosh, jobs: cpus().length })\n * );\n * ```\n */\nexport const webp = function (options: SquooshOptions): Transform {\n\tconst _options = { ...WEBP_DEFAULTS, ...options } as SquooshInternalOptions;\n\treturn async (document: Document): Promise<void> => {\n\t\tawait squoosh(_options)(document);\n\n\t\t// Attach EXT_texture_web if needed.\n\t\tconst textures = document.getRoot().listTextures();\n\t\tif (textures.some((texture) => texture.getMimeType() === CODEC_TO_MIME_TYPE[Codec.WEBP])) {\n\t\t\tdocument.createExtension(TextureWebP).setRequired(true);\n\t\t}\n\t};\n};\n\n/**\n * Optimizes JPEG images by default, optionally converting PNG textures to JPEG.\n *\n * Requires `@squoosh/lib`, and currently works only in Node.js\n * environments. Support for encoding in web browsers may be available pending\n * [GoogleChromeLabs/squoosh#1084](https://github.com/GoogleChromeLabs/squoosh/issues/1084).\n *\n * Example:\n *\n * ```javascript\n * import { cpus } from 'os';\n * import * as squoosh from '@squoosh/lib';\n * import { mozjpeg } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \tmozjpeg({ squoosh, jobs: cpus().length })\n * );\n * ```\n */\nexport const mozjpeg = function (options: SquooshOptions): Transform {\n\tconst _options = { ...MOZJPEG_DEFAULTS, ...options } as SquooshInternalOptions;\n\treturn (document: Document): void => {\n\t\treturn squoosh(_options)(document);\n\t};\n};\n\n/**\n * Optimizes PNG images by default, optionally converting JPEG textures to PNG.\n *\n * Requires `@squoosh/lib`, and currently works only in Node.js\n * environments. Support for encoding in web browsers may be available pending\n * [GoogleChromeLabs/squoosh#1084](https://github.com/GoogleChromeLabs/squoosh/issues/1084).\n *\n * Example:\n *\n * ```javascript\n * import { cpus } from 'os';\n * import * as squoosh from '@squoosh/lib';\n * import { oxipng } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \toxipng({ squoosh, jobs: cpus().length })\n * );\n * ```\n */\nexport const oxipng = function (options: SquooshOptions): Transform {\n\tconst _options = { ...OXIPNG_DEFAULTS, ...options } as SquooshInternalOptions;\n\treturn (document: Document): void => {\n\t\treturn squoosh(_options)(document);\n\t};\n};\n","import { Accessor, Document, ILogger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array;\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean;\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n */\nexport function tangents(_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = { ...TANGENTS_DEFAULTS, ..._options } as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor().setBuffer(tangentBuffer).setArray(tangentArray).setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(prim: Primitive, logger: ILogger, meshName: string, i: number, overwrite: boolean): boolean {\n\tif (\n\t\tprim.getMode() !== Primitive.Mode.TRIANGLES ||\n\t\t!prim.getAttribute('POSITION') ||\n\t\t!prim.getAttribute('NORMAL') ||\n\t\t!prim.getAttribute('TEXCOORD_0')\n\t) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` +\n\t\t\t\t' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must` + ' be unwelded.');\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport type { Document, Transform, vec2 } from '@gltf-transform/core';\nimport { listTextureSlots } from './list-texture-slots';\nimport { createTransform } from './utils';\n\nconst NAME = 'textureResize';\n\n/** Options for the {@link textureResize} function. */\nexport interface TextureResizeOptions {\n\t/**\n\t * Maximum width/height to enforce, preserving aspect ratio. For example,\n\t * a 4096x8192 texture, resized with limit [2048, 2048] will be reduced\n\t * to 1024x2048.\n\t */\n\tsize: vec2;\n\t/** Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother. */\n\tfilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to resize, matched to name or URI. */\n\tpattern?: RegExp | null;\n\t/** Pattern to match slots usage for resizing. */\n\tslots?: RegExp | null;\n}\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport const TEXTURE_RESIZE_DEFAULTS: TextureResizeOptions = {\n\tsize: [2048, 2048],\n\tfilter: TextureResizeFilter.LANCZOS3,\n\tpattern: null,\n\tslots: null,\n};\n\n/**\n * Resize PNG or JPEG {@link Texture Textures}, with {@link https://en.wikipedia.org/wiki/Lanczos_algorithm Lanczos filtering}.\n * Implementation provided by {@link https://github.com/donmccurdy/ndarray-lanczos ndarray-lanczos} package.\n */\nexport function textureResize(_options: TextureResizeOptions = TEXTURE_RESIZE_DEFAULTS): Transform {\n\tconst options = { ...TEXTURE_RESIZE_DEFAULTS, ..._options } as Required<TextureResizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tconst name = texture.getName();\n\t\t\tconst uri = texture.getURI();\n\t\t\tconst match = !options.pattern || options.pattern.test(name) || options.pattern.test(uri);\n\t\t\tif (!match) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, excluded by \"pattern\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (texture.getMimeType() !== 'image/png' && texture.getMimeType() !== 'image/jpeg') {\n\t\t\t\tlogger.warn(`${NAME}: Skipping, unsupported texture type \"${texture.getMimeType()}\".`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst slots = listTextureSlots(doc, texture);\n\t\t\tif (options.slots && !slots.some((slot) => options.slots?.test(slot))) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, [${slots.join(', ')}] excluded by \"slots\" parameter.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [maxWidth, maxHeight] = options.size;\n\t\t\tconst [srcWidth, srcHeight] = texture.getSize()!;\n\n\t\t\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping, not within size range.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet dstWidth = srcWidth;\n\t\t\tlet dstHeight = srcHeight;\n\n\t\t\tif (dstWidth > maxWidth) {\n\t\t\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\t\t\tdstWidth = maxWidth;\n\t\t\t}\n\n\t\t\tif (dstHeight > maxHeight) {\n\t\t\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\t\t\tdstHeight = maxHeight;\n\t\t\t}\n\n\t\t\tconst srcImage = texture.getImage()!;\n\t\t\tconst srcPixels = await getPixels(srcImage, texture.getMimeType());\n\t\t\tconst dstPixels = ndarray(new Uint8Array(dstWidth * dstHeight * 4), [dstWidth, dstHeight, 4]);\n\n\t\t\tlogger.debug(`${NAME}: Resizing \"${uri || name}\", ${srcPixels.shape} → ${dstPixels.shape}...`);\n\t\t\tlogger.debug(`${NAME}: Slots → [${slots.join(', ')}]`);\n\n\t\t\ttry {\n\t\t\t\toptions.filter === TextureResizeFilter.LANCZOS3\n\t\t\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tlogger.warn(`${NAME}: Failed to resize \"${uri || name}\": \"${e.message}\".`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttexture.setImage(await savePixels(dstPixels, texture.getMimeType()));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n","import { vec3, mat4, Accessor, Primitive, vec4, Mesh, PropertyType, PrimitiveTarget } from '@gltf-transform/core';\nimport { create as createMat3, fromMat4, invert, transpose } from 'gl-matrix/mat3';\nimport { create as createVec3, normalize as normalizeVec3, transformMat3, transformMat4 } from 'gl-matrix/vec3';\nimport { create as createVec4 } from 'gl-matrix/vec4';\nimport { createIndices, deepListAttributes } from './utils';\n\n/**\n * Applies a transform matrix to every {@link Primitive} in the given {@link Mesh}.\n *\n * Method:\n * - If any primitives are shared by other meshes, they will be detached.\n * - If any vertex streams are shared by primitives of other meshes, vertex data\n *  will be overwritten unless _overwrite=false_ or the indices are masked. If\n * \t_overwrite=false_, a detached copy of the vertex stream is made before applying\n * \tthe transform.\n * - Primitives within the mesh sharing vertex streams will continue to share those streams.\n * - For indexed primitives, only indexed vertices are modified.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformMesh } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformMesh(mesh, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param mesh\n * @param matrix\n * @param overwrite Whether to overwrite vertex streams in place. If false,\n * \t\tstreams shared with other meshes will be detached.\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformMesh(mesh: Mesh, matrix: mat4, overwrite = false, skipIndices?: Set<number>): void {\n\t// (1) Detach shared prims.\n\tfor (const srcPrim of mesh.listPrimitives()) {\n\t\tconst isShared = srcPrim.listParents().some((p) => p.propertyType === PropertyType.MESH && p !== mesh);\n\t\tif (isShared) {\n\t\t\tconst dstPrim = srcPrim.clone();\n\t\t\tmesh.swap(srcPrim, dstPrim);\n\n\t\t\tfor (const srcTarget of dstPrim.listTargets()) {\n\t\t\t\tconst dstTarget = srcTarget.clone();\n\t\t\t\tdstPrim.swap(srcTarget, dstTarget);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (2) Detach shared vertex streams.\n\tif (!overwrite) {\n\t\tconst parents = new Set<Primitive | PrimitiveTarget>([\n\t\t\t...mesh.listPrimitives(),\n\t\t\t...mesh.listPrimitives().flatMap((prim) => prim.listTargets()),\n\t\t]);\n\t\tconst attributes = new Map<Accessor, Accessor>();\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tfor (const srcAttribute of deepListAttributes(prim)) {\n\t\t\t\tconst isShared = srcAttribute\n\t\t\t\t\t.listParents()\n\t\t\t\t\t.some((a) => (a instanceof Primitive || a instanceof PrimitiveTarget) && !parents.has(a));\n\t\t\t\tif (isShared && !attributes.has(srcAttribute)) {\n\t\t\t\t\tattributes.set(srcAttribute, srcAttribute.clone());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const parent of parents) {\n\t\t\tfor (const [srcAttribute, dstAttribute] of attributes) {\n\t\t\t\tparent.swap(srcAttribute, dstAttribute);\n\t\t\t}\n\t\t}\n\t}\n\n\t// (3) Apply transform.\n\tskipIndices = skipIndices || new Set<number>();\n\tfor (const prim of mesh.listPrimitives()) {\n\t\ttransformPrimitive(prim, matrix, skipIndices);\n\t}\n}\n\n/**\n * Applies a transform matrix to a {@link Primitive}.\n *\n * When calling {@link transformPrimitive}, any un-masked vertices are overwritten\n * directly in the underlying vertex streams. If streams should be detached instead,\n * see {@link transformMesh}.\n *\n * Example:\n *\n * ```javascript\n * import { fromTranslation } from 'gl-matrix/mat4';\n * import { transformPrimitive } from '@gltf-transform/functions';\n *\n * // offset vertices, y += 10.\n * transformPrimitive(prim, fromTranslation([], [0, 10, 0]));\n * ```\n *\n * @param prim\n * @param matrix\n * @param skipIndices Vertices, specified by index, to be _excluded_ from the transformation.\n */\nexport function transformPrimitive(prim: Primitive, matrix: mat4, skipIndices = new Set<number>()): void {\n\tconst position = prim.getAttribute('POSITION')!;\n\tconst indices = (prim.getIndices()?.getArray() || createIndices(position!.getCount())) as Uint32Array;\n\n\t// Apply transform to base attributes.\n\tif (position) {\n\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t}\n\n\tconst normal = prim.getAttribute('NORMAL');\n\tif (normal) {\n\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t}\n\n\tconst tangent = prim.getAttribute('TANGENT');\n\tif (tangent) {\n\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t}\n\n\t// Apply transform to morph attributes.\n\tfor (const target of prim.listTargets()) {\n\t\tconst position = target.getAttribute('POSITION');\n\t\tif (position) {\n\t\t\tapplyMatrix(matrix, position, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst normal = target.getAttribute('NORMAL');\n\t\tif (normal) {\n\t\t\tapplyNormalMatrix(matrix, normal, indices, new Set(skipIndices));\n\t\t}\n\n\t\tconst tangent = target.getAttribute('TANGENT');\n\t\tif (tangent) {\n\t\t\tapplyTangentMatrix(matrix, tangent, indices, new Set(skipIndices));\n\t\t}\n\t}\n\n\t// Update mask.\n\tfor (let i = 0; i < indices.length; i++) skipIndices.add(indices[i]);\n}\n\nfunction applyMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\t// An arbitrary transform may not keep vertex positions in the required\n\t// range of a normalized attribute. Replace the array, instead.\n\tconst dstArray = new Float32Array(attribute.getCount() * 3);\n\tconst elementSize = attribute.getElementSize();\n\n\tfor (let i = 0, el: number[] = [], il = attribute.getCount(); i < il; i++) {\n\t\tdstArray.set(attribute.getElement(i, el), i * elementSize);\n\t}\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat4(vector, vector, matrix);\n\t\tdstArray.set(vector, index * 3);\n\n\t\tskipIndices.add(index);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n\nfunction applyNormalMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst normalMatrix = createMat3();\n\tfromMat4(normalMatrix, matrix);\n\tinvert(normalMatrix, normalMatrix);\n\ttranspose(normalMatrix, normalMatrix);\n\n\tconst vector = createVec3() as vec3;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, vector);\n\t\ttransformMat3(vector, vector, normalMatrix);\n\t\tnormalizeVec3(vector, vector);\n\t\tattribute.setElement(index, vector);\n\n\t\tskipIndices.add(index);\n\t}\n}\n\nfunction applyTangentMatrix(matrix: mat4, attribute: Accessor, indices: Uint32Array, skipIndices: Set<number>) {\n\tconst v3 = createVec3() as vec3;\n\tconst v4 = createVec4() as vec4;\n\tfor (let i = 0; i < indices.length; i++) {\n\t\tconst index = indices[i];\n\t\tif (skipIndices.has(index)) continue;\n\n\t\tattribute.getElement(index, v4);\n\n\t\t// mat4 affine matrix applied to vector, vector interpreted as a direction.\n\t\t// Reference: https://github.com/mrdoob/three.js/blob/9f4de99828c05e71c47e6de0beb4c6e7652e486a/src/math/Vector3.js#L286-L300\n\t\tconst [x, y, z] = v4;\n\t\tv3[0] = matrix[0] * x + matrix[4] * y + matrix[8] * z;\n\t\tv3[1] = matrix[1] * x + matrix[5] * y + matrix[9] * z;\n\t\tv3[2] = matrix[2] * x + matrix[6] * y + matrix[10] * z;\n\t\tnormalizeVec3(v3, v3);\n\n\t\t(v4[0] = v3[0]), (v4[1] = v3[1]), (v4[2] = v3[2]);\n\n\t\tattribute.setElement(index, v4);\n\n\t\tskipIndices.add(index);\n\t}\n}\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { MaterialsUnlit } from '@gltf-transform/extensions';\n\nexport const unlit = (): Transform => {\n\treturn (doc: Document): void => {\n\t\tconst unlitExtension = doc.createExtension(MaterialsUnlit) as MaterialsUnlit;\n\t\tconst unlit = unlitExtension.createUnlit();\n\t\tdoc.getRoot()\n\t\t\t.listMaterials()\n\t\t\t.forEach((material) => {\n\t\t\t\tmaterial.setExtension('KHR_materials_unlit', unlit);\n\t\t\t});\n\t};\n};\n","import type { Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'unpartition';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnpartitionOptions {}\nconst UNPARTITION_DEFAULTS: Required<UnpartitionOptions> = {};\n\n/**\n * Removes partitions from the binary payload of a glTF file, so that the asset\n * contains at most one (1) `.bin` {@link Buffer}. This process reverses the\n * changes from a {@link partition} transform.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n *\n * await document.transform(unpartition());\n *\n * document.getRoot().listBuffers(); // → [Buffer]\n * ```\n */\nconst unpartition = (_options: UnpartitionOptions = UNPARTITION_DEFAULTS): Transform => {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = { ...UNPARTITION_DEFAULTS, ..._options } as Required<UnpartitionOptions>;\n\n\treturn createTransform(NAME, async (document: Document): Promise<void> => {\n\t\tconst logger = document.getLogger();\n\n\t\tconst buffer = document.getRoot().listBuffers()[0];\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listAccessors()\n\t\t\t.forEach((a) => a.setBuffer(buffer));\n\t\tdocument\n\t\t\t.getRoot()\n\t\t\t.listBuffers()\n\t\t\t.forEach((b, index) => (index > 0 ? b.dispose() : null));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nexport { unpartition };\n","import { Document, Texture, TextureInfo } from '@gltf-transform/core';\n\n/**\n * Lists all {@link TextureInfo} definitions associated with a given {@link Texture}.\n *\n * Example:\n *\n * ```js\n * // Find TextureInfo instances associated with the texture.\n * const results = listTextureInfo(document, texture);\n *\n * // Find which UV sets (TEXCOORD_0, TEXCOORD_1, ...) are required.\n * const texCoords = results.map((info) => info.getTexCoord());\n * // → [0, 0, 1]\n * ```\n */\nexport function listTextureInfo(document: Document, texture: Texture): TextureInfo[] {\n\tconst graph = document.getGraph();\n\tconst results: TextureInfo[] = [];\n\n\tfor (const textureEdge of graph.listParentEdges(texture)) {\n\t\tconst parent = textureEdge.getParent();\n\t\tconst name = textureEdge.getName() + 'Info';\n\n\t\tfor (const edge of graph.listChildEdges(parent)) {\n\t\t\tconst child = edge.getChild();\n\t\t\tif (child instanceof TextureInfo && edge.getName() === name) {\n\t\t\t\tresults.push(child);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn results;\n}\n"],"names":["createTransform","name","fn","Object","defineProperty","value","isTransformPending","context","initial","pending","stack","lastIndexOf","rewriteTexture","source","target","srcImage","getImage","pixels","getPixels","getMimeType","i","shape","j","dstImage","savePixels","setImage","setMimeType","SetMap","_map","Map","size","has","k","add","v","entry","this","get","Set","set","keys","formatBytes","bytes","decimals","dm","Math","floor","log","parseFloat","pow","toFixed","formatLong","x","toString","replace","formatDeltaOp","a","b","abs","formatDelta","deepListAttributes","prim","accessors","attribute","listAttributes","push","listTargets","Array","from","deepSwapAttribute","src","dst","swap","remapAttribute","remap","dstCount","elementSize","getElementSize","srcCount","getCount","srcArray","getArray","dstArray","slice","setArray","createIndices","count","maxIndex","array","Uint16Array","Uint32Array","length","CENTER_DEFAULTS","pivot","center","_options","options","doc","logger","getLogger","root","getRoot","isAnimated","listAnimations","listSkins","listScenes","forEach","scene","index","debug","bbox","bounds","max","min","join","offset","offsetNode","createNode","setTranslation","listChildren","child","addChild","t","getTranslation","NAME","colorspace","inputEncoding","info","error","converted","sRGBToLinear","c","updatePrimitive","primitive","color","getAttribute","getElement","setElement","listMeshes","mesh","listPrimitives","DEDUP_DEFAULTS","propertyTypes","PropertyType","ACCESSOR","MESH","TEXTURE","MATERIAL","dedup","propertyType","includes","Error","indicesAccessors","attributeAccessors","inputAccessors","outputAccessors","meshes","accessor","indices","getIndices","animation","sampler","listSamplers","input","getInput","output","getOutput","detectDuplicates","duplicateAccessors","aData","BufferUtils","toView","getType","getComponentType","getNormalized","equals","duplicateIndices","duplicateAttributes","duplicateInputs","duplicateOutputs","dispose","dedupAccessors","textures","listTextures","duplicates","bData","aSize","getSize","bSize","entries","listParents","property","Root","dedupImages","materials","listMaterials","skip","dedupMaterials","refs","listAccessors","material","numMeshes","uniqueMeshes","srcKeyItems","createPrimitiveKey","meshKey","targetMesh","parent","ROOT","dedupMeshes","primKeyItems","semantic","listSemantics","Primitive","getMaterial","getMode","DEQUANTIZE_DEFAULTS","pattern","dequantize","dequantizePrimitive","createExtension","MeshQuantization","dequantizeAttribute","test","getComponentSize","Float32Array","il","el","setNormalized","DRACO_DEFAULTS","method","encodeSpeed","decodeSpeed","quantizePosition","quantizeNormal","quantizeColor","quantizeTexcoord","quantizeGeneric","quantizationVolume","draco","DracoMeshCompression","setRequired","setEncoderOptions","EncoderMethod","EDGEBREAKER","SEQUENTIAL","quantizationBits","POSITION","NORMAL","COLOR","TEX_COORD","GENERIC","inspect","scenes","animations","properties","map","sceneBounds","getName","rootName","bboxMin","toPrecision","bboxMax","instances","filter","glPrimitives","verts","semantics","meshIndices","meshAccessors","attr","accessorToTypeLabel","targ","position","Mode","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","getGLPrimitiveCount","byteLength","modes","MeshPrimitiveModeLabels","mode","primitives","vertices","sort","attributes","extensions","listExtensions","slots","getGraph","listEdges","ref","getChild","getParent","Texture","ExtensionProperty","alphaMode","getAlphaMode","doubleSided","getDoubleSided","texture","listParentEdges","edge","resolution","ImageUtils","compression","dfd","readKTX","dataFormatDescriptor","colorModel","KHR_DF_MODEL_ETC1S","KHR_DF_MODEL_UASTC","uri","getURI","mimeType","gpuSize","getMemSize","anim","minTime","Infinity","maxTime","getMin","getMax","keyframes","channels","listChannels","samplers","duration","round","NumericTypeLabels","Uint8Array","Int32Array","Int16Array","Int8Array","Number","constructor","INSTANCE_DEFAULTS","instance","batchExtension","MeshGPUInstancing","warn","numBatches","numInstances","meshInstances","traverse","node","getMesh","modifiedNodes","nodes","some","getSkin","batch","createBatch","batchTranslation","batchRotation","batchScale","batchNode","setMesh","setExtension","needsTranslation","needsRotation","needsScale","r","s","getWorldTranslation","getWorldRotation","getWorldScale","MathUtils","eq","pruneUnusedNodes","listProperties","unusedNodes","pop","getCamera","nodeParent","Node","buffer","getBuffer","createAccessor","setType","setBuffer","createInstancedMesh","setAttribute","PRUNE_DEFAULTS","NODE","SKIN","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","keepLeaves","keepAttributes","prune","graph","disposed","nodeTreeShake","prop","Scene","isUsed","e","ptype","SCENE","markDisposed","listNodes","treeShake","listCameras","indirectTreeShake","required","listRequiredSemantics","unused","listUnusedSemantics","pruneAttributes","channel","getTargetNode","listBuffers","str","p","AnimationChannel","startsWith","document","edges","listChildEdges","textureNames","TextureInfo","getTexCoord","match","REORDER_DEFAULTS","reorder","encoder","async","ready","plan","createLayoutPlan","srcIndices","indicesToAttributes","dstIndices","clone","indicesArray","unique","reorderMesh","indicesToMode","srcAttribute","dstAttribute","attributesToPrimitives","transform","sortPrimitiveWeights","limit","isFinite","vertexCount","setCount","srcWeights","dstWeights","srcJoints","dstJoints","getVertexArray","setVertexArray","weights","joints","normList","typeList","isNormalizeSafe","templateAttribute","templateArray","componentType","normalized","normalizedComponentType","undefined","delta","denormalize","EPSILON","fill","weightsSum","sum","intValue","normalize","normalizePrimitiveWeights","vertexIndex","prefix","values","SIGNED_INT","TRANSLATION","ROTATION","SCALE","WEIGHTS","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizeWeight","normalizeWeights","quantize","nodeTransform","getNodeTransform","bboxes","result","expandBounds","getPositionQuantizationVolume","transformMeshParents","transformMeshMaterials","scale","quantizePrimitive","bits","ctor","getQuantizationSettings","invert","fromTransform","fromScaling","transformMat4","quantizeAttribute","volume","transformMatrix","animChannels","getTargetPath","isParentNode","setSkin","transformSkin","targetNode","setTargetNode","nodeMatrix","getMatrix","multiplyMat4","setMatrix","skin","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","getExtension","getThicknessFactor","setThicknessFactor","setMaterial","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","lo","hi","di","sign","getMinNormalized","getMaxNormalized","positions","relativePositions","flatBounds","relMin","relMax","tmpMin","tmpMax","fromRotationTranslationScale","MESHOPT_DEFAULTS","level","meshopt","MeshoptCompression","QUANTIZE","FILTER","METALROUGH_DEFAULTS","metalRough","listExtensionsUsed","ext","extensionName","iorExtension","MaterialsIOR","specExtension","MaterialsSpecular","specGlossExtension","MaterialsPBRSpecularGlossiness","inputTextures","specGloss","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","setBaseColorFactor","getDiffuseFactor","setMetallicFactor","setRoughnessFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","tex","UNWELD_DEFAULTS","unweld","visited","srcVertexCount","unweldAttribute","dstVertexCount","setIndices","ArrayCtor","getScalar","NORMALS_DEFAULTS","overwrite","normals","modified","normal","faceNormal","computeNormal","A","B","PARTITION_DEFAULTS","partition","existingURIs","meshIndex","isArray","createBuffer","setURI","createBufferURI","primTarget","partitionMeshes","animIndex","partitionAnimations","basename","existing","RESAMPLE_DEFAULTS","tolerance","resample","accessorsVisited","srcAccessorCount","didSkipMorphTargets","samplerTargetPaths","getSampler","getInterpolation","optimize","path","interpolation","lastIndex","tmp","valueNext","valuePrev","writeIndex","timePrev","time","timeNext","keep","sample","slerp","angle","getAngle","PI","vlerp","setScalar","setInput","setOutput","lerp","v0","v1","out","SEQUENCE_DEFAULTS","fps","sequence","sequenceNodes","createAnimation","animBuffer","inputArray","outputArray","Accessor","Type","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","WELD_DEFAULTS","weld","weldPrimitive","numVertices","SCALAR","_indexPrimitive","srcPosition","uniqueIndices","attributeTolerance","getAttributeTolerance","kv","posA","posB","weldMap","writeMap","backIters","isBaseMatch","every","compareAttributes","isTargetMatch","dstIndicesCount","dstIndicesArray","srcAttr","swapAttributes","_weldPrimitive","dstAttrArray","dstAttr","done","_a","_b","_semantic","SIMPLIFY_DEFAULTS","ratio","lockBorder","simplify","simplifier","simplifyPrimitive","positionArray","ComponentType","FLOAT","UNSIGNED_INT","targetCount","compactMesh","listTextureChannels","mask","getTextureChannelMask","TextureChannel","R","G","getAttributes","Material","AlphaMode","OPAQUE","listTextureSlots","Codec","CODEC_TO_MIME_TYPE","[object Object]","OXIPNG","MOZJPEG","WEBP","SQUOOSH_DEFAULTS","jobs","formats","auto","WEBP_DEFAULTS","codec","MOZJPEG_DEFAULTS","OXIPNG_DEFAULTS","SUPPORTED_MIME_TYPES","pool","poolUsers","requestImagePool","squoosh","ImagePool","releaseImagePool","close","Promise","all","textureIndex","textureLabel","slot","image","ingestImage","srcByteLength","encode","encodedImage","encodedWith","JSON","stringify","optionsUsed","binary","dstByteLength","webp","TextureWebP","mozjpeg","oxipng","TANGENTS_DEFAULTS","tangents","generateTangents","attributeIDs","tangentCache","meshName","meshPrimitives","filterPrimitive","texcoordSemantic","getNormalTexcoord","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangent","tangentBuffer","tangentArray","normalTextureInfo","getNormalTextureInfo","TextureResizeFilter","TEXTURE_RESIZE_DEFAULTS","LANCZOS3","textureResize","_options$slots","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","srcPixels","dstPixels","ndarray","lanczos3","lanczos2","message","transformMesh","matrix","skipIndices","srcPrim","dstPrim","srcTarget","dstTarget","parents","flatMap","PrimitiveTarget","transformPrimitive","applyMatrix","applyNormalMatrix","applyTangentMatrix","vector","createVec3","normalMatrix","createMat3","fromMat4","transpose","transformMat3","normalizeVec3","v3","v4","createVec4","y","z","unlit","MaterialsUnlit","createUnlit","UNPARTITION_DEFAULTS","unpartition","listTextureInfo","results","textureEdge"],"mappings":"u7CASgBA,GAAgBC,EAAcC,GAE7C,OADAC,OAAOC,eAAeF,EAAI,OAAQ,CAAEG,MAAOJ,IACpCC,WAGQI,GAAmBC,EAAuCC,EAAiBC,GAC1F,QAAKF,GACgBA,EAAQG,MAAMC,YAAYH,GAC1BD,EAAQG,MAAMC,YAAYF,kBAK1BG,GACrBC,EACAC,EACAZ,GAEA,IAAKW,EAAQ,YAEb,MAAME,EAAWF,EAAOG,WACxB,IAAKD,EAAU,YAEf,MAAME,QAAeC,EAAUH,EAAUF,EAAOM,eAEhD,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOI,MAAM,KAAMD,EACtC,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAOI,MAAM,KAAMC,EACtCpB,EAAGe,EAAQG,EAAGE,GAIhB,MAAMC,QAAiBC,EAAWP,EAAQ,aAC1C,OAAOH,EAAOW,SAASF,GAAUG,YAAY,mBA2BjCC,sBACJC,KAAO,IAAIC,IACJC,WACd,YAAYF,KAAKE,KAEXC,IAAIC,GACV,YAAYJ,KAAKG,IAAIC,GAEfC,IAAID,EAAME,GAChB,IAAIC,EAAQC,KAAKR,KAAKS,IAAIL,GAM1B,OALKG,IACJA,EAAQ,IAAIG,IACZF,KAAKR,KAAKW,IAAIP,EAAGG,IAElBA,EAAMF,IAAIC,QAGJG,IAAIL,GACV,YAAYJ,KAAKS,IAAIL,IAAM,IAAIM,IAEzBE,OACN,YAAYZ,KAAKY,iBAIHC,GAAYC,EAAeC,EAAW,GACrD,GAAc,IAAVD,EAAa,MAAO,UAExB,MACME,EAAKD,EAAW,EAAI,EAAIA,EAGxBvB,EAAIyB,KAAKC,MAAMD,KAAKE,IAAIL,GAASG,KAAKE,IAJlC,MAMV,OAAOC,YAAYN,EAAQG,KAAKI,IANtB,IAM6B7B,IAAI8B,QAAQN,IAAO,IAJ5C,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAIIxB,YAGvD+B,GAAWC,GAC1B,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,cAStCC,GAAcC,EAAWC,GACxC,SAAUN,GAAWK,QAAQL,GAAWM,gBAPbD,EAAWC,EAAWd,EAAW,GAG5D,OAFea,EAAIC,EAAI,IAAM,MAEXZ,KAAKa,IAAIF,EAAIC,GAAKD,EAAK,KAAKN,QAAQP,GADvC,IAKgCgB,CAAYH,EAAGC,eAO/CG,GAAmBC,GAClC,MAAMC,EAAwB,GAE9B,IAAK,MAAMC,KAAaF,EAAKG,iBAC5BF,EAAUG,KAAKF,GAEhB,IAAK,MAAMjD,KAAU+C,EAAKK,cACzB,IAAK,MAAMH,KAAajD,EAAOkD,iBAC9BF,EAAUG,KAAKF,GAIjB,OAAOI,MAAMC,KAAK,IAAI9B,IAAIwB,aAGXO,GAAkBR,EAAiBS,EAAeC,GACjEV,EAAKW,KAAKF,EAAKC,GACf,IAAK,MAAMzD,KAAU+C,EAAKK,cACzBpD,EAAO0D,KAAKF,EAAKC,YAIHE,GAAeV,EAAqBW,EAAoBC,GACvE,MAAMC,EAAcb,EAAUc,iBACxBC,EAAWf,EAAUgB,WACrBC,EAAWjB,EAAUkB,WACrBC,EAAWF,EAASG,MAAM,EAAGR,EAAWC,GAE9C,IAAK,IAAIxD,EAAI,EAAGA,EAAI0D,EAAU1D,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAIsD,EAAatD,IAChC4D,EAASR,EAAMtD,GAAKwD,EAActD,GAAK0D,EAAS5D,EAAIwD,EAActD,GAIpEyC,EAAUqB,SAASF,YAGJG,GAAcC,EAAeC,EAAWD,GACvD,MAAME,EAAQD,GAAY,MAAQ,IAAIE,YAAYH,GAAS,IAAII,YAAYJ,GAC3E,IAAK,IAAIlE,EAAI,EAAGA,EAAIoE,EAAMG,OAAQvE,IAAKoE,EAAMpE,GAAKA,EAClD,OAAOoE,EC/JR,MAQMI,GAA2C,CAAEC,MAAO,mBAY1CC,GAAOC,EAA0BH,IAChD,MAAMI,QAAeJ,GAAoBG,GAEzC,OAAO/F,GAvBK,SAuBkBiG,IAC7B,MAAMC,EAASD,EAAIE,YACbC,EAAOH,EAAII,UACXC,EAAaF,EAAKG,iBAAiBZ,OAAS,GAAKS,EAAKI,YAAYb,OAAS,EAEjFM,EAAII,UACFI,aACAC,QAAQ,CAACC,EAAOC,KAGhB,IAAIf,EACJ,GAHAK,EAAOW,uBAAwBD,EAAQ,OAAOR,EAAKK,aAAad,WAGnC,iBAAlBK,EAAQH,MAAoB,CACtC,MAAMiB,EAAOC,EAAOJ,GACpBd,EAAQ,EACNiB,EAAKE,IAAI,GAAKF,EAAKG,IAAI,IAAM,EAAIH,EAAKG,IAAI,IAC1CH,EAAKE,IAAI,GAAKF,EAAKG,IAAI,IAAM,EAAIH,EAAKG,IAAI,IAC1CH,EAAKE,IAAI,GAAKF,EAAKG,IAAI,IAAM,EAAIH,EAAKG,IAAI,IAEtB,UAAlBjB,EAAQH,QAAmBA,EAAM,GAAKiB,EAAKE,IAAI,IAC7B,UAAlBhB,EAAQH,QAAmBA,EAAM,GAAKiB,EAAKG,IAAI,SAEnDpB,EAAQG,EAAQH,MAGjBK,EAAOW,wBAAyBhB,EAAMqB,KAAK,WAE3C,MAAMC,EAAe,EAAE,EAAItB,EAAM,IAAK,EAAIA,EAAM,IAAK,EAAIA,EAAM,IAE/D,GAAIS,EAAY,CACfJ,EAAOW,0EACP,MAAMO,EAAanB,EAAIoB,WAAW,SAASC,eAAeH,GAC1DR,EAAMY,eAAeb,QAASc,GAAUJ,EAAWK,SAASD,IAC5Db,EAAMc,SAASL,QAEflB,EAAOW,8DACPF,EAAMY,eAAeb,QAASc,IAC7B,MAAME,EAAIF,EAAMG,iBAChBH,EAAMF,eAAe,CAACI,EAAE,GAAKP,EAAO,GAAIO,EAAE,GAAKP,EAAO,GAAIO,EAAE,GAAKP,EAAO,SAK5EjB,EAAOW,6BClET,MAAMe,GAAO,sBAaGC,GAAW7B,GAC1B,OAAOhG,GAAgB4H,GAAO3B,IAC7B,MAAMC,EAASD,EAAIE,YAEnB,GAA8B,WAA1BH,EAAQ8B,cAEX,YADA5B,EAAO6B,QAAQH,0DAIhB,GAA8B,SAA1B5B,EAAQ8B,cAKX,YAJA5B,EAAO8B,SACHJ,+BAAiC5B,EAAQ8B,uEAM9C,MAAMG,EAAY,IAAI3F,IAGtB,SAAS4F,EAAaC,GACrB,OAAOA,EAAI,OAAc,YAAJA,EAAmBtF,KAAKI,IAAQ,YAAJkF,EAAmB,YAAc,KAGnF,SAASC,EAAgBC,GACxB,MAAMC,EAAQ,CAAC,EAAG,EAAG,GACrB,IAAIvE,EACJ,IAAK,IAAI3C,EAAI,EAAI2C,EAAYsE,EAAUE,sBAAsBnH,KAAOA,IACnE,IAAI6G,EAAUlG,IAAIgC,GAAlB,CAEA,IAAK,IAAIzC,EAAI,EAAGA,EAAIyC,EAAUgB,WAAYzD,IACzCyC,EAAUyE,WAAWlH,EAAGgH,GACxBA,EAAM,GAAKJ,EAAaI,EAAM,IAC9BA,EAAM,GAAKJ,EAAaI,EAAM,IAC9BA,EAAM,GAAKJ,EAAaI,EAAM,IAC9BvE,EAAU0E,WAAWnH,EAAGgH,GAGzBL,EAAUhG,IAAI8B,IAIhBkC,EAAII,UACFqC,aACAhC,QAASiC,GAASA,EAAKC,iBAAiBlC,QAAQ0B,IAElDlC,EAAOW,SAASe,mBC9ClB,MAOMiB,GAAyC,CAC9CC,cAAe,CAACC,EAAaC,SAAUD,EAAaE,KAAMF,EAAaG,QAASH,EAAaI,WAmBjFC,GAAQ,SAAUrD,EAAyB8C,IACvD,MAAM7C,QAAe6C,GAAmB9C,GAElC+C,EAAgB,IAAIxG,IAAI0D,EAAQ8C,eACtC,IAAK,MAAMO,KAAgBrD,EAAQ8C,cAClC,IAAKD,GAAeC,cAAcQ,SAASD,GAC1C,UAAUE,mDAAqDF,OAIjE,OAAOrJ,GArCK,QAqCkBiG,IAC7B,MAAMC,EAASD,EAAIE,YAEf2C,EAAc/G,IAAIgH,EAAaC,WASrC,SAAwB9C,EAAiBD,GAExC,MAAMuD,EAAkC,IAAIlH,IACtCmH,EAAoC,IAAInH,IACxCoH,EAAgC,IAAIpH,IACpCqH,EAAiC,IAAIrH,IAErCsH,EAAS3D,EAAII,UAAUqC,aAC7BkB,EAAOlD,QAASiC,IACfA,EAAKC,iBAAiBlC,QAAS2B,IAC9BA,EAAUrE,iBAAiB0C,QAASmD,GAAaJ,EAAmBxH,IAAI4H,IACxE,MAAMC,EAAUzB,EAAU0B,aACtBD,GAASN,EAAiBvH,IAAI6H,OAIpC,IAAK,MAAME,KAAa/D,EAAII,UAAUE,iBACrC,IAAK,MAAM0D,KAAWD,EAAUE,eAAgB,CAC/C,MAAMC,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YACnBH,GAAOT,EAAezH,IAAIkI,GAC1BE,GAAQV,EAAgB1H,IAAIoI,GAKlC,SAASE,EAAiBzG,GACzB,MAAM0G,EAA8C,IAAI3I,IAExD,IAAK,IAAIT,EAAI,EAAGA,EAAI0C,EAAU6B,OAAQvE,IAAK,CAC1C,MAAMoC,EAAIM,EAAU1C,GACdqJ,EAAQC,EAAYC,OAAOnH,EAAEyB,YAEnC,IAAIuF,EAAmBzI,IAAIyB,GAE3B,IAAK,IAAIlC,EAAI,EAAGA,EAAIwC,EAAU6B,OAAQrE,IAAK,CAC1C,MAAMmC,EAAIK,EAAUxC,GAEhBkC,IAAMC,IACN+G,EAAmBzI,IAAI0B,IAEvBD,EAAEoH,YAAcnH,EAAEmH,WAClBpH,EAAEqH,qBAAuBpH,EAAEoH,oBAC3BrH,EAAEuB,aAAetB,EAAEsB,YACnBvB,EAAEsH,kBAAoBrH,EAAEqH,iBACxBJ,EAAYK,OAAON,EAAOC,EAAYC,OAAOlH,EAAEwB,cAClDuF,EAAmBjI,IAAIkB,EAAGD,KAK7B,OAAOgH,EAGR,MAAMQ,EAAmBT,EAAiBpG,MAAMC,KAAKoF,IACrDtD,EAAOW,sBAAwBmE,EAAiBlJ,yBAAyB0H,EAAiB1H,iBAE1F,MAAMmJ,EAAsBV,EAAiBpG,MAAMC,KAAKqF,IACxDvD,EAAOW,sBACYoE,EAAoBnJ,yBAAyB2H,EAAmB3H,oBAGnF,MAAMoJ,EAAkBX,EAAiBpG,MAAMC,KAAKsF,IAC9CyB,EAAmBZ,EAAiBpG,MAAMC,KAAKuF,IACrDzD,EAAOW,sBACYqE,EAAgBpJ,KAAOqJ,EAAiBrJ,yBACrD4H,EAAe5H,KAAO6H,EAAgB7H,6BAI5C8H,EAAOlD,QAASiC,IACfA,EAAKC,iBAAiBlC,QAAS2B,IAC9BA,EAAUrE,iBAAiB0C,QAASmD,IAC/BoB,EAAoBlJ,IAAI8H,IAC3BxB,EAAU7D,KAAKqF,EAAUoB,EAAoB5I,IAAIwH,MAGnD,MAAMC,EAAUzB,EAAU0B,aACtBD,GAAWkB,EAAiBjJ,IAAI+H,IACnCzB,EAAU7D,KAAKsF,EAASkB,EAAiB3I,IAAIyH,QAIhD3F,MAAMC,KAAK4G,EAAiBxI,QAAQkE,QAASoD,GAAYA,EAAQsB,WACjEjH,MAAMC,KAAK6G,EAAoBzI,QAAQkE,QAAS3C,GAAcA,EAAUqH,WAGxE,IAAK,MAAMpB,KAAa/D,EAAII,UAAUE,iBACrC,IAAK,MAAM0D,KAAWD,EAAUE,eAAgB,CAC/C,MAAMC,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YACnBH,GAASe,EAAgBnJ,IAAIoI,IAChCF,EAAQzF,KAAK2F,EAAOe,EAAgB7I,IAAI8H,IAErCE,GAAUc,EAAiBpJ,IAAIsI,IAClCJ,EAAQzF,KAAK6F,EAAQc,EAAiB9I,IAAIgI,IAI7ClG,MAAMC,KAAK8G,EAAgB1I,QAAQkE,QAASyD,GAAUA,EAAMiB,WAC5DjH,MAAMC,KAAK+G,EAAiB3I,QAAQkE,QAAS2D,GAAWA,EAAOe,WA7GhBC,CAAenF,EAAQD,GACjE6C,EAAc/G,IAAIgH,EAAaG,UAoJrC,SAAqBhD,EAAiBD,GACrC,MAAMG,EAAOH,EAAII,UACXiF,EAAWlF,EAAKmF,eAChBC,EAAoC,IAAI3J,IAG9C,IAAK,IAAIT,EAAI,EAAGA,EAAIkK,EAAS3F,OAAQvE,IAAK,CACzC,MAAMoC,EAAI8H,EAASlK,GACbqJ,EAAQjH,EAAExC,WAEhB,IAAIwK,EAAWzJ,IAAIyB,GAEnB,IAAK,IAAIlC,EAAI,EAAGA,EAAIgK,EAAS3F,OAAQrE,IAAK,CACzC,MAAMmC,EAAI6H,EAAShK,GACbmK,EAAQhI,EAAEzC,WAEhB,GAAIwC,IAAMC,EAAG,SACb,GAAI+H,EAAWzJ,IAAI0B,GAAI,SAGvB,GAAID,EAAErC,gBAAkBsC,EAAEtC,cAAe,SAEzC,MAAMuK,EAAQlI,EAAEmI,UACVC,EAAQnI,EAAEkI,UACXD,GAAUE,GACXF,EAAM,KAAOE,EAAM,IACnBF,EAAM,KAAOE,EAAM,IAClBnB,GAAUgB,GACXf,EAAYK,OAAON,EAAOgB,IAC7BD,EAAWjJ,IAAIkB,EAAGD,IAKrB0C,EAAOW,sBAAwB2E,EAAW1J,yBAAyBsE,EAAKmF,eAAe5F,oBAEvFxB,MAAMC,KAAKoH,EAAWK,WAAWnF,QAAQ,EAAEpC,EAAKC,MAC/CD,EAAIwH,cAAcpF,QAASqF,IACpBA,aAAoBC,GAAOD,EAASvH,KAAKF,EAAKC,KAErDD,EAAI8G,YA5LyCa,CAAY/F,EAAQD,GAC7D6C,EAAc/G,IAAIgH,EAAaI,WA+LrC,SAAwBjD,EAAiBD,GACxC,MAAMG,EAAOH,EAAII,UACX6F,EAAY9F,EAAK+F,gBACjBX,EAAsC,IAAI3J,IAC1CuK,EAAO,IAAI9J,IAAI,CAAC,SAGtB,IAAK,IAAIlB,EAAI,EAAGA,EAAI8K,EAAUvG,OAAQvE,IAAK,CAC1C,MAAMoC,EAAI0I,EAAU9K,GAEpB,IAAIoK,EAAWzJ,IAAIyB,GAEnB,IAAK,IAAIlC,EAAI,EAAGA,EAAI4K,EAAUvG,OAAQrE,IAAK,CAC1C,MAAMmC,EAAIyI,EAAU5K,GAEhBkC,IAAMC,IACN+H,EAAWzJ,IAAI0B,IAEfD,EAAEuH,OAAOtH,EAAG2I,IACfZ,EAAWjJ,IAAIkB,EAAGD,KAKrB0C,EAAOW,sBAEY2E,EAAW1J,yBAAyBsE,EAAK+F,gBAAgBxG,qBAG5ExB,MAAMC,KAAKoH,EAAWK,WAAWnF,QAAQ,EAAEpC,EAAKC,MAC/CD,EAAIwH,cAAcpF,QAASqF,IACpBA,aAAoBC,GAAOD,EAASvH,KAAKF,EAAKC,KAErDD,EAAI8G,YAhO0CiB,CAAenG,EAAQD,GACjE6C,EAAc/G,IAAIgH,EAAaE,OA6GrC,SAAqB/C,EAAiBD,GACrC,MAAMG,EAAOH,EAAII,UAGXiG,EAAO,IAAIzK,IACjBuE,EAAKmG,gBAAgB7F,QAAQ,CAACmD,EAAUjD,IAAU0F,EAAK/J,IAAIsH,EAAUjD,IACrER,EAAK+F,gBAAgBzF,QAAQ,CAAC8F,EAAU5F,IAAU0F,EAAK/J,IAAIiK,EAAU5F,IAGrE,MAAM6F,EAAYrG,EAAKsC,aAAa/C,OAC9B+G,EAAe,IAAI7K,IACzB,IAAK,MAAMyC,KAAO8B,EAAKsC,aAAc,CAEpC,MAAMiE,EAAc,GACpB,IAAK,MAAM9I,KAAQS,EAAIsE,iBACtB+D,EAAY1I,KAAK2I,GAAmB/I,EAAMyI,IAK3C,MAAMO,EAAUF,EAAYzF,KAAK,KACjC,GAAIwF,EAAa3K,IAAI8K,GAAU,CAC9B,MAAMC,EAAaJ,EAAarK,IAAIwK,GACpCvI,EAAIwH,cAAcpF,QAASqG,IACtBA,EAAO1D,eAAiBN,EAAaiE,MACxCD,EAAOvI,KAAKF,EAAKwI,KAGnBxI,EAAI8G,eAEJsB,EAAanK,IAAIsK,EAASvI,GAI5B4B,EAAOW,sBAAwB4F,EAAYC,EAAa5K,yBAAyB2K,aA/ItCQ,CAAY/G,EAAQD,GAE9DC,EAAOW,6BAkOT,SAAS+F,GAAmB/I,EAAmCyI,GAC9D,MAAMY,EAAe,GACrB,IAAK,MAAMC,KAAYtJ,EAAKuJ,gBAAiB,CAC5C,MAAMrJ,EAAYF,EAAK0E,aAAa4E,GACpCD,EAAajJ,KAAKkJ,EAAW,IAAMb,EAAKjK,IAAI0B,IAE7C,GAAIF,aAAgBwJ,EAAW,CAC9B,MAAMvD,EAAUjG,EAAKkG,aACjBD,GACHoD,EAAajJ,KAAK,WAAaqI,EAAKjK,IAAIyH,IAEzC,MAAM0C,EAAW3I,EAAKyJ,cAClBd,GACHU,EAAajJ,KAAK,YAAcqI,EAAKjK,IAAImK,IAE1CU,EAAajJ,KAAK,QAAUJ,EAAK0J,WACjC,IAAK,MAAMzM,KAAU+C,EAAKK,cACzBgJ,EAAajJ,KAAK,UAAY2I,GAAmB9L,EAAQwL,IAG3D,OAAOY,EAAahG,KAAK,KC/S1B,MAWMsG,GAAyC,CAC9CC,QAAS,8BAQMC,GAAW3H,EAA8ByH,IACxD,MAAMxH,QAAewH,GAAwBzH,GAE7C,OAAO/F,GAvBK,aAuBkBiG,IAC7B,MAAMC,EAASD,EAAIE,YACnB,IAAK,MAAMwC,KAAQ1C,EAAII,UAAUqC,aAChC,IAAK,MAAM7E,KAAQ8E,EAAKC,iBACvB+E,GAAoB9J,EAAMmC,GAG5BC,EAAI2H,gBAAgBC,GAAkBzC,UACtClF,EAAOW,iCAIT,SAAS8G,GAAoB9J,EAAiBmC,GAC7C,IAAK,MAAMmH,KAAYtJ,EAAKuJ,gBAC3BU,GAAoBX,EAAUtJ,EAAK0E,aAAa4E,GAAYnH,GAE7D,IAAK,MAAMlF,KAAU+C,EAAKK,cACzB,IAAK,MAAMiJ,KAAYrM,EAAOsM,gBAC7BU,GAAoBX,EAAUrM,EAAOyH,aAAa4E,GAAYnH,GAKjE,SAAS8H,GAAoBX,EAAkBpJ,EAAqBiC,GACnE,IAAKjC,EAAUkB,WAAY,OAC3B,IAAKe,EAAQyH,QAAQM,KAAKZ,GAAW,OACrC,GAAIpJ,EAAUiK,oBAAsB,EAAG,OAEvC,MAAMhJ,EAAWjB,EAAUkB,WACrBC,EAAW,IAAI+I,aAAajJ,EAASW,QAE3C,IAAK,IAAIvE,EAAI,EAAG8M,EAAKnK,EAAUgB,WAAYoJ,EAAK,GAAgB/M,EAAI8M,EAAI9M,IACvE+M,EAAKpK,EAAUyE,WAAWpH,EAAG+M,GAC7BpK,EAAUqB,SAASF,GAAUuD,WAAWrH,EAAG+M,GAAI/I,SAASJ,GAGzDjB,EAAUqB,SAASF,GAAUkJ,eAAc,GChD/BC,MAAAA,GAA+B,CAC3CC,OAAQ,cACRC,YAAa,EACbC,YAAa,EACbC,iBAAkB,GAClBC,eAAgB,GAChBC,cAAe,EACfC,iBAAkB,GAClBC,gBAAiB,GACjBC,mBAAoB,QASRC,GAAShJ,IACrB,MAAMC,QAAeqI,GAAmBtI,GACxC,OAAQE,IACPA,EAAI2H,gBAAgBoB,GAClBC,aAAY,GACZC,kBAAkB,CAClBZ,OACoB,gBAAnBtI,EAAQsI,OACLU,EAAqBG,cAAcC,YACnCJ,EAAqBG,cAAcE,WACvCd,YAAavI,EAAQuI,YACrBC,YAAaxI,EAAQwI,YACrBc,iBAAkB,CACjBC,SAAUvJ,EAAQyI,iBAClBe,OAAQxJ,EAAQ0I,eAChBe,MAAOzJ,EAAQ2I,cACfe,UAAW1J,EAAQ4I,iBACnBe,QAAS3J,EAAQ6I,iBAElBC,mBAAoB9I,EAAQ8I,gCCtChBc,GAAQ3J,GACvB,MAAO,CACN4J,OAAQpJ,GAAWR,GACnB2D,OAAQlB,GAAWzC,GACnBiG,UAAWC,GAAclG,GACzBqF,SAAUC,GAAatF,GACvB6J,WAAYvJ,GAAeN,IAK7B,SAASQ,GAAWR,GAcnB,MAAO,CAAE8J,WAbM9J,EACbI,UACAI,aACAuJ,IAAKrJ,IACL,MAAMP,EAAOO,EAAMY,eAAe,GAC5B0I,EAAclJ,EAAOJ,GAC3B,MAAO,CACN1G,KAAM0G,EAAMuJ,UACZC,SAAU/J,EAAOA,EAAK8J,UAAY,GAClCE,QAASC,GAAYJ,EAAYhJ,KACjCqJ,QAASD,GAAYJ,EAAYjJ,SAOrC,SAAS0B,GAAWzC,GAgDnB,MAAO,CAAE8J,WA/C2B9J,EAClCI,UACAqC,aACAsH,IAAKrH,IACL,MAAM4H,EAAY5H,EAAKmD,cAAc0E,OAAQzD,GAAWA,EAAO1D,eAAiBN,EAAaiE,MAAMrH,OACnG,IAAI8K,EAAe,EACfC,EAAQ,EACZ,MAAMC,EAAY,IAAIrO,IAChBsO,EAAc,IAAItO,IAClBuO,EAA+B,IAAIvO,IAEzCqG,EAAKC,iBAAiBlC,QAAS7C,IAC9B,IAAK,MAAMsJ,KAAYtJ,EAAKuJ,gBAAiB,CAC5C,MAAM0D,EAAOjN,EAAK0E,aAAa4E,GAC/BwD,EAAU1O,IAAIkL,EAAW,IAAM4D,GAAoBD,IACnDD,EAAc5O,IAAI6O,GAEnB,IAAK,MAAME,KAAQnN,EAAKK,cACvB8M,EAAKhN,iBAAiB0C,QAASoK,GAASD,EAAc5O,IAAI6O,IAE3D,MAAMhH,EAAUjG,EAAKkG,aACjBD,IACH8G,EAAY3O,IAAI8O,GAAoBjH,IACpC+G,EAAc5O,IAAI6H,IAEnB4G,GAAS7M,EAAKG,iBAAiB,GAAGe,WAClC0L,YN1BgC5M,GACnC,MAAMiG,EAAUjG,EAAKkG,aACfkH,EAAWpN,EAAK0E,aAAa,YAGnC,OAAQ1E,EAAK0J,WACZ,KAAKF,EAAU6D,KAAKC,OACnB,OAAOF,EAASlM,WACjB,KAAKsI,EAAU6D,KAAKE,MACnB,OAAOtH,EAAUA,EAAQ/E,WAAa,EAAIkM,EAASlM,WAAa,EACjE,KAAKsI,EAAU6D,KAAKG,UACnB,OAAOJ,EAASlM,WACjB,KAAKsI,EAAU6D,KAAKI,WACnB,OAAOL,EAASlM,WAAa,EAC9B,KAAKsI,EAAU6D,KAAKK,UACnB,OAAOzH,EAAUA,EAAQ/E,WAAa,EAAIkM,EAASlM,WAAa,EACjE,KAAKsI,EAAU6D,KAAKM,eACpB,KAAKnE,EAAU6D,KAAKO,aACnB,OAAOR,EAASlM,WAAa,EAC9B,QACC,UAAUwE,MAAM,oBAAsB1F,EAAK0J,YMM1BmE,CAAoB7N,KAGrC,IAAI/B,EAAO,EACXqC,MAAMC,KAAKyM,GAAenK,QAASlD,GAAO1B,GAAQ0B,EAAEyB,WAAY0M,YAEhE,MAAMC,EAAQjJ,EAAKC,iBAAiBoH,IAAKnM,GAASgO,GAAwBhO,EAAK0J,YAE/E,MAAO,CACNtN,KAAM0I,EAAKuH,UACX4B,KAAM3N,MAAMC,KAAK,IAAI9B,IAAIsP,IACzBG,WAAYpJ,EAAKC,iBAAiBjD,OAClC8K,aAAcA,EACduB,SAAUtB,EACV5G,QAAS3F,MAAMC,KAAKwM,GAAaqB,OACjCC,WAAY/N,MAAMC,KAAKuM,GAAWsB,OAClC1B,UAAWA,EACXzO,KAAMA,MAQV,SAASqK,GAAclG,GAoCtB,MAAO,CAAE8J,WAnCkC9J,EACzCI,UACA8F,gBACA6D,IAAKxD,IACL,MAAM+D,EAAY/D,EAChBV,cACA0E,OAAQzD,GAAWA,EAAO1D,eAAiBN,EAAaiE,MAAMrH,OAG1DwM,EAAa,IAAI7P,IAAuBkK,EAAS4F,kBACjDC,EAAQpM,EACZqM,WACAC,YACA/B,OAAQgC,IACR,MAAMhL,EAAQgL,EAAIC,WACZ1F,EAASyF,EAAIE,YACnB,OAAIlL,aAAiBmL,GAAW5F,IAAWP,MAGvChF,aAAiBmL,GAAW5F,aAAkB6F,GAAqBT,EAAWpQ,IAAIgL,MAKtFiD,IAAKwC,GAAQA,EAAItC,WAEnB,MAAO,CACNjQ,KAAMuM,EAAS0D,UACfK,UAAAA,EACAjF,SAAU+G,EACVQ,UAAWrG,EAASsG,eACpBC,YAAavG,EAASwG,qBAQ1B,SAASzH,GAAatF,GAyCrB,MAAO,CAAE8J,WAxCgC9J,EACvCI,UACAkF,eACAyE,IAAKiD,IACL,MAAM1C,EAAY0C,EAChBnH,cACA0E,OAAQzD,GAAWA,EAAO1D,eAAiBN,EAAaiE,MAAMrH,OAE1D0M,EAAQpM,EACZqM,WACAY,gBAAgBD,GAChBzC,OAAQ2C,GAASA,EAAKT,YAAYrJ,eAAiBN,EAAaiE,MAChEgD,IAAKmD,GAASA,EAAKjD,WAEfkD,EAAaC,EAAW1H,QAAQsH,EAAQjS,WAAaiS,EAAQ9R,eAEnE,IAAImS,EAAc,GAClB,GAA8B,eAA1BL,EAAQ9R,cAAgC,CAC3C,MACMoS,EADYC,EAAQP,EAAQjS,YACZyS,qBAAqB,GACvCF,EAAIG,aAAeC,EACtBL,EAAc,QACJC,EAAIG,aAAeE,IAC7BN,EAAc,SAIhB,MAAO,CACNrT,KAAMgT,EAAQ/C,UACd2D,IAAKZ,EAAQa,SACbzB,MAAOlO,MAAMC,KAAK,IAAI9B,IAAI+P,IAC1B9B,UAAAA,EACAwD,SAAUd,EAAQ9R,cAClBmS,YAAAA,EACAF,WAAYA,EAAaA,EAAWlM,KAAK,KAAO,GAChDpF,KAAMmR,EAAQjS,WAAY2Q,WAC1BqC,QAASX,EAAWY,WAAWhB,EAAQjS,WAAaiS,EAAQ9R,mBAQhE,SAASoF,GAAeN,GAwCvB,MAAO,CAAE8J,WAvCoC9J,EAC3CI,UACAE,iBACAyJ,IAAKkE,IACL,IAAIC,EAAUC,SACVC,GAAWD,SACfF,EAAKhK,eAAexD,QAASuD,IAC5B,MAAME,EAAQF,EAAQG,WACjBD,IACLgK,EAAUtR,KAAKoE,IAAIkN,EAAShK,EAAMmK,OAAO,IAAI,IAC7CD,EAAUxR,KAAKmE,IAAIqN,EAASlK,EAAMoK,OAAO,IAAI,OAG9C,IAAIzS,EAAO,EACP0S,EAAY,EAChB,MAAM1Q,EAA2B,IAAIxB,IAcrC,OAbA4R,EAAKhK,eAAexD,QAASuD,IAC5B,MAAME,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YAClBH,IACLqK,GAAarK,EAAMpF,WACnBjB,EAAU7B,IAAIkI,GACTE,GACLvG,EAAU7B,IAAIoI,MAEflG,MAAMC,KAAKN,GAAW4C,QAASmD,IAC9B/H,GAAQ+H,EAAS5E,WAAY0M,aAGvB,CACN1R,KAAMiU,EAAKhE,UACXuE,SAAUP,EAAKQ,eAAe/O,OAC9BgP,SAAUT,EAAKhK,eAAevE,OAC9BiP,SAAU/R,KAAKgS,MAA4B,KAArBR,EAAUF,IAAmB,IACnDK,UAAWA,EACX1S,KAAMA,MAqEV,MAAM+P,GAA0B,CAC/B,SACA,QACA,YACA,aACA,YACA,iBACA,gBAGKiD,GAA4C,CACjD7G,aAAc,MACdvI,YAAa,MACbD,YAAa,MACbsP,WAAY,KACZC,WAAY,MACZC,WAAY,MACZC,UAAW,MAIZ,SAAS7E,GAAYnO,GACpB,IAAK,IAAId,EAAI,EAAGA,EAAIc,EAAEyD,OAAQvE,IACxBc,EAAEd,GAAc8B,UAAShB,EAAEd,GAAK+T,OAAOjT,EAAEd,GAAG8B,QAAQ,KAE1D,OAAOhB,EAGR,SAAS6O,GAAoBlH,GAC5B,MAAMrE,EAAQqE,EAAS5E,WAGvB,OAFa6P,GAAkBtP,EAAM4P,YAAYnV,OAAS,MAC3C4J,EAASiB,gBAAkB,QAAU,ICxTrD,MAKMuK,GAA+C,YAMrCC,GAASvP,EAA4BsP,IAIpD,aAFqBA,GAAsBtP,GAEpC/F,GAfK,WAekBiG,IAC7B,MAAMC,EAASD,EAAIE,YACbC,EAAOH,EAAII,UACXkP,EAAiBtP,EAAI2H,gBAAgB4H,GAE3C,GAAIpP,EAAKG,iBAAiBZ,OAGzB,OAFAO,EAAOuP,kFACPvP,EAAOW,6BAIR,IAAI6O,EAAa,EACbC,EAAe,EAEnB,IAAK,MAAMhP,KAASP,EAAKK,aAAc,CAEtC,MAAMmP,EAAgB,IAAI/T,IAC1B8E,EAAMkP,SAAUC,IACf,MAAMnN,EAAOmN,EAAKC,UACbpN,GACLiN,EAAcrT,IAAIoG,GAAOiN,EAAcvT,IAAIsG,IAAS,IAAIrG,KAAaL,IAAI6T,MAI1E,MAAME,EAAgB,GACtB,IAAK,MAAMrN,KAAQxE,MAAMC,KAAKwR,EAAcpT,QAAS,CACpD,MAAMyT,EAAQ9R,MAAMC,KAAKwR,EAAcvT,IAAIsG,IAC3C,GAAIsN,EAAMtQ,OAAS,EAAG,SACtB,GAAIsQ,EAAMC,KAAMJ,GAASA,EAAKK,WAAY,SAE1C,MAAMC,EAAQC,GAAYpQ,EAAKsP,EAAgB5M,EAAMsN,EAAMtQ,QACrD2Q,EAAmBF,EAAM7N,aAAa,eACtCgO,EAAgBH,EAAM7N,aAAa,YACnCiO,EAAaJ,EAAM7N,aAAa,SAEhCkO,EAAYxQ,EAAIoB,aAAaqP,QAAQ/N,GAAMgO,aAAa,0BAA2BP,GACzFzP,EAAMc,SAASgP,GAEf,IAAIG,GAAmB,EACnBC,GAAgB,EAChBC,GAAa,EAGjB,IAAK,IAAI1V,EAAI,EAAGA,EAAI6U,EAAMtQ,OAAQvE,IAAK,CACtC,IAAIsG,EAASqP,EAASC,EACtB,MAAMlB,EAAOG,EAAM7U,GAEnBkV,EAAiB7N,WAAWrH,EAAIsG,EAAIoO,EAAKmB,uBACzCV,EAAc9N,WAAWrH,EAAI2V,EAAIjB,EAAKoB,oBACtCV,EAAW/N,WAAWrH,EAAI4V,EAAIlB,EAAKqB,iBAE9BC,EAAUC,GAAG3P,EAAG,CAAC,EAAG,EAAG,MAAKkP,GAAmB,GAC/CQ,EAAUC,GAAGN,EAAG,CAAC,EAAG,EAAG,EAAG,MAAKF,GAAgB,GAC/CO,EAAUC,GAAGL,EAAG,CAAC,EAAG,EAAG,MAAKF,GAAa,GAG9ChB,EAAKY,QAAQ,MACbV,EAAc/R,KAAK6R,GAGfc,GAAkBN,EAAiBlL,UACnCyL,GAAeN,EAAcnL,UAC7B0L,GAAYN,EAAWpL,UAE5BkM,GAAiBtB,EAAe9P,GAEhCwP,IACAC,GAAgBM,EAAMtQ,QAKvBO,EAAO6B,KADJ2N,EAAa,uBACgBA,mBAA4BC,mFAKd,IAA3CJ,EAAegC,iBAAiB5R,QACnC4P,EAAenK,UAGhBlF,EAAOW,+BAIT,SAASyQ,GAAiBrB,EAAe/P,GACxC,IAAI4P,EACA0B,EAAc,EAClB,KAAQ1B,EAAOG,EAAMwB,OAAQ,CAC5B,GACC3B,EAAKvO,eAAe5B,QACpBmQ,EAAK4B,aACL5B,EAAKC,WACLD,EAAKK,WACLL,EAAK1D,iBAAiBzM,OAEtB,SAED,MAAMgS,EAAa7B,EAAKpD,YACpBiF,aAAsBC,GACzB3B,EAAMhS,KAAK0T,GAEZ7B,EAAK1K,UACLoM,IAGDtR,EAAOW,2BAA0B2Q,mBAGlC,SAASnB,GAAYpQ,EAAesP,EAAmC5M,EAAYrD,GAClF,MAAMuS,EAASlP,EAAKC,iBAAiB,GAAGL,aAAa,YAAauP,YAE5DxB,EAAmBrQ,EACvB8R,iBACAC,QAAQ,QACR5S,SAAS,IAAI6I,aAAa,EAAI3I,IAC9B2S,UAAUJ,GACNtB,EAAgBtQ,EACpB8R,iBACAC,QAAQ,QACR5S,SAAS,IAAI6I,aAAa,EAAI3I,IAC9B2S,UAAUJ,GACNrB,EAAavQ,EACjB8R,iBACAC,QAAQ,QACR5S,SAAS,IAAI6I,aAAa,EAAI3I,IAC9B2S,UAAUJ,GAEZ,OAAOtC,EACL2C,sBACAC,aAAa,cAAe7B,GAC5B6B,aAAa,WAAY5B,GACzB4B,aAAa,QAAS3B,GCpIzB,MAUM4B,GAAyC,CAC9CtP,cAAe,CACdC,EAAasP,KACbtP,EAAauP,KACbvP,EAAaE,KACbF,EAAawP,OACbxP,EAAayP,UACbzP,EAAa0P,iBACb1P,EAAa2P,UACb3P,EAAaI,SACbJ,EAAaG,QACbH,EAAaC,SACbD,EAAa4P,QAEdC,YAAY,EACZC,gBAAgB,GAoBJC,GAAQ,SAAU/S,EAAyBqS,IAEvD,MAAMpS,QAAeoS,GAAmBrS,GAClC+C,EAAgB,IAAIxG,IAAI0D,EAAQ8C,eAEtC,OAAO9I,GAlDK,QAkDkBiG,IAC7B,MAAMC,EAASD,EAAIE,YACbC,EAAOH,EAAII,UACX0S,EAAQ9S,EAAIqM,WAEZ0G,EAAmC,GAmBzC,GAdIlQ,EAAc/G,IAAIgH,EAAasP,QAAUrS,EAAQ4S,YAAYxS,EAAKK,aAAaC,QA+FnF,SAASuS,EAAcC,GAGtB,GAFAA,EAAK3R,eAAeb,QAAQuS,GAExBC,aAAgBC,EAAO,OAE3B,MAAMC,EAASL,EAAM7F,gBAAgBgG,GAAMhD,KAAMmD,IAChD,MAAMC,EAAQD,EAAE3G,YAAYrJ,aAC5B,OAAOiQ,IAAUvQ,EAAaiE,MAAQsM,IAAUvQ,EAAawQ,OAASD,IAAUvQ,EAAasP,OAE1C,IAApCU,EAAMxR,aAAa2R,GAAMvT,QACzByT,IACfF,EAAK9N,UACLoO,EAAaN,MA1GXpQ,EAAc/G,IAAIgH,EAAasP,OAAOjS,EAAKqT,YAAY/S,QAAQgT,GAC/D5Q,EAAc/G,IAAIgH,EAAauP,OAAOlS,EAAKI,YAAYE,QAAQgT,GAC/D5Q,EAAc/G,IAAIgH,EAAaE,OAAO7C,EAAKsC,aAAahC,QAAQgT,GAChE5Q,EAAc/G,IAAIgH,EAAawP,SAASnS,EAAKuT,cAAcjT,QAAQgT,GAEnE5Q,EAAc/G,IAAIgH,EAAayP,YAClCoB,EAAkBb,EAAOhQ,EAAayP,WAEnC1P,EAAc/G,IAAIgH,EAAa0P,mBAClCmB,EAAkBb,EAAOhQ,EAAa0P,mBAIlCzS,EAAQ6S,gBAAkB/P,EAAc/G,IAAIgH,EAAaC,UAC7D,IAAK,MAAML,KAAQvC,EAAKsC,aACvB,IAAK,MAAM7E,KAAQ8E,EAAKC,iBAAkB,CACzC,MAAMiR,EAAWC,GAAsB7T,EAAKpC,EAAKyJ,eAC3CyM,EAASC,GAAoBnW,EAAMgW,GACzCI,EAAgBpW,EAAMkW,GACtBlW,EAAKK,cAAcwC,QAAS5F,GAAWmZ,EAAgBnZ,EAAQiZ,IASlE,GAAIjR,EAAc/G,IAAIgH,EAAa2P,WAClC,IAAK,MAAMxE,KAAQ9N,EAAKG,iBAAkB,CACzC,IAAK,MAAM2T,KAAWhG,EAAKQ,eACrBwF,EAAQC,kBACZD,EAAQ9O,UACRoO,EAAaU,IAGf,GAAKhG,EAAKQ,eAAe/O,OAKxBuO,EAAKhK,eAAexD,QAAQgT,OALI,CAChC,MAAM/E,EAAWT,EAAKhK,eACtBwP,EAAUxF,GACVS,EAASjO,QAAQgT,IAiBpB,GAVI5Q,EAAc/G,IAAIgH,EAAaI,WAAW/C,EAAK+F,gBAAgBzF,QAAQgT,GACvE5Q,EAAc/G,IAAIgH,EAAaG,UAAU9C,EAAKmF,eAAe7E,QAAQgT,GACrE5Q,EAAc/G,IAAIgH,EAAaC,WAAW5C,EAAKmG,gBAAgB7F,QAAQgT,GACvE5Q,EAAc/G,IAAIgH,EAAa4P,SAASvS,EAAKgU,cAAc1T,QAAQgT,GAOnEvZ,OAAOqC,KAAKwW,GAAUrT,OAAQ,CACjC,MAAM0U,EAAMla,OAAOqC,KAAKwW,GACtBhJ,IAAKtI,MAASA,MAAMsR,EAAStR,OAC7BR,KAAK,MACPhB,EAAO6B,gCAAkCsS,UAEzCnU,EAAO6B,2CAQR,SAAS2R,EAAUR,GAGFA,EAAKpN,cAAc0E,OAAQ8J,KAAQA,aAAatO,GAAQsO,aAAaC,IACxE5U,SACZuT,EAAK9N,UACLoO,EAAaN,IASf,SAASU,EAAkBb,EAAwB1P,GAClD0P,EACExG,YACAvC,IAAKmD,GAASA,EAAKT,aACnBlC,OAAQzD,GAAWA,EAAO1D,eAAiBA,GAC3C3C,QAAQgT,GAoBX,SAASO,EAAgBpW,EAAmCkW,GAC3D,IAAK,MAAM5M,KAAY4M,EACtBlW,EAAKsU,aAAahL,EAAU,MAK9B,SAASqM,EAAaN,GACrBF,EAASE,EAAK7P,cAAgB2P,EAASE,EAAK7P,eAAiB,EAC7D2P,EAASE,EAAK7P,gBAtDfnD,EAAOW,6BA8DT,SAASmT,GAAoBnW,EAAmCgW,GAC/D,MAAME,EAAS,GACf,IAAK,MAAM5M,KAAYtJ,EAAKuJ,gBACV,YAAbD,GAA2B0M,EAAS9X,IAAIoL,IAEjCA,EAASqN,WAAW,eAAiBX,EAAS9X,IAAIoL,IAElDA,EAASqN,WAAW,WAA0B,YAAbrN,IAD3C4M,EAAO9V,KAAKkJ,GAFZ4M,EAAO9V,KAAKkJ,GAOd,OAAO4M,EAOR,SAASD,GACRW,EACAjO,EACAmE,EAAY,IAAIrO,KAEhB,IAAKkK,EAAU,OAAOmE,EAEtB,MAEM+J,EAFQD,EAASnI,WAEHqI,eAAenO,GAC7BoO,EAAe,IAAItY,IAEzB,IAAK,MAAM6Q,KAAQuH,EACdvH,EAAKV,qBAAsBE,GAC9BiI,EAAa3Y,IAAIkR,EAAKjD,WAIxB,IAAK,MAAMiD,KAAQuH,EAAO,CACzB,MAAMza,EAAOkT,EAAKjD,UACZ1I,EAAQ2L,EAAKV,WAEfjL,aAAiBqT,GAChBD,EAAa7Y,IAAI9B,EAAKqD,QAAQ,QAAS,MAC1CqN,EAAU1O,gBAAgBuF,EAAMsT,iBAI9BtT,aAAiBmL,GAAW1S,EAAK8a,MAAM,mBAC1CpK,EAAU1O,IAAI,WAGXuF,aAAiBoL,GACpBkH,GAAsBW,EAAUjT,EAAOmJ,GAMzC,OAAOA,ECnQR,MAaMqK,GAA8D,CACnEla,OAAQ,iBAqBOma,GAAQlV,GACvB,MAAMC,QAAegV,GAAqBjV,GACpCmV,EAAUlV,EAAQkV,QAExB,IAAKA,EACJ,UAAU3R,yEAGX,OAAOvJ,GA3CK,UA2CiBmb,MAAAA,IAC5B,MAAMjV,EAASD,EAAIE,kBAEb+U,EAAQE,MAEd,MAAMC,EAAOC,GAAiBrV,GAE9B,IAAK,MAAMsV,KAAcF,EAAKG,oBAAoBhZ,OAAQ,CACzD,MAAMiZ,EAAaF,EAAWG,QAC9B,IAAIC,EAAeF,EAAWxW,WAAYE,QACpCwW,aAAwBjW,cAC7BiW,EAAe,IAAIjW,YAAYiW,IAIhC,MAAOjX,EAAOkX,GAAUV,EAAQW,YAC/BF,EACAN,EAAKS,cAAczZ,IAAIkZ,KAAgBlO,EAAU6D,KAAKK,UACnC,SAAnBvL,EAAQlF,QAGT2a,EAAWrW,SAASwW,GAAU,MAAQ,IAAInW,YAAYkW,GAAgBA,GAGtE,IAAK,MAAMI,KAAgBV,EAAKG,oBAAoBnZ,IAAIkZ,GAAa,CACpE,MAAMS,EAAeD,EAAaL,QAClCjX,GAAeuX,EAActX,EAAOkX,GACpC,IAAK,MAAM/X,KAAQwX,EAAKY,uBAAuB5Z,IAAI0Z,GAIlD,GAHIlY,EAAKkG,eAAiBwR,GACzB1X,EAAKW,KAAK+W,EAAYE,GAEnB5X,EAAKkG,eAAiB0R,EAAY,CACrC5X,EAAKW,KAAKuX,EAAcC,GACxB,IAAK,MAAMlb,KAAU+C,EAAKK,cACzBpD,EAAO0D,KAAKuX,EAAcC,WAQzB/V,EAAIiW,UAAUpD,GAAM,CAAEhQ,cAAe,CAACC,EAAaC,aAEpDqS,EAAKG,oBAAoB1Z,KAG7BoE,EAAOW,4BAFPX,EAAOuP,oFAmBM6F,GAAiBb,GAChC,MAAMe,EAAsB,IAAI7Z,GAC1Bma,EAAgB,IAAIja,IACpBoa,EAAyB,IAAIta,GAEnC,IAAK,MAAMgH,KAAQ8R,EAASpU,UAAUqC,aACrC,IAAK,MAAM7E,KAAQ8E,EAAKC,iBAAkB,CACzC,MAAMkB,EAAUjG,EAAKkG,aACrB,GAAKD,EAAL,CAEAgS,EAAcvZ,IAAIuH,EAASjG,EAAK0J,WAEhC,IAAK,MAAMxJ,KAAaH,GAAmBC,GAC1C2X,EAAoBvZ,IAAI6H,EAAS/F,GACjCkY,EAAuBha,IAAI8B,EAAWF,IAKzC,MAAO,CAAE2X,oBAAAA,EAAqBM,cAAAA,EAAeG,uBAAAA,YCvG9BE,GAAqBtY,EAAmCuY,EAAQhI,UAC/E,GAAKe,OAAOkH,SAASD,IAAUA,EAAQ,GAAMA,GAAS,EACrD,UAAU7S,kDAGX,MAAM+S,EAAczY,EAAK0E,aAAa,YAAaxD,WAC7CwX,EAAW1Y,EAAKuJ,gBAAgBoD,OAAQvQ,GAASA,EAAKua,WAAW,aAAa7U,OAI9EmE,EAAU,IAAIrE,YAAuB,EAAX8W,GAC1BC,EAAa,IAAIvO,aAAwB,EAAXsO,GAC9BE,EAAa,IAAIxO,aAAwB,EAAXsO,GAC9BG,EAAY,IAAIhX,YAAuB,EAAX6W,GAC5BI,EAAY,IAAIjX,YAAuB,EAAX6W,GAElC,IAAK,IAAInb,EAAI,EAAGA,EAAIkb,EAAalb,IAAK,CACrCwb,GAAe/Y,EAAMzC,EAAG,UAAWob,GACnCI,GAAe/Y,EAAMzC,EAAG,SAAUsb,GAIlC,IAAK,IAAIpb,EAAI,EAAGA,EAAe,EAAXib,EAAcjb,IAAKwI,EAAQxI,GAAKA,EACpDwI,EAAQmI,KAAK,CAACzO,EAAGC,IAAO+Y,EAAWhZ,GAAKgZ,EAAW/Y,IAAM,EAAI,GAG7D,IAAK,IAAInC,EAAI,EAAGA,EAAIwI,EAAQnE,OAAQrE,IACnCmb,EAAWnb,GAAKkb,EAAW1S,EAAQxI,IACnCqb,EAAUrb,GAAKob,EAAU5S,EAAQxI,IAGlCub,GAAehZ,EAAMzC,EAAG,UAAWqb,GACnCI,GAAehZ,EAAMzC,EAAG,SAAUub,GAInC,IAAK,IAAIvb,EAAImb,EAAc,EAAJnb,EAAQgb,EAAOhb,IAAK,CAC1C,MAAM0b,EAAUjZ,EAAK0E,yBAAwBnH,EAAI,IAC3C2b,EAASlZ,EAAK0E,wBAAuBnH,EAAI,IAC/CyC,EAAKsU,yBAAwB/W,EAAI,GAAK,MACtCyC,EAAKsU,wBAAuB/W,EAAI,GAAK,MACA,IAAjC0b,EAAQhR,cAAcnG,QAAcmX,EAAQ1R,UACZ,IAAhC2R,EAAOjR,cAAcnG,QAAcoX,EAAO3R,WAWhD,SAAmCvH,GAElC,IAqHD,SAAyBA,GACxB,MAAMqO,EAAarO,EACjBuJ,gBACAoD,OAAQvQ,GAASA,EAAKua,WAAW,aACjCxK,IAAK/P,GAAS4D,EAAK0E,aAAatI,IAC5B+c,EAAW9K,EAAWlC,IAAKxM,GAAMA,EAAEsH,iBACnCmS,EAAW/K,EAAWlC,IAAKxM,GAAMA,EAAEqH,oBACzC,OAAkC,QAAvBvI,IAAI0a,GAAUlb,MAAyC,IAA3B,IAAIQ,IAAI2a,GAAUnb,KA5HpDob,CAAgBrZ,GAAO,OAE5B,MAAMyY,EAAczY,EAAK0E,aAAa,YAAaxD,WAC7CwX,EAAW1Y,EAAKuJ,gBAAgBoD,OAAQvQ,GAASA,EAAKua,WAAW,aAAa7U,OAE9EwX,EAAoBtZ,EAAK0E,aAAa,aACtC6U,EAAgBD,EAAkBlY,WAClCoY,EAAgBF,EAAkBtS,mBAClCyS,EAAaH,EAAkBrS,gBAC/ByS,EAA0BD,EAAaD,OAAgBG,EACvDC,EAAQH,EAAalG,EAAUsG,YAAY,EAAGL,GAAiBlI,OAAOwI,QACtEZ,EAAS,IAAIrX,YAAuB,EAAX6W,GAAcqB,KAAK,GAC5Cd,EAAUM,EAAcjY,MAAM,EAAc,EAAXoX,GAAcqB,KAAK,GAE1D,IAAK,IAAIxc,EAAI,EAAGA,EAAIkb,EAAalb,IAAK,CACrCwb,GAAe/Y,EAAMzC,EAAG,SAAU2b,GAClCH,GAAe/Y,EAAMzC,EAAG,UAAW0b,EAASS,GAE5C,IAAIM,EAAaC,GAAIhB,EAASS,GAC9B,GAAmB,IAAfM,EAAJ,CAGA,GAAIhb,KAAKa,IAAI,EAAIma,GAAcJ,EAC9B,IAAK,IAAInc,EAAI,EAAGA,EAAIwb,EAAQnX,OAAQrE,IACnC,GAAIgc,EAAY,CACf,MAAMS,EAAW3G,EAAU4G,UAAUlB,EAAQxb,GAAKuc,EAAYR,GAC9DP,EAAQxb,GAAK8V,EAAUsG,YAAYK,EAAUV,QAE7CP,EAAQxb,IAAMuc,EASjB,GAJAA,EAAaC,GAAIhB,EAASS,GAItBD,GAA6B,IAAfO,EACjB,IAAK,IAAIvc,EAAIwb,EAAQnX,OAAS,EAAGrE,GAAK,EAAGA,IACxC,GAAIwb,EAAQxb,GAAK,EAAG,CACnBwb,EAAQxb,IAAM8V,EAAU4G,UAAU,EAAIH,EAAYR,GAClD,MAMH,IAAK,IAAI/b,EAAIwb,EAAQnX,OAAS,EAAGrE,GAAK,EAAGA,IACrB,IAAfwb,EAAQxb,KACXyb,EAAOzb,GAAK,GAIdub,GAAehZ,EAAMzC,EAAG,SAAU2b,GAClCF,GAAehZ,EAAMzC,EAAG,UAAW0b,EAASS,KA/D7CU,CAA0Bpa,GAoE3B,SAAS+Y,GACR/Y,EACAqa,EACAC,EACArd,EACAyc,GAEA,IAAIT,EACJ,MAAM3O,EAAK,CAAC,EAAG,EAAG,EAAG,GACrB,IAAK,IAAI/M,EAAI,EAAI0b,EAAUjZ,EAAK0E,gBAAgB4V,KAAU/c,KAAOA,IAAK,CACrE0b,EAAQtU,WAAW0V,EAAa/P,GAChC,IAAK,IAAI7M,EAAI,EAAGA,EAAI,EAAGA,IAErBR,EAAW,EAAJM,EAAQE,GADZic,EACiBnG,EAAU4G,UAAU7P,EAAG7M,GAAIic,GAE3BpP,EAAG7M,GAI1B,OAAOR,EAIR,SAAS+b,GACRhZ,EACAqa,EACAC,EACAC,EACAb,GAEA,IAAIT,EACJ,MAAM3O,EAAK,CAAC,EAAG,EAAG,EAAG,GACrB,IAAK,IAAI/M,EAAI,EAAI0b,EAAUjZ,EAAK0E,gBAAgB4V,KAAU/c,KAAOA,IAAK,CACrE,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAErB6M,EAAG7M,GADAic,EACKnG,EAAUsG,YAAYU,EAAW,EAAJhd,EAAQE,GAAIic,GAEzCa,EAAW,EAAJhd,EAAQE,GAGzBwb,EAAQrU,WAAWyV,EAAa/P,IAKlC,SAAS2P,GAAIM,EAAoBb,GAChC,IAAIO,EAAM,EACV,IAAK,IAAI1c,EAAI,EAAGA,EAAIgd,EAAOzY,OAAQvE,IAEjC0c,GADGP,EACInG,EAAUsG,YAAYU,EAAOhd,GAAImc,GAEjCa,EAAOhd,GAGhB,OAAO0c,ECzKR,MAOMO,GAAa,CAACnJ,UAAWD,WAAYD,aAErCsJ,YAAEA,GAAFC,SAAeA,GAAfC,MAAyBA,GAAzBC,QAAgCA,IAAYlE,EAAiBmE,WAC7DC,GAAe,CAACL,GAAaC,GAAUC,IAwBhCI,GAA+C,CAC3DnR,QAAS,KACTqB,mBAAoB,OACpBL,iBAAkB,GAClBC,eAAgB,GAChBE,iBAAkB,GAClBD,cAAe,EACfkQ,eAAgB,EAChBhQ,gBAAiB,GACjBiQ,kBAAkB,GAebC,GAAW,CAAChZ,EAA4B6Y,MAC7C,MAAM5Y,QAAe4Y,GAAsB7Y,GAE3C,OAAO/F,GA7DK,WA6DiBmb,MAAAA,IAC5B,MAAMjV,EAASD,EAAIE,YACbC,EAAOH,EAAII,UAKjB,IAAI2Y,EAHJ/Y,EAAI2H,gBAAgBC,GAAkBoB,aAAY,GAIf,UAA/BjJ,EAAQ8I,qBACXkQ,EAAgBC,GA2TnB,SAAsBC,GACrB,MAAMC,EAASD,EAAO,GACtB,IAAK,MAAMpY,KAAQoY,EAClBjY,EAAIkY,EAAOlY,IAAKkY,EAAOlY,IAAKH,EAAKG,KACjCD,EAAImY,EAAOnY,IAAKmY,EAAOnY,IAAKF,EAAKE,KAElC,OAAOmY,EAjU4BC,CAAahZ,EAAKsC,aAAasH,IAAIqP,OAIrE,IAAK,MAAM1W,KAAQ1C,EAAII,UAAUqC,aAAc,CACX,SAA/B1C,EAAQ8I,qBACXkQ,EAAgBC,GAAiBI,GAA8B1W,KAG5DqW,GAAiBhZ,EAAQyH,QAAQM,KAAK,cACzCuR,GAAqBrZ,EAAK0C,EAAMqW,GAChCO,GAAuB5W,EAAM,EAAIqW,EAAcQ,QAGhD,IAAK,MAAM3b,KAAQ8E,EAAKC,iBAAkB,CACzC6W,GAAkBxZ,EAAKpC,EAAMmb,EAAgBhZ,GAC7C,IAAK,MAAMlF,KAAU+C,EAAKK,cACzBub,GAAkBxZ,EAAKnF,EAAQke,EAAgBhZ,UAK5CC,EAAIiW,UACTpD,GAAM,CAAEhQ,cAAe,CAACC,EAAaC,SAAUD,EAAauP,KAAMvP,EAAaI,YAC/EC,GAAM,CAAEN,cAAe,CAACC,EAAaC,SAAUD,EAAaI,aAG7DjD,EAAOW,gCAIT,SAAS4Y,GACRxZ,EACApC,EACAmb,EACAhZ,GAEA,MAAME,EAASD,EAAIE,YAEnB,IAAK,MAAMgH,KAAYtJ,EAAKuJ,gBAAiB,CAC5C,IAAKpH,EAAQyH,QAAQM,KAAKZ,GAAW,SAErC,MAAM4O,EAAelY,EAAK0E,aAAa4E,IACjCuS,KAAEA,EAAFC,KAAQA,GAASC,GAAwBzS,EAAU4O,EAAc7V,EAAQF,GAE/E,IAAK2Z,EAAM,SACX,GAAID,EAAO,GAAKA,EAAO,GAAI,UAAUnW,yCACrC,GAAIwS,EAAa/N,oBAAsB0R,EAAO,EAAG,SAEjD,MAAM1D,EAAeD,EAAaL,QAGlC,GAAiB,aAAbvO,EAAyB,CAC5B,MAAMqS,EAAQR,EAAcQ,MACtBtD,EAAkB,GAExBrY,aAAgBwJ,EACbwS,EAAO3D,EAAW4D,GAAcd,IAChCe,EAAY7D,EAAW,CAAC,EAAIsD,EAAO,EAAIA,EAAO,EAAIA,IACrD,IAAK,IAAIpe,EAAI,EAAG+M,EAAW,CAAC,EAAG,EAAG,GAAID,EAAK8N,EAAajX,WAAY3D,EAAI8M,EAAI9M,IAC3E4a,EAAaxT,WAAWpH,EAAG+M,GAC3B6N,EAAavT,WAAWrH,EAAG4e,EAAc7R,EAAIA,EAAI+N,IAKnD+D,GAAkBjE,EAAc2D,EAAMD,GACtC7b,EAAKW,KAAKuX,EAAcC,GAQzB,GAJIhW,EAAQ8Y,kBAAoBjb,EAAK0E,aAAa,cACjD4T,GAAqBtY,EAAMuQ,UAI3BvQ,aAAgBwJ,GAChBxJ,EAAKkG,cACLlG,EAAKG,iBAAiB2B,QACtB9B,EAAKG,iBAAiB,GAAIe,WAAa,MACtC,CACD,MAAM+E,EAAUjG,EAAKkG,aACrBD,EAAQ1E,SAAS,IAAIK,YAAYqE,EAAQ7E,cAK3C,SAASga,GAAiBiB,GACzB,MAAMjZ,IAAEA,EAAFD,IAAOA,GAAQkZ,EAIfV,EAAQ3c,KAAKmE,KACjBA,EAAI,GAAKC,EAAI,IAAM,GACnBD,EAAI,GAAKC,EAAI,IAAM,GACnBD,EAAI,GAAKC,EAAI,IAAM,GAUrB,MAAO,CAAEE,OANY,CACpBF,EAAI,IAAMD,EAAI,GAAKC,EAAI,IAAM,EAC7BA,EAAI,IAAMD,EAAI,GAAKC,EAAI,IAAM,EAC7BA,EAAI,IAAMD,EAAI,GAAKC,EAAI,IAAM,GAGbuY,MAAAA,GAIlB,SAASF,GAAqBrZ,EAAe0C,EAAYqW,GACxD,MAAMmB,EAAkBL,GAAcd,GACtC,IAAK,MAAMjS,KAAUpE,EAAKmD,cAAe,CACxC,KAAMiB,aAAkB6K,GAAO,SAE/B,MAAMwI,EAAerT,EAAOjB,cAAc0E,OAAQ8J,GAAMA,aAAaC,GAC/DjU,EAAa8Z,EAAalK,KAAMgE,GAAYyE,GAAarV,SAAS4Q,EAAQmG,kBAC1EC,EAAevT,EAAOxF,eAAe5B,OAAS,EAEpD,GAAIoH,EAAOoJ,UAAW,CACrBpJ,EAAOwT,QAAQC,GAAczT,EAAOoJ,UAAY6I,IAChD,SAGD,IAAIyB,EACAH,GAAgBha,GACnBma,EAAaxa,EAAIoB,WAAW,IAAIqP,QAAQ/N,GACxCoE,EAAOtF,SAASgZ,GAAY/J,QAAQ,MACpC0J,EACE5P,OAAQ0J,GAAYA,EAAQmG,kBAAoB5B,IAChD/X,QAASwT,GAAYA,EAAQwG,cAAcD,KAE7CA,EAAa1T,EAGd,MAAM4T,EAAaF,EAAWG,YAC9BC,EAAaF,EAAYA,EAAYR,GACrCM,EAAWK,UAAUH,IAKvB,SAASH,GAAcO,EAAY/B,GAClC+B,EAAOA,EAAKrF,QACZ,MAAMyE,EAAkBL,GAAcd,GAChCgC,EAAsBD,EAAKE,yBAA0BvF,QACrDwF,EAAM,GACZ,IAAK,IAAI9f,EAAI,EAAGkE,EAAQ0b,EAAoBjc,WAAY3D,EAAIkE,EAAOlE,IAClE4f,EAAoBxY,WAAWpH,EAAG8f,GAClCL,EAAaK,EAAKA,EAAKf,GACvBa,EAAoBvY,WAAWrH,EAAG8f,GAEnC,OAAOH,EAAKI,uBAAuBH,GAIpC,SAASzB,GAAuB5W,EAAY6W,GAC3C,IAAK,MAAM3b,KAAQ8E,EAAKC,iBAAkB,CACzC,IAAI4D,EAAW3I,EAAKyJ,cACpB,IAAKd,EAAU,SAEf,IAAI0T,EAAS1T,EAAS4U,aAAqB,yBACtClB,GAAUA,EAAOmB,sBAAwB,IAG9CnB,EAASA,EAAOxE,QAAQ4F,mBAAmBpB,EAAOmB,qBAAuB7B,GACzEhT,EAAWA,EAASkP,QAAQ/E,aAAa,uBAAwBuJ,GACjErc,EAAK0d,YAAY/U,KAYnB,SAASyT,GAAkBlc,EAAqB4b,EAA6BD,GAC5E,MAAMxa,EAAW,IAAIya,EAAK5b,EAAUkB,WAAYU,QAE1C6b,EAAWnD,GAAW/U,SAASqW,GAAQ,EAAI,EAC3C8B,EAAY/B,EAAO8B,EACnBE,EAAuC,EAAzB/B,EAAKgC,kBAAwBH,EAE3ChC,EAAQ3c,KAAKI,IAAI,EAAGwe,GAAa,EACjCG,EAAKF,EAAcD,EACnBI,EAAK,EAAIJ,EAAYC,EAE3B,IAAK,IAAItgB,EAAI,EAAG0gB,EAAK,EAAG3T,EAAe,GAAI/M,EAAI2C,EAAUgB,WAAY3D,IAAK,CACzE2C,EAAUyE,WAAWpH,EAAG+M,GACxB,IAAK,IAAI7M,EAAI,EAAGA,EAAI6M,EAAGxI,OAAQrE,IAAK,CAEnC,IAAIjB,EAAQwC,KAAKgS,MAAMhS,KAAKa,IAAIyK,EAAG7M,IAAMke,GAGzCnf,EAASA,GAASuhB,EAAOvhB,GAASwhB,EAGlC3c,EAAS4c,KAAQzhB,EAAQwC,KAAKkf,KAAK5T,EAAG7M,KAIxCyC,EAAUqB,SAASF,GAAUkJ,eAAc,GAG5C,SAASwR,GACRzS,EACApJ,EACAmC,EACAF,GAEA,MAAMiB,EAAMlD,EAAUie,iBAAiB,IACjChb,EAAMjD,EAAUke,iBAAiB,IAEvC,IAAIvC,EACAC,EAEJ,GAAiB,aAAbxS,EACHuS,EAAO1Z,EAAQyI,iBACfkR,EAAOD,GAAQ,EAAIxK,UAAYD,mBACR,WAAb9H,GAAsC,YAAbA,EACnCuS,EAAO1Z,EAAQ0I,eACfiR,EAAOD,GAAQ,EAAIxK,UAAYD,mBACrB9H,EAASqN,WAAW,UAC9BkF,EAAO1Z,EAAQ2I,cACfgR,EAAOD,GAAQ,EAAI3K,WAAatP,oBACtB0H,EAASqN,WAAW,aAAc,CAC5C,GAAIvT,EAAIiP,KAAMhU,GAAMA,EAAI,IAAM8E,EAAIkP,KAAMhU,GAAMA,EAAI,GAEjD,OADAgE,EAAOuP,2BAA0BtI,0BAC1B,CAAEuS,MAAO,GAEjBA,EAAO1Z,EAAQ4I,iBACf+Q,EAAOD,GAAQ,EAAI3K,WAAatP,oBACtB0H,EAASqN,WAAW,WAM9B,OALAkF,EAAO7c,KAAKmE,OAAOjD,EAAUwQ,OAAO,MAAQ,IAAM,EAAI,GACtDoL,EAAOD,GAAQ,EAAI3K,WAAatP,YAC5B1B,EAAUiK,mBAAqB0R,EAAO,GACzC3b,EAAUqB,SAAS,IAAIua,EAAK5b,EAAUkB,aAEhC,CAAEya,MAAO,MACNvS,EAASqN,WAAW,YAAa,CAC3C,GAAIvT,EAAIiP,KAAMhU,GAAMA,EAAI,IAAM8E,EAAIkP,KAAMhU,GAAMA,EAAI,GAEjD,OADAgE,EAAOuP,2BAA0BtI,0BAC1B,CAAEuS,MAAO,GAEjBA,EAAO1Z,EAAQ6Y,eACfc,EAAOD,GAAQ,EAAI3K,WAAatP,qBACtB0H,EAASqN,WAAW,KAU9B,UAAUjR,yCAAwC4D,OATlD,GAAIlG,EAAIiP,KAAMhU,GAAMA,GAAK,IAAM8E,EAAIkP,KAAMhU,GAAMA,EAAI,GAElD,OADAgE,EAAOuP,2BAA0BtI,2BAC1B,CAAEuS,MAAO,GAEjBA,EAAO1Z,EAAQ6I,gBACf8Q,EACIA,EADG1Y,EAAIiP,KAAMhU,GAAMA,EAAI,GAChBwd,GAAQ,EAAIxK,UAAYD,WACxByK,GAAQ,EAAI3K,WAAatP,aAKrC,MAAO,CAAEia,KAAAA,EAAMC,KAAAA,GAGhB,SAASN,GAA8B1W,GACtC,MAAMuZ,EAAwB,GACxBC,EAAgC,GACtC,IAAK,MAAMte,KAAQ8E,EAAKC,iBAAkB,CACzC,MAAM7E,EAAYF,EAAK0E,aAAa,YAChCxE,GAAWme,EAAUje,KAAKF,GAC9B,IAAK,MAAMjD,KAAU+C,EAAKK,cAAe,CACxC,MAAMH,EAAYjD,EAAOyH,aAAa,YAClCxE,GAAWoe,EAAkBle,KAAKF,IAIxC,GAAyB,IAArBme,EAAUvc,OACb,UAAU4D,iDAGX,MAAMzC,EAAOsb,GAAiBF,EAAW,GAMzC,GAAIC,EAAkBxc,OAAS,EAAG,CACjC,MAAQsB,IAAKob,EAAQrb,IAAKsb,GAAWF,GAAiBD,EAAmB,GACzElb,EAAIH,EAAKG,IAAKH,EAAKG,IAAKA,EAAIob,EAAQ7C,EAAM6C,EAAQA,EAAQ,GAAI,CAAC,EAAG,EAAG,KACrErb,EAAIF,EAAKE,IAAKF,EAAKE,IAAKA,EAAIsb,EAAQ9C,EAAM8C,EAAQA,EAAQ,GAAI,CAAC,EAAG,EAAG,KAGtE,OAAOxb,EAIR,SAASsb,GAA4Bte,EAAuBc,GAC3D,MAAMqC,EAAgB,IAAI9C,MAAMS,GAAagZ,KAAKxJ,UAC5CpN,EAAgB,IAAI7C,MAAMS,GAAagZ,MAAMxJ,UAE7CmO,EAAmB,GACnBC,EAAmB,GAEzB,IAAK,MAAM3Y,KAAY/F,EAAW,CACjC+F,EAASmY,iBAAiBO,GAC1B1Y,EAASoY,iBAAiBO,GAC1B,IAAK,IAAIphB,EAAI,EAAGA,EAAIwD,EAAaxD,IAChC6F,EAAI7F,GAAKyB,KAAKoE,IAAIA,EAAI7F,GAAImhB,EAAOnhB,IACjC4F,EAAI5F,GAAKyB,KAAKmE,IAAIA,EAAI5F,GAAIohB,EAAOphB,IAInC,MAAO,CAAE6F,IAAAA,EAAKD,IAAAA,GAiBf,SAAS8Y,GAAc5D,GACtB,OAAOuG,EAA6B,GAAuB,CAAC,EAAG,EAAG,EAAG,GAAIvG,EAAU/U,OAAQ,CAC1F+U,EAAUsD,MACVtD,EAAUsD,MACVtD,EAAUsD,QCnaCkD,MAAAA,GAA8D,CAAEC,MAAO,QA2BvEC,GAAW7c,IACvB,MAAMC,QAAe0c,GAAqB3c,GACpCmV,EAAUlV,EAAQkV,QAExB,IAAKA,EACJ,UAAU3R,yEAGX,uBACOkR,EAASyB,UACdjB,GAAQ,CACPC,QAASA,EACTpa,OAAQ,SAETie,GAAS,CAGRtR,QAA2B,WAAlBzH,EAAQ2c,MAAqB,KAAO,8CAC7ClU,iBAAkB,GAClBG,iBAAkB,GAClBD,cAAe,EACfD,eAAgB,KAIlB+L,EACE7M,gBAAgBiV,GAChB5T,aAAY,GACZC,kBAAkB,CAClBZ,OACmB,WAAlBtI,EAAQ2c,MACLE,EAAmB1T,cAAc2T,SACjCD,EAAmB1T,cAAc4T,WCxDnCC,GAAmD,YAUzCC,GAAWld,EAA8Bid,IAIxD,aAFqBA,GAAwBjd,GAEtC/F,GAnBK,aAmBiBmb,MAAAA,IAC5B,MAAMjV,EAASD,EAAIE,YAMnB,IAJuBF,EACrBI,UACA6c,qBACAlT,IAAKmT,GAAQA,EAAIC,eACC9Z,SAAS,uCAE5B,YADApD,EAAOuP,+EAIR,MAAM4N,EAAepd,EAAI2H,gBAAgB0V,GACnCC,EAAgBtd,EAAI2H,gBAAgB4V,GACpCC,EAAqBxd,EAAI2H,gBAAgB8V,GAEzCC,EAAgB,IAAIrhB,IAE1B,IAAK,MAAMkK,KAAYvG,EAAII,UAAU8F,gBAAiB,CACrD,MAAMyX,EAAYpX,EAAS4U,aAAoC,uCAC/D,IAAKwC,EAAW,SAGhB,MAAMC,EAAWN,EACfO,iBACAC,kBAAkB,GAClBC,uBAAuBJ,EAAUK,qBAGnCN,EAAc1hB,IAAI2hB,EAAUM,gCAC5BP,EAAc1hB,IAAIuK,EAAS2X,uBAC3BR,EAAc1hB,IAAIuK,EAAS4X,+BAO3B5X,EACE6X,mBAAmBT,EAAUU,oBAC7BC,kBAAkB,GAClBC,mBAAmB,GACnB7N,aAAa,oBAAqB0M,EAAaoB,YAAYC,OAAO,MAClE/N,aAAa,yBAA0BkN,GAGzC,MAAMc,EAAiBf,EAAUgB,oBAC7BD,IACHnY,EAASqY,oBAAoBF,GAC7BnY,EAASsY,0BAA2BC,KAAKnB,EAAUoB,0BAIpD,MAAMC,EAAYrB,EAAUM,+BAC5B,GAAIe,EAAW,CAEd,MAAMC,EAAgBtB,EAAUuB,mCAC1BC,EAAkBnf,EAAIof,sBACtBzkB,GAAeqkB,EAAWG,EAAiB,CAACnkB,EAAQG,EAAGE,KAC5DL,EAAOsB,IAAInB,EAAGE,EAAG,EAAG,OAErBuiB,EAASyB,mBAAmBF,GAC5BvB,EAAS0B,wBAAwBH,GACjCvB,EAAS2B,yBAA0BT,KAAKG,GACxCrB,EAAS4B,8BAA+BV,KAAKG,GAG7C,MAAMQ,EAAmB9B,EAAU+B,sBAC7BC,EAAoB3f,EAAIof,sBACxBzkB,GAAeqkB,EAAWW,EAAmB,CAAC3kB,EAAQG,EAAGE,KAE9D,MAAMukB,EAAY,IAAMhjB,KAAKgS,MAAM5T,EAAOoB,IAAIjB,EAAGE,EAAG,GAAKokB,GACzDzkB,EAAOsB,IAAInB,EAAGE,EAAG,EAAG,GACpBL,EAAOsB,IAAInB,EAAGE,EAAG,EAAGukB,GACpB5kB,EAAOsB,IAAInB,EAAGE,EAAG,EAAG,GACpBL,EAAOsB,IAAInB,EAAGE,EAAG,EAAG,OAErBkL,EAASsZ,4BAA4BF,GACrCpZ,EAASuZ,kCAAmChB,KAAKG,QAEjDrB,EAASG,uBAAuBJ,EAAUK,qBAC1CzX,EAASgY,mBAAmB,EAAIZ,EAAU+B,uBAI3CnZ,EAASmK,aAAa,sCAAuC,MAI9D8M,EAAmBrY,UAGnB,IAAK,MAAM4a,KAAOrC,EACbqC,GAAoC,IAA7BA,EAAIla,cAAcnG,QAAcqgB,EAAI5a,UAGhDlF,EAAOW,iCCxHT,MAMMof,GAAiC,YASvBC,GAAOngB,EAA0BkgB,IAIhD,aAFqBA,GAAoBlgB,GAElC/F,GAnBK,SAmBkBiG,IAC7B,MAAMC,EAASD,EAAIE,YACbggB,EAAU,IAAItkB,IAEpB,IAAK,MAAM8G,KAAQ1C,EAAII,UAAUqC,aAChC,IAAK,MAAM7E,KAAQ8E,EAAKC,iBAAkB,CACzC,MAAMkB,EAAUjG,EAAKkG,aACrB,IAAKD,EAAS,SAEd,MAAMsc,EAAiBviB,EAAK0E,aAAa,YAAaxD,WAGtD,IAAK,MAAMgX,KAAgBlY,EAAKG,iBAC/BH,EAAKW,KAAKuX,EAAcsK,GAAgBtK,EAAcjS,EAAS5D,EAAQigB,IAG7B,IAAtCpK,EAAajQ,cAAcnG,QAAcoW,EAAa3Q,UAI3D,IAAK,MAAMtK,KAAU+C,EAAKK,cACzB,IAAK,MAAM6X,KAAgBjb,EAAOkD,iBACjClD,EAAO0D,KAAKuX,EAAcsK,GAAgBtK,EAAcjS,EAAS5D,EAAQigB,IAG/B,IAAtCpK,EAAajQ,cAAcnG,QAAcoW,EAAa3Q,UAI5D,MAAMkb,EAAiBziB,EAAK0E,aAAa,YAAaxD,WACtDmB,EAAOW,iBAAkBtD,GAAc6iB,EAAgBE,gBAGvDziB,EAAK0iB,WAAW,MACqB,IAAjCzc,EAAQgC,cAAcnG,QAAcmE,EAAQsB,UAIlDlF,EAAOW,6BAIT,SAASwf,GACRtK,EACAjS,EACA5D,EACAigB,GAEA,GAAIA,EAAQpkB,IAAIga,IAAiBoK,EAAQ9jB,IAAI0Z,GAAeha,IAAI+H,GAE/D,OADA5D,EAAOW,kDAAmDkV,EAAa7L,eAChEiW,EAAQ9jB,IAAI0Z,GAAe1Z,IAAIyH,GAGvC,MAAMkS,EAAeD,EAAaL,QAC5B8K,EAAYzK,EAAa9W,WAAYmQ,YAC3C4G,EAAa5W,SAAS,IAAIohB,EAAU1c,EAAQ/E,WAAagX,EAAalX,mBAEtE,MAAMsJ,EAAe,GACrB,IAAK,IAAI/M,EAAI,EAAGA,EAAI0I,EAAQ/E,WAAY3D,IACvC4a,EAAavT,WAAWrH,EAAG2a,EAAavT,WAAWsB,EAAQ2c,UAAUrlB,GAAI+M,IAM1E,OAHKgY,EAAQpkB,IAAIga,IAAeoK,EAAQ5jB,IAAIwZ,EAAc,IAAIla,KAC9DskB,EAAQ9jB,IAAI0Z,GAAexZ,IAAIuH,EAASkS,GAEjCA,ECnFR,MAQM0K,GAA6C,CAClDC,WAAW,YAcIC,GAAQ7gB,EAA2B2gB,IAClD,MAAM1gB,QAAe0gB,GAAqB3gB,GAE1C,OAAO/F,GA1BK,UA0BiBmb,MAAAA,IAC5B,MAAMjV,EAASuU,EAAStU,YACxB,IAAI0gB,EAAW,QAETpM,EAASyB,UAAUgK,MAEzB,IAAK,MAAMvd,KAAQ8R,EAASpU,UAAUqC,aACrC,IAAK,MAAM7E,KAAQ8E,EAAKC,iBAAkB,CACzC,MAAMqI,EAAWpN,EAAK0E,aAAa,YACnC,IAAIue,EAASjjB,EAAK0E,aAAa,UAE/B,GAAIvC,EAAQ2gB,WAAaG,EACxBA,EAAO1b,kBACG0b,EAAQ,CAClB5gB,EAAOW,oDACP,SAGDigB,EAASrM,EACP1C,iBACA3S,SAAS,IAAI6I,aAAmC,EAAtBgD,EAASlM,aACnCiT,QAAQ,QAEV,MAAMxU,EAAI,CAAC,EAAG,EAAG,GACXC,EAAI,CAAC,EAAG,EAAG,GACX0E,EAAI,CAAC,EAAG,EAAG,GAEjB,IAAK,IAAI/G,EAAI,EAAGA,EAAI6P,EAASlM,WAAY3D,GAAK,EAAG,CAChD6P,EAASzI,WAAWpH,EAAI,EAAGoC,GAC3ByN,EAASzI,WAAWpH,EAAI,EAAGqC,GAC3BwN,EAASzI,WAAWpH,EAAI,EAAG+G,GAE3B,MAAM4e,EAAaC,GAAcxjB,EAAGC,EAAG0E,GAEvC2e,EAAOre,WAAWrH,EAAI,EAAG2lB,GACzBD,EAAOre,WAAWrH,EAAI,EAAG2lB,GACzBD,EAAOre,WAAWrH,EAAI,EAAG2lB,GAG1BljB,EAAKsU,aAAa,SAAU2O,GAC5BD,IAIGA,EAGJ3gB,EAAOW,4BAFPX,EAAOuP,qEAQV,SAASuR,GAAcxjB,EAASC,EAAS0E,GACxC,MAAM8e,EAAI,CAACxjB,EAAE,GAAKD,EAAE,GAAIC,EAAE,GAAKD,EAAE,GAAIC,EAAE,GAAKD,EAAE,IACxC0jB,EAAI,CAAC/e,EAAE,GAAK3E,EAAE,GAAI2E,EAAE,GAAK3E,EAAE,GAAI2E,EAAE,GAAK3E,EAAE,IAM9C,OAAOwa,EAAU,CAAC,EAAG,EAAG,GALd,CACTiJ,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GACvBD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GACvBD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,KCtFzB,MAOMC,GAAiD,CACtDrX,YAAY,EACZlG,QAAQ,GAkBHwd,GAAY,CAACrhB,EAA6BohB,MAC/C,MAAMnhB,QAAemhB,GAAuBphB,GAE5C,OAAO/F,GA9BK,YA8BiBmb,MAAAA,IAC5B,MAAMjV,EAASD,EAAIE,aAEI,IAAnBH,EAAQ4D,QAad,SAAyB3D,EAAeC,EAAiBF,GACxD,MAAMqhB,EAAe,IAAI/kB,IACxB2D,EACEI,UACA+T,cACApK,IAAKvM,GAAMA,EAAEqQ,WAGhB7N,EAAII,UACFqC,aACAhC,QAAQ,CAACiC,EAAM2e,KACf,GAAInjB,MAAMojB,QAAQvhB,EAAQ4D,UAAY5D,EAAQ4D,OAAON,SAASX,EAAKuH,WAElE,YADAhK,EAAOW,mCAAiCygB,gBAAwB3e,EAAKuH,eAItEhK,EAAOW,8CAA4C8B,EAAKuH,eAExD,MAAM2H,EAAS5R,EACbuhB,aAAa7e,EAAKuH,WAClBuX,OAAOC,GAAgB/e,EAAKuH,WAAa,OAAQmX,IAEnD1e,EAAKC,iBAAiBlC,QAAS2B,IAC9B,MAAMyB,EAAUzB,EAAU0B,aACtBD,GAASA,EAAQmO,UAAUJ,GAC/BxP,EAAUrE,iBAAiB0C,QAAS3C,GAAcA,EAAUkU,UAAUJ,IACtExP,EAAUnE,cAAcwC,QAASihB,IAChCA,EAAW3jB,iBAAiB0C,QAAS3C,GAAcA,EAAUkU,UAAUJ,UAxC5C+P,CAAgB3hB,EAAKC,EAAQF,IAChC,IAAvBA,EAAQ8J,YA6Cd,SAA6B7J,EAAeC,EAAiBF,GAC5D,MAAMqhB,EAAe,IAAI/kB,IACxB2D,EACEI,UACA+T,cACApK,IAAKvM,GAAMA,EAAEqQ,WAGhB7N,EAAII,UACFE,iBACAG,QAAQ,CAACwN,EAAM2T,KACf,GAAI1jB,MAAMojB,QAAQvhB,EAAQ8J,cAAgB9J,EAAQ8J,WAAWxG,SAAS4K,EAAKhE,WAE1E,YADAhK,EAAOW,wCAAsCghB,gBAAwB3T,EAAKhE,eAI3EhK,EAAOW,mDAAiDqN,EAAKhE,eAE7D,MAAM2H,EAAS5R,EACbuhB,aAAatT,EAAKhE,WAClBuX,OAAOC,GAAgBxT,EAAKhE,WAAa,YAAamX,IAExDnT,EAAKhK,eAAexD,QAASuD,IAC5B,MAAME,EAAQF,EAAQG,WAChBC,EAASJ,EAAQK,YACnBH,GAAOA,EAAM8N,UAAUJ,GACvBxN,GAAQA,EAAO4N,UAAUJ,OAvEGiQ,CAAoB7hB,EAAKC,EAAQF,GAE9DA,EAAQ4D,QAAW5D,EAAQ8J,YAC/B5J,EAAOuP,4EAGFxP,EAAIiW,UAAUpD,GAAM,CAAEhQ,cAAe,CAACC,EAAa4P,WAEzDzS,EAAOW,iCAoET,SAAS6gB,GAAgBK,EAAkBC,GAC1C,IAAInU,KAASkU,QACT3mB,EAAI,EACR,KAAO4mB,EAASjmB,IAAI8R,IAAMA,KAASkU,KAAY3mB,UAC/C,OAAOyS,ECvGR,MAMMoU,GAA+C,CAAEC,UAAW,MASrDC,GAAW,CAACpiB,EAA4BkiB,MACpD,MAAMjiB,QAAeiiB,GAAsBliB,GAE3C,OAAO/F,GAlBK,WAkBiBmb,MAAOV,EAAoBla,KACvD,MAAM6nB,EAAmB,IAAI9lB,IACvB+lB,EAAmB5N,EAASpU,UAAUkG,gBAAgB5G,OACtDO,EAASuU,EAAStU,YAExB,IAAImiB,GAAsB,EAE1B,IAAK,MAAMte,KAAayQ,EAASpU,UAAUE,iBAAkB,CAE5D,MAAMgiB,EAAqB,IAAI1mB,IAC/B,IAAK,MAAMqY,KAAWlQ,EAAU0K,eAC/B6T,EAAmBhmB,IAAI2X,EAAQsO,aAAetO,EAAQmG,iBAGvD,IAAK,MAAMpW,KAAWD,EAAUE,eACS,YAApCqe,EAAmBlmB,IAAI4H,GAIQ,SAA/BA,EAAQwe,oBAAgE,WAA/Bxe,EAAQwe,qBACpDL,EAAiBnmB,IAAIgI,EAAQG,YAC7Bge,EAAiBnmB,IAAIgI,EAAQK,aAC7Boe,GAASze,EAASse,EAAmBlmB,IAAI4H,GAAWjE,IANpDsiB,GAAsB,EAWzB,IAAK,MAAMze,KAAY1F,MAAMC,KAAKgkB,EAAiBhK,UACrCvU,EAASiC,cAAcoK,KAAMoE,KAAQA,aAAatO,KACpDnC,EAASuB,UAKIqP,EAASpU,UAAUkG,gBAAgB5G,OACrC0iB,IAAqB/nB,GAAmBC,EArDpD,WAqDmE,gBACvEka,EAASyB,UAAU9S,GAAM,CAAEN,cAAe,CAACC,EAAaC,aAG3Dsf,GACHpiB,EAAOuP,gFAGRvP,EAAOW,gCAIT,SAAS6hB,GAASze,EAA2B0e,EAAuC3iB,GACnF,MAAMmE,EAAQF,EAAQG,WAAYsR,QAC5BrR,EAASJ,EAAQK,YAAaoR,QAE9BwM,EAAYliB,EAAQkiB,UACpBU,EAAgB3e,EAAQwe,mBAExBI,EAAY1e,EAAMpF,WAAa,EAC/B+jB,EAAgB,GAChBzoB,EAAkB,GAClB0oB,EAAsB,GACtBC,EAAsB,GAE5B,IAAIC,EAAa,EAEjB,IAAK,IAAI7nB,EAAI,EAAGA,EAAIynB,IAAaznB,EAAG,CACnC,MAAM8nB,EAAW/e,EAAMsc,UAAUwC,EAAa,GACxCE,EAAOhf,EAAMsc,UAAUrlB,GACvBgoB,EAAWjf,EAAMsc,UAAUrlB,EAAI,GAC/BsG,GAAKyhB,EAAOD,IAAaE,EAAWF,GAE1C,IAAIG,GAAO,EAGX,GAAIF,IAASC,IAAmB,IAANhoB,GAAW+nB,IAAShf,EAAMsc,UAAU,IAK7D,GAJApc,EAAO7B,WAAWygB,EAAa,EAAGD,GAClC3e,EAAO7B,WAAWpH,EAAGf,GACrBgK,EAAO7B,WAAWpH,EAAI,EAAG2nB,GAEH,WAAlBH,GAAuC,aAATD,EAAqB,CAEtD,MAAMW,EAASC,EAAMT,EAAaE,EAAmBD,EAAmBrhB,GAClE8hB,EAAQC,EAAST,EAAmB3oB,GAAiBopB,EAASppB,EAAe0oB,GACnFM,GAAQjS,EAAUC,GAAGhX,EAAOipB,EAAQpB,IAAcsB,EAAQrU,OAAOwI,SAAW9a,KAAK6mB,WACrD,WAAlBd,EAA4B,CAEtC,MAAMU,EAASK,GAAMb,EAAKE,EAAWD,EAAWrhB,GAChD2hB,GAAQjS,EAAUC,GAAGhX,EAAOipB,EAAQpB,OACR,SAAlBU,IAEVS,GAAQjS,EAAUC,GAAGhX,EAAO2oB,KAAe5R,EAAUC,GAAGhX,EAAO0oB,IAK7DM,IACCjoB,IAAM6nB,IACT9e,EAAMyf,UAAUX,EAAY9e,EAAMsc,UAAUrlB,IAC5CiJ,EAAO5B,WAAWwgB,EAAY5e,EAAO7B,WAAWpH,EAAG0nB,KAEpDG,KAKEJ,EAAY,IACf1e,EAAMyf,UAAUX,EAAY9e,EAAMsc,UAAUoC,IAC5Cxe,EAAO5B,WAAWwgB,EAAY5e,EAAO7B,WAAWqgB,EAAWC,IAC3DG,KAIGA,IAAe9e,EAAMpF,YACxBoF,EAAM/E,SAAS+E,EAAMlF,WAAYE,MAAM,EAAG8jB,IAC1C5e,EAAOjF,SAASiF,EAAOpF,WAAYE,MAAM,EAAG8jB,EAAa5e,EAAOxF,mBAChEoF,EAAQ4f,SAAS1f,GACjBF,EAAQ6f,UAAUzf,KAElBF,EAAMiB,UACNf,EAAOe,WAIT,SAAS2e,GAAKC,EAAYC,EAAYviB,GACrC,OAAOsiB,GAAM,EAAItiB,GAAKuiB,EAAKviB,EAG5B,SAASiiB,GAAMO,EAAe1mB,EAAaC,EAAaiE,GACvD,IAAK,IAAItG,EAAI,EAAGA,EAAIoC,EAAEmC,OAAQvE,IAAK8oB,EAAI9oB,GAAK2oB,GAAKvmB,EAAEpC,GAAIqC,EAAErC,GAAIsG,GAC7D,OAAOwiB,EC5JR,MAaMC,GAA+C,CACpDlqB,KAAM,GACNmqB,IAAK,GACL3c,QAAS,KACTwE,MAAM,YAMSoY,GAAUtkB,EAA4BokB,IACrD,MAAMnkB,QAAcmkB,GAAsBpkB,GAE1C,OAAO/F,GA1BK,WA0BkBiG,IAE7B,MAAMC,EAASD,EAAIE,YACbC,EAAOH,EAAII,UACX+jB,EAAMpkB,EAAQokB,IAGdE,EAAgBlkB,EAAKqT,YACzBjJ,OAAQsF,GAASA,EAAK5F,UAAU6K,MAAM/U,EAAQyH,UAG5CzH,EAAQiM,MACXqY,EAAcrY,KAAK,CAACzO,EAAGC,IAAMD,EAAE0M,UAAYzM,EAAEyM,UAAY,GAAK,GAI/D,MAAMgE,EAAOjO,EAAIskB,gBAAgBvkB,EAAQ/F,MACnCuqB,EAAapkB,EAAKgU,cAAc,GACtCkQ,EAAc5jB,QAAQ,CAACoP,EAAM1U,KAE5B,IAAIqpB,EACAC,EACM,IAANtpB,GACHqpB,EAAa,CAACrpB,EAAIgpB,GAAMhpB,EAAI,GAAKgpB,GACjCM,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IACpBtpB,IAAMkpB,EAAc3kB,OAAS,GACvC8kB,EAAa,EAAErpB,EAAI,GAAKgpB,EAAKhpB,EAAIgpB,GACjCM,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAE9BD,EAAa,EAAErpB,EAAI,GAAKgpB,EAAKhpB,EAAIgpB,GAAMhpB,EAAI,GAAKgpB,GAChDM,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIxC,MAAMvgB,EAAQlE,EAAI8R,iBAChB3S,SAAS,IAAI6I,aAAawc,IAC1BxS,UAAUuS,GACNngB,EAASpE,EAAI8R,iBACjB3S,SAAS,IAAI6I,aAAayc,IAC1BzS,UAAUuS,GACVxS,QAAQ2S,EAASC,KAAKC,MAClB5gB,EAAUhE,EAAI6kB,yBAClBC,iBAAiBC,EAAiBC,cAAcC,MAChDrB,SAAS1f,GACT2f,UAAUzf,GACN6P,EAAUjU,EAAIklB,yBAClBzK,cAAc5K,GACdsV,cAAc7Q,EAAiBmE,WAAWF,OAC1C6M,WAAWphB,GACbiK,EAAKoX,WAAWrhB,GAASshB,WAAWrR,KAGrChU,EAAOW,+BCnET,MAmBa2kB,GAAuC,CACnDtD,UAjBS,KAkBTvB,WAAW,YAyBI8E,GAAK1lB,EAAwBylB,IAC5C,MAAMxlB,QAAewlB,GAAkBzlB,GAEvC,GAAIC,EAAQkiB,UAAY,IAAOliB,EAAQkiB,UAAY,EAClD,UAAU3e,4CAGX,OAAOvJ,GArDK,OAqDiBmb,MAAOlV,EAAe1F,KAClD,MAAM2F,EAASD,EAAIE,YAEnB,IAAK,MAAMwC,KAAQ1C,EAAII,UAAUqC,aAChC,IAAK,MAAM7E,KAAQ8E,EAAKC,iBACvB8iB,GAAczlB,EAAKpC,EAAMmC,GAMtB1F,GAAmBC,EAhEb,OAgE4B,gBAChC0F,EAAIiW,UAAU9S,GAAM,CAAEN,cAAe,CAACC,EAAaC,aAG1D9C,EAAOW,oCA6BO6kB,GAAczlB,EAAepC,EAAiBmC,GACzDnC,EAAKkG,eAAiB/D,EAAQ2gB,WAC9B9iB,EAAK0J,YAAcF,EAAU6D,KAAKC,SACZ,IAAtBnL,EAAQkiB,UAQb,SAAyBjiB,EAAepC,GAEvC,GAAIA,EAAKkG,aAAc,OAEvB,MAAM+G,EAAOjN,EAAKG,iBAAiB,GAC7B2nB,EAAc7a,EAAK/L,WACnB8S,EAAS/G,EAAKgH,YACdhO,EAAU7D,EACd8R,iBACAE,UAAUJ,GACVG,QAAQ2S,EAASC,KAAKgB,QACtBxmB,SAASC,GAAcsmB,IACzB9nB,EAAK0iB,WAAWzc,GAnBf+hB,CAAgB5lB,EAAKpC,GAuBvB,SAAwBoC,EAAepC,EAAiBmC,GACvD,MAAME,EAASD,EAAIE,YAEb2lB,EAAcjoB,EAAK0E,aAAa,YAChCgT,EAAa1X,EAAKkG,cAAgB9D,EAAI8R,iBAAiB3S,SAASC,GAAcymB,EAAY/mB,aAC1FgnB,EAAgB,IAAIrmB,YAAY,IAAIpD,IAAIiZ,EAAWtW,aAInDijB,EAAYrlB,KAAKmE,IAAIhB,EAAQkiB,UAAW/S,OAAOwI,SAC/CqO,EAA6C,GACnD,IAAK,MAAM7e,KAAYtJ,EAAKuJ,gBAAiB,CAC5C,MAAMrJ,EAAYF,EAAK0E,aAAa4E,GACpC6e,EAAmB7e,GAAY8e,GAAsB9e,EAAUpJ,EAAWmkB,GA0J5E,IAAkBgE,EAvJjBhmB,EAAOW,qCAuJUqlB,EAvJuCF,EAwJjD7rB,OAAO0L,QAAQqgB,GACpBlc,IAAI,EAAEhO,EAAGE,QAAUF,KAAKE,KACxBgF,KAAK,SAxJP,MAAMilB,EAAa,CAAC,EAAG,EAAG,GACpBC,EAAa,CAAC,EAAG,EAAG,GAE1BL,EAAc9Z,KAAK,CAACzO,EAAGC,KACtBqoB,EAAYtjB,WAAWhF,EAAG2oB,GAC1BL,EAAYtjB,WAAW/E,EAAG2oB,GACnBD,EAAK,GAAKC,EAAK,GAAK,GAAK,IAKjC,MAAMC,EAAUhnB,GAAc0mB,EAAcpmB,QACtC2mB,EAAWjnB,GAAc0mB,EAAcpmB,QAEvCygB,EAAiB0F,EAAY/mB,WACnC,IAAIuhB,EAAiB,EACjBiG,EAAY,EAEhB,IAAK,IAAInrB,EAAI,EAAGA,EAAI2qB,EAAcpmB,OAAQvE,IAAK,CAC9C,MAAMoC,EAAIuoB,EAAc3qB,GAExB,IAAK,IAAIE,EAAIF,EAAI,EAAGE,GAAK,EAAGA,IAAK,CAChC,MAAMmC,EAAI4oB,EAAQN,EAAczqB,IAMhC,GAJAwqB,EAAYtjB,WAAWhF,EAAG2oB,GAC1BL,EAAYtjB,WAAW/E,EAAG2oB,GAGtBvpB,KAAKa,IAAIyoB,EAAK,GAAKC,EAAK,IAAMJ,EAAkB,SACnD,MAGDO,IAGA,MAAMC,EAAc3oB,EAAKuJ,gBAAgBqf,MAAOtf,GAGxCuf,GAFW7oB,EAAK0E,aAAa4E,GAEA3J,EAAGC,EADrBuoB,EAAmB7e,KAGhCwf,EAAgB9oB,EAAKK,cAAcuoB,MAAO3rB,GACxCA,EAAOsM,gBAAgBqf,MAAOtf,GAG7Buf,GAFW5rB,EAAOyH,aAAa4E,GAEF3J,EAAGC,EADrBuoB,EAAmB7e,MAKvC,GAAIqf,GAAeG,EAAe,CACjCN,EAAQ7oB,GAAKC,EACb,OAMD6oB,EAAS9oB,GADN6oB,EAAQ7oB,KAAOA,EACJ8iB,IAEAgG,EAASD,EAAQ7oB,IAIjC0C,EAAOW,sCAAyChE,KAAKgS,MAAM0X,EAAYR,EAAcpmB,iBACrFO,EAAOW,eAAkBtD,GAAc6iB,EAAgBE,gBAIvD,MAAMsG,EAAkBrR,EAAWxW,WAC7B8nB,EAAkBxnB,GAAcunB,EAAiBb,EAAcpmB,QACrE,IAAK,IAAIvE,EAAI,EAAGA,EAAIwrB,EAAiBxrB,IACpCyrB,EAAgBzrB,GAAKkrB,EAAS/Q,EAAWkL,UAAUrlB,IAEpDyC,EAAK0iB,WAAWhL,EAAWG,QAAQtW,SAASynB,IACJ,IAApCtR,EAAWzP,cAAcnG,QAAc4V,EAAWnQ,UAItD,IAAK,MAAM0hB,KAAWjpB,EAAKG,iBAC1B+oB,GAAelpB,EAAMipB,EAASR,EAAUhG,GAEzC,IAAK,MAAMxlB,KAAU+C,EAAKK,cACzB,IAAK,MAAM4oB,KAAWhsB,EAAOkD,iBAC5B+oB,GAAejsB,EAAQgsB,EAASR,EAAUhG,GAzH3C0G,CAAe/mB,EAAKpC,EAAMmC,IAqI5B,SAAS+mB,GACRhgB,EACA+f,EACA7R,EACAtW,GAEA,MAAMsoB,GAZ0CznB,EAYTsnB,EAAQ7nB,WAZWU,EAYEhB,EAAWmoB,EAAQjoB,qBAVpE2hB,EADOhhB,EAAM4P,aACHzP,IAFtB,IAAiDH,EAAUG,EAa1D,MAAMunB,EAAUJ,EAAQpR,QAAQtW,SAAS6nB,GACnCE,EAAO,IAAIpY,WAAWpQ,GAE5B,IAAK,IAAIvD,EAAI,EAAG+M,EAAK,GAAgB/M,EAAI6Z,EAAQtV,OAAQvE,IACnD+rB,EAAKlS,EAAQ7Z,MACjB8rB,EAAQzkB,WAAWwS,EAAQ7Z,GAAI0rB,EAAQtkB,WAAWpH,EAAG+M,IACrDgf,EAAKlS,EAAQ7Z,IAAM,GAIrB2L,EAAOvI,KAAKsoB,EAASI,GAGgB,IAAjCJ,EAAQhhB,cAAcnG,QAAcmnB,EAAQ1hB,UAGjD,MAAMgiB,GAAK,GACLC,GAAK,GAGX,SAASpB,GAAsB9e,EAAkBpJ,EAAqBmkB,GAGrE,MAAiB,WAAb/a,GAAsC,YAAbA,EApQrB,GAqQJA,EAASqN,WAAW,UAtQjB,IAuQHrN,EAASqN,WAAW,aAxQd,KAyQNrN,EAASqN,WAAW,WAtQhB,EAuQJrN,EAASqN,WAAW,YAtQf,KAwQT4S,GAAGznB,OAAS0nB,GAAG1nB,OAAS,EACxB5B,EAAUie,iBAAiBoL,IAC3BrpB,EAAUke,iBAAiBoL,IAEpBnF,GADOrlB,KAAKmE,OAAOqmB,IAAMxqB,KAAKoE,OAAOmmB,KAAO,IAKpD,SAASV,GAAkB3oB,EAAqBP,EAAWC,EAAWykB,EAAmBoF,GACxFvpB,EAAUyE,WAAWhF,EAAG4pB,IACxBrpB,EAAUyE,WAAW/E,EAAG4pB,IACxB,IAAK,IAAIjsB,EAAI,EAAG8M,EAAKnK,EAAUc,iBAAkBzD,EAAI8M,EAAI9M,IACxD,GAAIyB,KAAKa,IAAI0pB,GAAGhsB,GAAKisB,GAAGjsB,IAAM8mB,EAC7B,SAGF,SCjSD,MAkBaqF,GAAmE,CAC/EC,MAAO,GACPxlB,MAAO,KACPylB,YAAY,GAkCAC,GAAY3nB,IACxB,MAAMC,QAAeunB,GAAsBxnB,GAErC4nB,EAAa3nB,EAAQ2nB,WAE3B,IAAKA,EACJ,UAAUpkB,6EAGX,OAAOvJ,GAhEK,WAgEiBmb,MAAOV,EAAoBla,KACvD,MAAM2F,EAASuU,EAAStU,kBAElBwnB,EAAWvS,YACXX,EAASyB,UAAUuP,GAAK,CAAE9E,WAAW,KAG3C,IAAK,MAAMhe,KAAQ8R,EAASpU,UAAUqC,aACrC,IAAK,MAAM7E,KAAQ8E,EAAKC,iBACnB/E,EAAK0J,YAAcF,EAAU6D,KAAKK,UAMtCqc,GAAkBnT,EAAU5W,EAAMmC,GALjCE,EAAOuP,8CACkC9M,EAAKuH,6CAU5C5P,GAAmBC,EArFb,WAqF4B,gBAChCka,EAASyB,UAAU9S,GAAM,CAAEN,cAAe,CAACC,EAAaC,aAG/D9C,EAAOW,yCAIO+mB,GAAkBnT,EAAoB5W,EAAiBkC,GACtE,MAAMC,QAAeunB,GAAsBxnB,GACrC4nB,EAAa3nB,EAAQ2nB,WAErBznB,EAASuU,EAAStU,YAClB8K,EAAWpN,EAAK0E,aAAa,YAC7BgT,EAAa1X,EAAKkG,aAClBqc,EAAiBnV,EAASlM,WAEhC,IAAI8oB,EAAgB5c,EAAShM,WACzB0W,EAAeJ,EAAWtW,WAI9B,GAAIgM,EAASpG,qBAAuB8f,EAASmD,cAAcC,MAC1D,GAAI9c,EAASnG,gBAAiB,CAC7B,MAAMxG,EAAMupB,EACNtpB,EAAM,IAAI0J,aAAa3J,EAAIqB,QAGjC,IAAK,IAAIvE,EAAI,EAAG8M,EAAK+C,EAASlM,WAAYoJ,EAAK,GAAgB/M,EAAI8M,EAAI9M,IACtE+M,EAAK8C,EAASzI,WAAWpH,EAAG+M,GAC5B8C,EAAS7L,SAASb,GAAKkE,WAAWrH,EAAG+M,GAAI/I,SAASd,GAGnDupB,EAAgBtpB,OAEhBspB,EAAgB,IAAI5f,aAAa4f,GAI/BtS,EAAW1Q,qBAAuB8f,EAASmD,cAAcE,eAC5DrS,EAAe,IAAIjW,YAAYiW,IAKhC,MAAMsS,EAAiE,EAAnDprB,KAAKC,MAAOkD,EAAQwnB,MAAQpH,EAAkB,IAC3DyG,EAAiB7kB,GAAS2lB,EAAWD,SAC3C/R,EACAkS,EACA,EACAI,EACAjoB,EAAQgC,MACRhC,EAAQynB,WAAa,CAAC,cAAgB,KAGhC/oB,EAAOkX,GAAU+R,EAAWO,YAAYrB,GAE/C3mB,EAAOW,mBAAkBtD,GAAc0N,EAASlM,WAAY6W,uBAA4B5T,EAAM9E,QAAQ,OAItG,IAAK,MAAM6Y,KAAgBnY,GAAmBC,GAAO,CACpD,MAAMmY,EAAeD,EAAaL,QAClCjX,GAAeuX,EAActX,EAAOkX,GACpCvX,GAAkBR,EAAMkY,EAAcC,GACI,IAAtCD,EAAajQ,cAAcnG,QAAcoW,EAAa3Q,UAK3D,MAAMqQ,EAAaF,EAAWG,QAK9B,OAJAD,EAAWrW,SAASghB,GAAkB,MAAQ,IAAI3gB,YAAYonB,GAAmBA,GACjFhpB,EAAK0iB,WAAW9K,GACwB,IAApCF,EAAWzP,cAAcnG,QAAc4V,EAAWnQ,UAE/CvH,WC5JQsqB,GAAoB1T,EAAoBxH,GACvD,MAAMmb,EAAOC,GAAsB5T,EAAUxH,GACvCwB,EAAW,GAKjB,OAJI2Z,EAAOE,EAAeC,GAAG9Z,EAASxQ,KAAKqqB,EAAeC,GACtDH,EAAOE,EAAeE,GAAG/Z,EAASxQ,KAAKqqB,EAAeE,GACtDJ,EAAOE,EAAepH,GAAGzS,EAASxQ,KAAKqqB,EAAepH,GACtDkH,EAAOE,EAAerH,GAAGxS,EAASxQ,KAAKqqB,EAAerH,GACnDxS,WAkBQ4Z,GAAsB5T,EAAoBxH,GACzD,IAAImb,EAAO,EACX,IAAK,MAAMjb,KAAQsH,EAASnI,WAAWY,gBAAgBD,GAAU,CAChE,MAAMlG,EAASoG,EAAKT,YACpB,IAAI+B,SAAEA,GAAatB,EAAKsb,gBAGvBha,GACmB,qBAAnBtB,EAAKjD,WACLnD,aAAkB2hB,GAClB3hB,EAAO+F,iBAAmB4b,EAASC,UAAUC,SAE7Cna,IAAa6Z,EAAerH,GAGzBxS,EACH2Z,GAAQ3Z,EAIL1H,EAAO1D,eAAiBN,EAAaiE,MACxCyN,EAAStU,YAAYsP,gDAAgDtC,EAAKjD,eAG5E,OAAOke,WCtDQS,GAAiB5oB,EAAegN,GAC/C,MAAM7M,EAAOH,EAAII,UACXgM,EAAQpM,EACZqM,WACAY,gBAAgBD,GAChBzC,OAAQ2C,GAASA,EAAKT,cAAgBtM,GACtC4J,IAAKmD,GAASA,EAAKjD,WACrB,OAAO/L,MAAMC,KAAK,IAAI9B,IAAI+P,ICZ3B,IAAKyc,IAAL,SAAKA,GACJA,kBACAA,oBACAA,cAHD,CAAKA,KAAAA,QAML,MAAMC,GAA4C,CACjDC,CAACF,GAAMG,QAAS,YAChBD,CAACF,GAAMI,SAAU,aACjBF,CAACF,GAAMK,MAAO,cAoBTC,GAAqF,CAC1FC,KAAM,EACNC,QAAS,KACTjd,MAAO,KACPkd,MAAM,GAGDC,SACFJ,IACHK,MAAOX,GAAMK,OAERO,SACFN,IACHK,MAAOX,GAAMI,QACbI,QAAS,kBAEJK,SACFP,IACHK,MAAOX,GAAMG,OACbK,QAAS,iBAGJM,GAAuB,CAAC,aAAc,YAAa,cAEzD,IAAIC,GAAoC,KACpCC,GAAY,EAEhB,MAAMC,GAAmB,CAACC,EAA4BX,KAChDQ,KACJA,GAAO,IAAIG,EAAQC,UAAUZ,IAE9BS,KACOD,IAGFK,GAAmB,KACxBJ,KACID,IAAQC,IAAa,IACxBD,GAAKM,QACLN,GAAO,OAKIG,GAAU,SAAUjqB,GAChC,MAAMC,QAAeopB,GAAqBrpB,GACpCiqB,EAAUhqB,EAAQgqB,QAClBP,EAAQzpB,EAAQypB,MAEtB,IAAKO,EACJ,UAAUzmB,SAASkmB,4DAGpB,iBACC,MAAMvpB,EAASuU,EAAStU,YAClBmF,EAAWmP,EAASpU,UAAUkF,eAC9BskB,EAAOE,GAAiBC,EAAShqB,EAAQqpB,YAEzCe,QAAQC,IACb/kB,EAAS0E,IAAImL,MAAOlI,EAASqd,KAC5B,MAAMje,EAAQwc,GAAiBpU,EAAUxH,GACnCwB,EAAW4Z,GAAsB5T,EAAUxH,GAC3Csd,EACLtd,EAAQa,UACRb,EAAQ/C,cACLogB,EAAe,KAAK7V,EAASpU,UAAUkF,eAAe5F,SACpDwY,KAAYsR,aAAiBc,KAInC,IAAKX,GAAqBtmB,SAAS2J,EAAQ9R,eAE1C,YADA+E,EAAOW,SAASsX,0CAA+ClL,EAAQ9R,uBAE5D6E,EAAQspB,QAAQvhB,KAAKkF,EAAQ9R,eAExC,YADA+E,EAAOW,SAASsX,iBAAsBlL,EAAQ9R,sDAEpCkR,EAAM1M,SAAW0M,EAAM6D,KAAMsa,GAASxqB,EAAQqM,MAAMtE,KAAKyiB,IAEnE,YADAtqB,EAAOW,SAASsX,iBAAsB9L,EAAMnL,KAAK,4CAEvClB,EAAQypB,QAAUX,GAAMI,SAAWza,EAAW6Z,EAAerH,EAEvE,YADA/gB,EAAOuP,QAAQ0I,iBAAsB9L,EAAMnL,KAAK,kCAIjDhB,EAAOW,SAASsX,eAAoB9L,EAAMnL,KAAK,UAI/C,MAAMupB,EAAQZ,EAAKa,YAAYzd,EAAQjS,YACjC2vB,EAAgB1d,EAAQjS,WAAY2Q,iBAEpC8e,EAAMG,OAAO,CAAE5B,CAAChpB,EAAQypB,OAAQzpB,EAAQupB,KAAO,OAAS,KAE9D,MAAMsB,QAAqBJ,EAAMK,YAAY9qB,EAAQypB,OAErDvpB,EAAOW,SAASsX,MAAW4S,KAAKC,UAAUH,EAAaI,gBAEvDhe,EAAQxR,SAASovB,EAAaK,QAAQxvB,YAAYqtB,GAAmB/oB,EAAQypB,QAC7E,MAAM0B,EAAgBN,EAAaK,OAAOvf,WAE1CzL,EAAOW,SAASsX,MAAW1b,GAAYkuB,QAAoBluB,GAAY0uB,SAIzEjB,KAEAhqB,EAAOW,SAAS4oB,kBAuBL2B,GAAO,SAAUprB,GAC7B,MAAMD,QAAgBypB,GAAkBxpB,GACxC,uBACOgqB,GAAQjqB,EAARiqB,CAAkBvV,GAGPA,EAASpU,UAAUkF,eACvB2K,KAAMjD,GAAYA,EAAQ9R,gBAAkB4tB,GAAmBD,GAAMK,QACjF1U,EAAS7M,gBAAgByjB,GAAapiB,aAAY,KAwBxCqiB,GAAU,SAAUtrB,GAChC,MAAMD,QAAgB2pB,GAAqB1pB,GAC3C,OAAQyU,GACAuV,GAAQjqB,EAARiqB,CAAkBvV,IAuBd8W,GAAS,SAAUvrB,GAC/B,MAAMD,QAAgB4pB,GAAoB3pB,GAC1C,OAAQyU,GACAuV,GAAQjqB,EAARiqB,CAAkBvV,IChNrB+W,GAAyE,CAC9E7K,WAAW,YAmBI8K,GAAS1rB,EAA4ByrB,IACpD,IAAKzrB,EAAS2rB,iBACb,UAAUnoB,8EAGX,MAAMvD,QAAewrB,GAAsBzrB,GAE3C,OAAO/F,GA1CK,WA0CkBiG,IAC7B,MAAMC,EAASD,EAAIE,YACbwrB,EAAe,IAAI9vB,IACnB+vB,EAAe,IAAI/vB,IACzB,IAAIglB,EAAW,EAEf,IAAK,MAAMle,KAAQ1C,EAAII,UAAUqC,aAAc,CAC9C,MAAMmpB,EAAWlpB,EAAKuH,UAChB4hB,EAAiBnpB,EAAKC,iBAE5B,IAAK,IAAIxH,EAAI,EAAGA,EAAI0wB,EAAensB,OAAQvE,IAAK,CAC/C,MAAMyC,EAAOiuB,EAAe1wB,GAG5B,IAAK2wB,GAAgBluB,EAAMqC,EAAQ2rB,EAAUzwB,EAAG4E,EAAQ2gB,WAAY,SAEpE,MAAMqL,EAAmBC,GAAkBpuB,GAGrCoN,EAAWpN,EAAK0E,aAAa,YAAatD,WAC1C6hB,EAASjjB,EAAK0E,aAAa,UAAWtD,WACtCitB,EAAWruB,EAAK0E,aAAaypB,GAAmB/sB,WAGhDktB,EAAaR,EAAatvB,IAAI4O,IAAamhB,IACjDT,EAAapvB,IAAI0O,EAAUkhB,GAE3B,MAAME,EAAWV,EAAatvB,IAAIykB,IAAWsL,IAC7CT,EAAapvB,IAAIukB,EAAQuL,GAEzB,MAAMC,EAAaX,EAAatvB,IAAI6vB,IAAaE,IACjDT,EAAapvB,IAAI2vB,EAAUI,GAG3B,MAAMC,EAAc1uB,EAAK0E,aAAa,WAClCgqB,GAAoD,IAArCA,EAAYzmB,cAAcnG,QAAc4sB,EAAYnnB,UAGvE,MAAMonB,KAAmBL,KAAcE,KAAYC,IACnD,IAAIG,EAAUb,EAAavvB,IAAImwB,GAC/B,GAAIC,EAAS,CACZvsB,EAAOW,6CAA4CzF,cAAcywB,OACjEhuB,EAAKsU,aAAa,UAAWsa,GAC7B5L,IACA,SAID3gB,EAAOW,4CAA2CzF,cAAcywB,OAChE,MAAMa,EAAgB7uB,EAAK0E,aAAa,YAAauP,YAC/C6a,EAAe3sB,EAAQ0rB,iBAC5BzgB,aAAoBhD,aAAegD,EAAW,IAAIhD,aAAagD,GAC/D6V,aAAkB7Y,aAAe6Y,EAAS,IAAI7Y,aAAa6Y,GAC3DoL,aAAoBjkB,aAAeikB,EAAW,IAAIjkB,aAAaikB,IAIhE,IAAK,IAAI9wB,EAAI,EAAGA,EAAIuxB,EAAahtB,OAAQvE,GAAK,EAAGuxB,EAAavxB,KAAO,EAErEqxB,EAAUxsB,EAAI8R,iBAAiBE,UAAUya,GAAettB,SAASutB,GAAc3a,QAAQ,QACvFnU,EAAKsU,aAAa,UAAWsa,GAE7Bb,EAAarvB,IAAIiwB,EAAeC,GAChC5L,KAIGA,EAGJ3gB,EAAOW,6BAFPX,EAAOuP,sEAOV,SAASwc,GAAkBpuB,GAC1B,MAAM2I,EAAW3I,EAAKyJ,cACtB,IAAKd,EAAU,MAAO,aAEtB,MAAMomB,EAAoBpmB,EAASqmB,uBACnC,IAAKD,EAAmB,MAAO,aAE/B,MACMzlB,cADWylB,EAAkB9X,gBAEnC,OAAIjX,EAAK0E,aAAa4E,GAAkBA,EAEjC,aAGR,SAAS4kB,GAAgBluB,EAAiBqC,EAAiB2rB,EAAkBzwB,EAAWulB,GACvF,OACC9iB,EAAK0J,YAAcF,EAAU6D,KAAKK,WACjC1N,EAAK0E,aAAa,aAClB1E,EAAK0E,aAAa,WAClB1E,EAAK0E,aAAa,cAShB1E,EAAK0E,aAAa,aAAeoe,GACpCzgB,EAAOW,sCAAqCzF,cAAcywB,2BAIvDhuB,EAAKkG,eAER7D,EAAOuP,qCAAoCrU,cAAcywB,yCAdzD3rB,EAAOW,sCACyBzF,cAAcywB,8FCvIhD,MAAMjqB,GAAO,gBAmBDkrB,IAAAA,IAAZ,SAAYA,GAEXA,sBAEAA,sBAJD,CAAYA,KAAAA,QAOCC,MAAAA,GAAgD,CAC5DjxB,KAAM,CAAC,KAAM,MACb0O,OAAQsiB,GAAoBE,SAC5BvlB,QAAS,KACT4E,MAAO,eAOQ4gB,GAAcltB,EAAiCgtB,IAC9D,MAAM/sB,QAAe+sB,GAA4BhtB,GAEjD,OAAO/F,GAAgB4H,GAAMuT,MAAAA,IAC5B,MAAMjV,EAASD,EAAIE,YAEnB,IAAK,MAAM8M,KAAWhN,EAAII,UAAUkF,eAAgB,CACnD,MAAMtL,EAAOgT,EAAQ/C,UACf2D,EAAMZ,EAAQa,SAEpB,GADe9N,EAAQyH,UAAWzH,EAAQyH,QAAQM,KAAK9N,KAAS+F,EAAQyH,QAAQM,KAAK8F,GACzE,CACX3N,EAAOW,SAASe,kDAChB,SAGD,GAA8B,cAA1BqL,EAAQ9R,eAA2D,eAA1B8R,EAAQ9R,cAAgC,CACpF+E,EAAOuP,QAAQ7N,2CAA6CqL,EAAQ9R,mBACpE,SAGD,MAAMkR,EAAQwc,GAAiB5oB,EAAKgN,GACpC,GAAIjN,EAAQqM,QAAUA,EAAM6D,KAAMsa,0BAASxqB,EAAQqM,cAAR6gB,EAAenlB,KAAKyiB,KAAQ,CACtEtqB,EAAOW,SAASe,kBAAoByK,EAAMnL,KAAK,yCAC/C,SAGD,MAAOisB,EAAUC,GAAaptB,EAAQlE,MAC/BuxB,EAAUC,GAAargB,EAAQtH,UAEtC,GAAI0nB,GAAYF,GAAYG,GAAaF,EAAW,CACnDltB,EAAOW,SAASe,wCAChB,SAGD,IAAI2rB,EAAWF,EACXG,EAAYF,EAEZC,EAAWJ,IACdK,EAAY3wB,KAAKC,MAAM0wB,GAAaL,EAAWI,IAC/CA,EAAWJ,GAGRK,EAAYJ,IACfG,EAAW1wB,KAAKC,MAAMywB,GAAYH,EAAYI,IAC9CA,EAAYJ,GAGb,MAAMryB,EAAWkS,EAAQjS,WACnByyB,QAAkBvyB,EAAUH,EAAUkS,EAAQ9R,eAC9CuyB,EAAYC,EAAQ,IAAI5e,WAAWwe,EAAWC,EAAY,GAAI,CAACD,EAAUC,EAAW,IAE1FttB,EAAOW,SAASe,iBAAmBiM,GAAO5T,OAAUwzB,EAAUpyB,WAAWqyB,EAAUryB,YACnF6E,EAAOW,SAASe,gBAAkByK,EAAMnL,KAAK,UAE7C,IACClB,EAAQwK,SAAWsiB,GAAoBE,SACpCY,EAASH,EAAWC,GACpBG,EAASJ,EAAWC,GACtB,MAAOra,GACR,GAAIA,aAAa9P,MAAO,CACvBrD,EAAOuP,QAAQ7N,yBAA2BiM,GAAO5T,QAAWoZ,EAAEya,aAC9D,SAED,MAAMza,EAGPpG,EAAQxR,eAAeD,EAAWkyB,EAAWzgB,EAAQ9R,gBAGtD+E,EAAOW,SAASe,4BC/EFmsB,GAAcprB,EAAYqrB,EAAcrN,GAAY,EAAOsN,GAE1E,IAAK,MAAMC,KAAWvrB,EAAKC,iBAE1B,GADiBsrB,EAAQpoB,cAAcoK,KAAMoE,GAAMA,EAAEjR,eAAiBN,EAAaE,MAAQqR,IAAM3R,GACnF,CACb,MAAMwrB,EAAUD,EAAQxY,QACxB/S,EAAKnE,KAAK0vB,EAASC,GAEnB,IAAK,MAAMC,KAAaD,EAAQjwB,cAAe,CAC9C,MAAMmwB,EAAYD,EAAU1Y,QAC5ByY,EAAQ3vB,KAAK4vB,EAAWC,IAM3B,IAAK1N,EAAW,CACf,MAAM2N,EAAU,IAAIhyB,IAAiC,IACjDqG,EAAKC,oBACLD,EAAKC,iBAAiB2rB,QAAS1wB,GAASA,EAAKK,iBAE3CgO,EAAa,IAAIrQ,IACvB,IAAK,MAAMgC,KAAQ8E,EAAKC,iBACvB,IAAK,MAAMmT,KAAgBnY,GAAmBC,GAC5BkY,EACfjQ,cACAoK,KAAM1S,IAAOA,aAAa6J,GAAa7J,aAAagxB,KAAqBF,EAAQvyB,IAAIyB,MACtE0O,EAAWnQ,IAAIga,IAC/B7J,EAAW3P,IAAIwZ,EAAcA,EAAaL,SAI7C,IAAK,MAAM3O,KAAUunB,EACpB,IAAK,MAAOvY,EAAcC,KAAiB9J,EAC1CnF,EAAOvI,KAAKuX,EAAcC,GAM7BiY,EAAcA,GAAe,IAAI3xB,IACjC,IAAK,MAAMuB,KAAQ8E,EAAKC,iBACvB6rB,GAAmB5wB,EAAMmwB,EAAQC,YAyBnBQ,GAAmB5wB,EAAiBmwB,EAAcC,EAAc,IAAI3xB,WACnF,MAAM2O,EAAWpN,EAAK0E,aAAa,YAC7BuB,YAAWjG,EAAKkG,uBAAc9E,aAAcI,GAAc4L,EAAUlM,YAGtEkM,GACHyjB,GAAYV,EAAQ/iB,EAAUnH,EAAS,IAAIxH,IAAI2xB,IAGhD,MAAMnN,EAASjjB,EAAK0E,aAAa,UAC7Bue,GACH6N,GAAkBX,EAAQlN,EAAQhd,EAAS,IAAIxH,IAAI2xB,IAGpD,MAAMxB,EAAU5uB,EAAK0E,aAAa,WAC9BkqB,GACHmC,GAAmBZ,EAAQvB,EAAS3oB,EAAS,IAAIxH,IAAI2xB,IAItD,IAAK,MAAMnzB,KAAU+C,EAAKK,cAAe,CACxC,MAAM+M,EAAWnQ,EAAOyH,aAAa,YACjC0I,GACHyjB,GAAYV,EAAQ/iB,EAAUnH,EAAS,IAAIxH,IAAI2xB,IAGhD,MAAMnN,EAAShmB,EAAOyH,aAAa,UAC/Bue,GACH6N,GAAkBX,EAAQlN,EAAQhd,EAAS,IAAIxH,IAAI2xB,IAGpD,MAAMxB,EAAU3xB,EAAOyH,aAAa,WAChCkqB,GACHmC,GAAmBZ,EAAQvB,EAAS3oB,EAAS,IAAIxH,IAAI2xB,IAKvD,IAAK,IAAI7yB,EAAI,EAAGA,EAAI0I,EAAQnE,OAAQvE,IAAK6yB,EAAYhyB,IAAI6H,EAAQ1I,IAGlE,SAASszB,GAAYV,EAAcjwB,EAAqB+F,EAAsBmqB,GAG7E,MAAM/uB,EAAW,IAAI+I,aAAoC,EAAvBlK,EAAUgB,YACtCH,EAAcb,EAAUc,iBAE9B,IAAK,IAAIzD,EAAI,EAAG+M,EAAe,GAAID,EAAKnK,EAAUgB,WAAY3D,EAAI8M,EAAI9M,IACrE8D,EAAS3C,IAAIwB,EAAUyE,WAAWpH,EAAG+M,GAAK/M,EAAIwD,GAG/C,MAAMiwB,EAASC,IACf,IAAK,IAAI1zB,EAAI,EAAGA,EAAI0I,EAAQnE,OAAQvE,IAAK,CACxC,MAAMwF,EAAQkD,EAAQ1I,GAClB6yB,EAAYlyB,IAAI6E,KAEpB7C,EAAUyE,WAAW5B,EAAOiuB,GAC5B7U,EAAc6U,EAAQA,EAAQb,GAC9B9uB,EAAS3C,IAAIsyB,EAAgB,EAARjuB,GAErBqtB,EAAYhyB,IAAI2E,IAGjB7C,EAAUqB,SAASF,GAAUkJ,eAAc,GAG5C,SAASumB,GAAkBX,EAAcjwB,EAAqB+F,EAAsBmqB,GACnF,MAAMc,EAAeC,IACrBC,EAASF,EAAcf,GACvBnU,EAAOkV,EAAcA,GACrBG,EAAUH,EAAcA,GAExB,MAAMF,EAASC,IACf,IAAK,IAAI1zB,EAAI,EAAGA,EAAI0I,EAAQnE,OAAQvE,IAAK,CACxC,MAAMwF,EAAQkD,EAAQ1I,GAClB6yB,EAAYlyB,IAAI6E,KAEpB7C,EAAUyE,WAAW5B,EAAOiuB,GAC5BM,EAAcN,EAAQA,EAAQE,GAC9BK,EAAcP,EAAQA,GACtB9wB,EAAU0E,WAAW7B,EAAOiuB,GAE5BZ,EAAYhyB,IAAI2E,KAIlB,SAASguB,GAAmBZ,EAAcjwB,EAAqB+F,EAAsBmqB,GACpF,MAAMoB,EAAKP,IACLQ,EAAKC,IACX,IAAK,IAAIn0B,EAAI,EAAGA,EAAI0I,EAAQnE,OAAQvE,IAAK,CACxC,MAAMwF,EAAQkD,EAAQ1I,GACtB,GAAI6yB,EAAYlyB,IAAI6E,GAAQ,SAE5B7C,EAAUyE,WAAW5B,EAAO0uB,GAI5B,MAAOlyB,EAAGoyB,EAAGC,GAAKH,EAClBD,EAAG,GAAKrB,EAAO,GAAK5wB,EAAI4wB,EAAO,GAAKwB,EAAIxB,EAAO,GAAKyB,EACpDJ,EAAG,GAAKrB,EAAO,GAAK5wB,EAAI4wB,EAAO,GAAKwB,EAAIxB,EAAO,GAAKyB,EACpDJ,EAAG,GAAKrB,EAAO,GAAK5wB,EAAI4wB,EAAO,GAAKwB,EAAIxB,EAAO,IAAMyB,EACrDL,EAAcC,EAAIA,GAEjBC,EAAG,GAAKD,EAAG,GAAMC,EAAG,GAAKD,EAAG,GAAMC,EAAG,GAAKD,EAAG,GAE9CtxB,EAAU0E,WAAW7B,EAAO0uB,GAE5BrB,EAAYhyB,IAAI2E,IC7ML8uB,MAAAA,GAAQ,IACZzvB,IACP,MACMyvB,EADiBzvB,EAAI2H,gBAAgB+nB,GACdC,cAC7B3vB,EAAII,UACF8F,gBACAzF,QAAS8F,IACTA,EAASmK,aAAa,sBAAuB+e,MCH3CG,GAAqD,GAiBrDC,GAAc,CAAC/vB,EAA+B8vB,YAE9BA,GAAyB9vB,GAEvC/F,GAzBK,cAyBiBmb,MAAAA,IAC5B,MAAMjV,EAASuU,EAAStU,YAElB0R,EAAS4C,EAASpU,UAAU+T,cAAc,GAChDK,EACEpU,UACAkG,gBACA7F,QAASlD,GAAMA,EAAEyU,UAAUJ,IAC7B4C,EACEpU,UACA+T,cACA1T,QAAQ,CAACjD,EAAGmD,IAAWA,EAAQ,EAAInD,EAAE2H,UAAY,MAEnDlF,EAAOW,4CCzBOkvB,GAAgBtb,EAAoBxH,GACnD,MAAM8F,EAAQ0B,EAASnI,WACjB0jB,EAAyB,GAE/B,IAAK,MAAMC,KAAeld,EAAM7F,gBAAgBD,GAAU,CACzD,MAAMlG,EAASkpB,EAAYvjB,YACrBzS,EAAOg2B,EAAY/lB,UAAY,OAErC,IAAK,MAAMiD,KAAQ4F,EAAM4B,eAAe5N,GAAS,CAChD,MAAMvF,EAAQ2L,EAAKV,WACfjL,aAAiBqT,GAAe1H,EAAKjD,YAAcjQ,GACtD+1B,EAAQ/xB,KAAKuD,IAKhB,OAAOwuB"}